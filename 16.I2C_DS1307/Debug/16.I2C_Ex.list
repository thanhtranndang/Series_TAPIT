
16.I2C_Ex.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000065ec  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  0800677c  0800677c  0001677c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006820  08006820  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  08006820  08006820  00016820  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006828  08006828  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006828  08006828  00016828  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800682c  0800682c  0001682c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08006830  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020068  2**0
                  CONTENTS
 10 .bss          00000218  20000068  20000068  00020068  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000280  20000280  00020068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000b6b9  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001bda  00000000  00000000  0002b794  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000a68  00000000  00000000  0002d370  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000081e  00000000  00000000  0002ddd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000213ab  00000000  00000000  0002e5f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000d67d  00000000  00000000  0004f9a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c68fb  00000000  00000000  0005d01e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000032fc  00000000  00000000  0012391c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005d  00000000  00000000  00126c18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006764 	.word	0x08006764

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08006764 	.word	0x08006764

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b970 	b.w	8000568 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	460f      	mov	r7, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d965      	bls.n	8000382 <__udivmoddi4+0xe2>
 80002b6:	fab2 f382 	clz	r3, r2
 80002ba:	b143      	cbz	r3, 80002ce <__udivmoddi4+0x2e>
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	f1c3 0220 	rsb	r2, r3, #32
 80002c4:	409f      	lsls	r7, r3
 80002c6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ca:	4317      	orrs	r7, r2
 80002cc:	409c      	lsls	r4, r3
 80002ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d2:	fa1f f58c 	uxth.w	r5, ip
 80002d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002da:	0c22      	lsrs	r2, r4, #16
 80002dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e4:	fb01 f005 	mul.w	r0, r1, r5
 80002e8:	4290      	cmp	r0, r2
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ec:	eb1c 0202 	adds.w	r2, ip, r2
 80002f0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002f4:	f080 811c 	bcs.w	8000530 <__udivmoddi4+0x290>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f240 8119 	bls.w	8000530 <__udivmoddi4+0x290>
 80002fe:	3902      	subs	r1, #2
 8000300:	4462      	add	r2, ip
 8000302:	1a12      	subs	r2, r2, r0
 8000304:	b2a4      	uxth	r4, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	42a5      	cmp	r5, r4
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x90>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x294>
 8000326:	42a5      	cmp	r5, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x294>
 800032c:	4464      	add	r4, ip
 800032e:	3802      	subs	r0, #2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0xa2>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xbc>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80ed 	beq.w	800052a <__udivmoddi4+0x28a>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d149      	bne.n	80003f8 <__udivmoddi4+0x158>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d302      	bcc.n	800036e <__udivmoddi4+0xce>
 8000368:	4282      	cmp	r2, r0
 800036a:	f200 80f8 	bhi.w	800055e <__udivmoddi4+0x2be>
 800036e:	1a84      	subs	r4, r0, r2
 8000370:	eb65 0203 	sbc.w	r2, r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	4617      	mov	r7, r2
 8000378:	2e00      	cmp	r6, #0
 800037a:	d0e2      	beq.n	8000342 <__udivmoddi4+0xa2>
 800037c:	e9c6 4700 	strd	r4, r7, [r6]
 8000380:	e7df      	b.n	8000342 <__udivmoddi4+0xa2>
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xe6>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2101      	movs	r1, #1
 800039c:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a0:	fb07 2015 	mls	r0, r7, r5, r2
 80003a4:	0c22      	lsrs	r2, r4, #16
 80003a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003aa:	fb0e f005 	mul.w	r0, lr, r5
 80003ae:	4290      	cmp	r0, r2
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b2:	eb1c 0202 	adds.w	r2, ip, r2
 80003b6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4290      	cmp	r0, r2
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2b8>
 80003c2:	4645      	mov	r5, r8
 80003c4:	1a12      	subs	r2, r2, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003cc:	fb07 2210 	mls	r2, r7, r0, r2
 80003d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x14e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x14c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2c2>
 80003ec:	4610      	mov	r0, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f6:	e79f      	b.n	8000338 <__udivmoddi4+0x98>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa05 f401 	lsl.w	r4, r5, r1
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	40fd      	lsrs	r5, r7
 8000410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000414:	4323      	orrs	r3, r4
 8000416:	fbb5 f8f9 	udiv	r8, r5, r9
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	fb09 5518 	mls	r5, r9, r8, r5
 8000422:	0c1c      	lsrs	r4, r3, #16
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb08 f50e 	mul.w	r5, r8, lr
 800042c:	42a5      	cmp	r5, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	fa00 f001 	lsl.w	r0, r0, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2b4>
 8000444:	42a5      	cmp	r5, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2b4>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	b29d      	uxth	r5, r3
 8000454:	fbb4 f3f9 	udiv	r3, r4, r9
 8000458:	fb09 4413 	mls	r4, r9, r3, r4
 800045c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000460:	fb03 fe0e 	mul.w	lr, r3, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2ac>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2ac>
 8000476:	3b02      	subs	r3, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047e:	fba3 9502 	umull	r9, r5, r3, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x29c>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x298>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x208>
 8000492:	ebb0 0208 	subs.w	r2, r0, r8
 8000496:	eb64 040e 	sbc.w	r4, r4, lr
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40ca      	lsrs	r2, r1
 80004a0:	40cc      	lsrs	r4, r1
 80004a2:	4317      	orrs	r7, r2
 80004a4:	e9c6 7400 	strd	r7, r4, [r6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	f1c3 0120 	rsb	r1, r3, #32
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	fa20 f201 	lsr.w	r2, r0, r1
 80004bc:	fa25 f101 	lsr.w	r1, r5, r1
 80004c0:	409d      	lsls	r5, r3
 80004c2:	432a      	orrs	r2, r5
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d0:	fb07 1510 	mls	r5, r7, r0, r1
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	fb00 f50e 	mul.w	r5, r0, lr
 80004de:	428d      	cmp	r5, r1
 80004e0:	fa04 f403 	lsl.w	r4, r4, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x258>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 80004f0:	428d      	cmp	r5, r1
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1b49      	subs	r1, r1, r5
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000500:	fb07 1115 	mls	r1, r7, r5, r1
 8000504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000508:	fb05 f10e 	mul.w	r1, r5, lr
 800050c:	4291      	cmp	r1, r2
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x282>
 8000510:	eb1c 0202 	adds.w	r2, ip, r2
 8000514:	f105 38ff 	add.w	r8, r5, #4294967295
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 800051a:	4291      	cmp	r1, r2
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	3d02      	subs	r5, #2
 8000520:	4462      	add	r2, ip
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0xfc>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xa2>
 8000530:	4639      	mov	r1, r7
 8000532:	e6e6      	b.n	8000302 <__udivmoddi4+0x62>
 8000534:	4610      	mov	r0, r2
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x90>
 8000538:	4548      	cmp	r0, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3b01      	subs	r3, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000548:	4645      	mov	r5, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x282>
 800054c:	462b      	mov	r3, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1da>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x258>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000558:	3d02      	subs	r5, #2
 800055a:	4462      	add	r2, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x124>
 800055e:	4608      	mov	r0, r1
 8000560:	e70a      	b.n	8000378 <__udivmoddi4+0xd8>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x14e>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <RTC_BCD2DEC>:
 void RTC_SetTime(uint8_t hour, uint8_t minute, uint8_t sec, uint8_t date, uint8_t month, uint8_t year, int day);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
 uint8_t RTC_BCD2DEC(uint8_t data) {
 800056c:	b480      	push	{r7}
 800056e:	b083      	sub	sp, #12
 8000570:	af00      	add	r7, sp, #0
 8000572:	4603      	mov	r3, r0
 8000574:	71fb      	strb	r3, [r7, #7]
	 return (data >> 4)*10 + ( data&0x0f);
 8000576:	79fb      	ldrb	r3, [r7, #7]
 8000578:	091b      	lsrs	r3, r3, #4
 800057a:	b2db      	uxtb	r3, r3
 800057c:	461a      	mov	r2, r3
 800057e:	0092      	lsls	r2, r2, #2
 8000580:	4413      	add	r3, r2
 8000582:	005b      	lsls	r3, r3, #1
 8000584:	b2da      	uxtb	r2, r3
 8000586:	79fb      	ldrb	r3, [r7, #7]
 8000588:	f003 030f 	and.w	r3, r3, #15
 800058c:	b2db      	uxtb	r3, r3
 800058e:	4413      	add	r3, r2
 8000590:	b2db      	uxtb	r3, r3
 }
 8000592:	4618      	mov	r0, r3
 8000594:	370c      	adds	r7, #12
 8000596:	46bd      	mov	sp, r7
 8000598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059c:	4770      	bx	lr
	...

080005a0 <RTC_DEC2BCD>:

 uint8_t RTC_DEC2BCD(uint8_t data) {
 80005a0:	b480      	push	{r7}
 80005a2:	b083      	sub	sp, #12
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	4603      	mov	r3, r0
 80005a8:	71fb      	strb	r3, [r7, #7]
	 return (data/10)<<4|(data%10);
 80005aa:	79fb      	ldrb	r3, [r7, #7]
 80005ac:	4a0d      	ldr	r2, [pc, #52]	; (80005e4 <RTC_DEC2BCD+0x44>)
 80005ae:	fba2 2303 	umull	r2, r3, r2, r3
 80005b2:	08db      	lsrs	r3, r3, #3
 80005b4:	b2db      	uxtb	r3, r3
 80005b6:	011b      	lsls	r3, r3, #4
 80005b8:	b258      	sxtb	r0, r3
 80005ba:	79fa      	ldrb	r2, [r7, #7]
 80005bc:	4b09      	ldr	r3, [pc, #36]	; (80005e4 <RTC_DEC2BCD+0x44>)
 80005be:	fba3 1302 	umull	r1, r3, r3, r2
 80005c2:	08d9      	lsrs	r1, r3, #3
 80005c4:	460b      	mov	r3, r1
 80005c6:	009b      	lsls	r3, r3, #2
 80005c8:	440b      	add	r3, r1
 80005ca:	005b      	lsls	r3, r3, #1
 80005cc:	1ad3      	subs	r3, r2, r3
 80005ce:	b2db      	uxtb	r3, r3
 80005d0:	b25b      	sxtb	r3, r3
 80005d2:	4303      	orrs	r3, r0
 80005d4:	b25b      	sxtb	r3, r3
 80005d6:	b2db      	uxtb	r3, r3
 }
 80005d8:	4618      	mov	r0, r3
 80005da:	370c      	adds	r7, #12
 80005dc:	46bd      	mov	sp, r7
 80005de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e2:	4770      	bx	lr
 80005e4:	cccccccd 	.word	0xcccccccd

080005e8 <I2C_WriteBuffer>:


 void I2C_WriteBuffer(I2C_HandleTypeDef hi2c1, uint8_t DEV_ADDR, uint8_t sizebuf) {
 80005e8:	b084      	sub	sp, #16
 80005ea:	b580      	push	{r7, lr}
 80005ec:	b082      	sub	sp, #8
 80005ee:	af02      	add	r7, sp, #8
 80005f0:	f107 0c08 	add.w	ip, r7, #8
 80005f4:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 	 while(HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)DEV_ADDR, (uint8_t*) &DS1307.I2C_Buffer, (uint16_t)sizebuf, (uint32_t)1000)) {
 80005f8:	e009      	b.n	800060e <I2C_WriteBuffer+0x26>
 		 if(HAL_I2C_GetError(&hi2c1) != HAL_I2C_ERROR_AF) {
 80005fa:	f107 0008 	add.w	r0, r7, #8
 80005fe:	f001 ff13 	bl	8002428 <HAL_I2C_GetError>
 8000602:	4603      	mov	r3, r0
 8000604:	2b04      	cmp	r3, #4
 8000606:	d002      	beq.n	800060e <I2C_WriteBuffer+0x26>
 			 printf("Write Buffer Error\r\n");
 8000608:	480d      	ldr	r0, [pc, #52]	; (8000640 <I2C_WriteBuffer+0x58>)
 800060a:	f005 fa33 	bl	8005a74 <puts>
 	 while(HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)DEV_ADDR, (uint8_t*) &DS1307.I2C_Buffer, (uint16_t)sizebuf, (uint32_t)1000)) {
 800060e:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8000612:	b299      	uxth	r1, r3
 8000614:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8000618:	b29b      	uxth	r3, r3
 800061a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800061e:	9200      	str	r2, [sp, #0]
 8000620:	4a08      	ldr	r2, [pc, #32]	; (8000644 <I2C_WriteBuffer+0x5c>)
 8000622:	f107 0008 	add.w	r0, r7, #8
 8000626:	f001 f973 	bl	8001910 <HAL_I2C_Master_Transmit>
 800062a:	4603      	mov	r3, r0
 800062c:	2b00      	cmp	r3, #0
 800062e:	d1e4      	bne.n	80005fa <I2C_WriteBuffer+0x12>
 		 }
 	 }
  }
 8000630:	bf00      	nop
 8000632:	bf00      	nop
 8000634:	46bd      	mov	sp, r7
 8000636:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800063a:	b004      	add	sp, #16
 800063c:	4770      	bx	lr
 800063e:	bf00      	nop
 8000640:	0800677c 	.word	0x0800677c
 8000644:	2000008b 	.word	0x2000008b

08000648 <I2C_ReadBuffer>:


 void I2C_ReadBuffer(I2C_HandleTypeDef hi2c1, uint8_t DEV_ADDR, uint8_t sizebuf) {
 8000648:	b084      	sub	sp, #16
 800064a:	b580      	push	{r7, lr}
 800064c:	b082      	sub	sp, #8
 800064e:	af02      	add	r7, sp, #8
 8000650:	f107 0c08 	add.w	ip, r7, #8
 8000654:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	 while(HAL_I2C_Master_Receive(&hi2c1, (uint16_t)DEV_ADDR, (uint8_t*)&DS1307.I2C_Buffer, (uint16_t)sizebuf, (uint32_t)1000)) {
 8000658:	e009      	b.n	800066e <I2C_ReadBuffer+0x26>
	 		 if(HAL_I2C_GetError(&hi2c1) != HAL_I2C_ERROR_AF) {
 800065a:	f107 0008 	add.w	r0, r7, #8
 800065e:	f001 fee3 	bl	8002428 <HAL_I2C_GetError>
 8000662:	4603      	mov	r3, r0
 8000664:	2b04      	cmp	r3, #4
 8000666:	d002      	beq.n	800066e <I2C_ReadBuffer+0x26>
	 			 printf("Read Buffer Error\r\n");
 8000668:	480d      	ldr	r0, [pc, #52]	; (80006a0 <I2C_ReadBuffer+0x58>)
 800066a:	f005 fa03 	bl	8005a74 <puts>
	 while(HAL_I2C_Master_Receive(&hi2c1, (uint16_t)DEV_ADDR, (uint8_t*)&DS1307.I2C_Buffer, (uint16_t)sizebuf, (uint32_t)1000)) {
 800066e:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8000672:	b299      	uxth	r1, r3
 8000674:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8000678:	b29b      	uxth	r3, r3
 800067a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800067e:	9200      	str	r2, [sp, #0]
 8000680:	4a08      	ldr	r2, [pc, #32]	; (80006a4 <I2C_ReadBuffer+0x5c>)
 8000682:	f107 0008 	add.w	r0, r7, #8
 8000686:	f001 fa41 	bl	8001b0c <HAL_I2C_Master_Receive>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d1e4      	bne.n	800065a <I2C_ReadBuffer+0x12>
	 		 }
	 	 }
 }
 8000690:	bf00      	nop
 8000692:	bf00      	nop
 8000694:	46bd      	mov	sp, r7
 8000696:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800069a:	b004      	add	sp, #16
 800069c:	4770      	bx	lr
 800069e:	bf00      	nop
 80006a0:	08006790 	.word	0x08006790
 80006a4:	2000008b 	.word	0x2000008b

080006a8 <RTC_GetTime>:

 void RTC_GetTime(void) {
 80006a8:	b590      	push	{r4, r7, lr}
 80006aa:	b095      	sub	sp, #84	; 0x54
 80006ac:	af14      	add	r7, sp, #80	; 0x50
	 	 DS1307.I2C_Buffer[0] = 0x00;
 80006ae:	4b36      	ldr	r3, [pc, #216]	; (8000788 <RTC_GetTime+0xe0>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	71da      	strb	r2, [r3, #7]
	 	 I2C_WriteBuffer(hi2c1, (uint16_t)DS1307_ADRESS, 1);
 80006b4:	4c35      	ldr	r4, [pc, #212]	; (800078c <RTC_GetTime+0xe4>)
 80006b6:	2301      	movs	r3, #1
 80006b8:	9312      	str	r3, [sp, #72]	; 0x48
 80006ba:	23d0      	movs	r3, #208	; 0xd0
 80006bc:	9311      	str	r3, [sp, #68]	; 0x44
 80006be:	4668      	mov	r0, sp
 80006c0:	f104 0310 	add.w	r3, r4, #16
 80006c4:	2244      	movs	r2, #68	; 0x44
 80006c6:	4619      	mov	r1, r3
 80006c8:	f005 fb2f 	bl	8005d2a <memcpy>
 80006cc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80006d0:	f7ff ff8a 	bl	80005e8 <I2C_WriteBuffer>
	 	 while(HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 80006d4:	bf00      	nop
 80006d6:	482d      	ldr	r0, [pc, #180]	; (800078c <RTC_GetTime+0xe4>)
 80006d8:	f001 fe98 	bl	800240c <HAL_I2C_GetState>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b20      	cmp	r3, #32
 80006e0:	d1f9      	bne.n	80006d6 <RTC_GetTime+0x2e>

	 	 }
		 I2C_ReadBuffer(hi2c1, (uint16_t)DS1307_ADRESS, 8);
 80006e2:	4c2a      	ldr	r4, [pc, #168]	; (800078c <RTC_GetTime+0xe4>)
 80006e4:	2308      	movs	r3, #8
 80006e6:	9312      	str	r3, [sp, #72]	; 0x48
 80006e8:	23d0      	movs	r3, #208	; 0xd0
 80006ea:	9311      	str	r3, [sp, #68]	; 0x44
 80006ec:	4668      	mov	r0, sp
 80006ee:	f104 0310 	add.w	r3, r4, #16
 80006f2:	2244      	movs	r2, #68	; 0x44
 80006f4:	4619      	mov	r1, r3
 80006f6:	f005 fb18 	bl	8005d2a <memcpy>
 80006fa:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80006fe:	f7ff ffa3 	bl	8000648 <I2C_ReadBuffer>

		 DS1307.day = RTC_BCD2DEC(DS1307.I2C_Buffer[3]);
 8000702:	4b21      	ldr	r3, [pc, #132]	; (8000788 <RTC_GetTime+0xe0>)
 8000704:	7a9b      	ldrb	r3, [r3, #10]
 8000706:	4618      	mov	r0, r3
 8000708:	f7ff ff30 	bl	800056c <RTC_BCD2DEC>
 800070c:	4603      	mov	r3, r0
 800070e:	461a      	mov	r2, r3
 8000710:	4b1d      	ldr	r3, [pc, #116]	; (8000788 <RTC_GetTime+0xe0>)
 8000712:	70da      	strb	r2, [r3, #3]
		 DS1307.date = RTC_BCD2DEC(DS1307.I2C_Buffer[4]);
 8000714:	4b1c      	ldr	r3, [pc, #112]	; (8000788 <RTC_GetTime+0xe0>)
 8000716:	7adb      	ldrb	r3, [r3, #11]
 8000718:	4618      	mov	r0, r3
 800071a:	f7ff ff27 	bl	800056c <RTC_BCD2DEC>
 800071e:	4603      	mov	r3, r0
 8000720:	461a      	mov	r2, r3
 8000722:	4b19      	ldr	r3, [pc, #100]	; (8000788 <RTC_GetTime+0xe0>)
 8000724:	711a      	strb	r2, [r3, #4]
		 DS1307.month = RTC_BCD2DEC(DS1307.I2C_Buffer[5]);
 8000726:	4b18      	ldr	r3, [pc, #96]	; (8000788 <RTC_GetTime+0xe0>)
 8000728:	7b1b      	ldrb	r3, [r3, #12]
 800072a:	4618      	mov	r0, r3
 800072c:	f7ff ff1e 	bl	800056c <RTC_BCD2DEC>
 8000730:	4603      	mov	r3, r0
 8000732:	461a      	mov	r2, r3
 8000734:	4b14      	ldr	r3, [pc, #80]	; (8000788 <RTC_GetTime+0xe0>)
 8000736:	715a      	strb	r2, [r3, #5]
		 DS1307.year = RTC_BCD2DEC(DS1307.I2C_Buffer[6]);
 8000738:	4b13      	ldr	r3, [pc, #76]	; (8000788 <RTC_GetTime+0xe0>)
 800073a:	7b5b      	ldrb	r3, [r3, #13]
 800073c:	4618      	mov	r0, r3
 800073e:	f7ff ff15 	bl	800056c <RTC_BCD2DEC>
 8000742:	4603      	mov	r3, r0
 8000744:	461a      	mov	r2, r3
 8000746:	4b10      	ldr	r3, [pc, #64]	; (8000788 <RTC_GetTime+0xe0>)
 8000748:	719a      	strb	r2, [r3, #6]

		 DS1307.sec = RTC_BCD2DEC(DS1307.I2C_Buffer[0]);
 800074a:	4b0f      	ldr	r3, [pc, #60]	; (8000788 <RTC_GetTime+0xe0>)
 800074c:	79db      	ldrb	r3, [r3, #7]
 800074e:	4618      	mov	r0, r3
 8000750:	f7ff ff0c 	bl	800056c <RTC_BCD2DEC>
 8000754:	4603      	mov	r3, r0
 8000756:	461a      	mov	r2, r3
 8000758:	4b0b      	ldr	r3, [pc, #44]	; (8000788 <RTC_GetTime+0xe0>)
 800075a:	701a      	strb	r2, [r3, #0]
		 DS1307.minute = RTC_BCD2DEC(DS1307.I2C_Buffer[1]);
 800075c:	4b0a      	ldr	r3, [pc, #40]	; (8000788 <RTC_GetTime+0xe0>)
 800075e:	7a1b      	ldrb	r3, [r3, #8]
 8000760:	4618      	mov	r0, r3
 8000762:	f7ff ff03 	bl	800056c <RTC_BCD2DEC>
 8000766:	4603      	mov	r3, r0
 8000768:	461a      	mov	r2, r3
 800076a:	4b07      	ldr	r3, [pc, #28]	; (8000788 <RTC_GetTime+0xe0>)
 800076c:	705a      	strb	r2, [r3, #1]
		 DS1307.hour = RTC_BCD2DEC(DS1307.I2C_Buffer[2]);
 800076e:	4b06      	ldr	r3, [pc, #24]	; (8000788 <RTC_GetTime+0xe0>)
 8000770:	7a5b      	ldrb	r3, [r3, #9]
 8000772:	4618      	mov	r0, r3
 8000774:	f7ff fefa 	bl	800056c <RTC_BCD2DEC>
 8000778:	4603      	mov	r3, r0
 800077a:	461a      	mov	r2, r3
 800077c:	4b02      	ldr	r3, [pc, #8]	; (8000788 <RTC_GetTime+0xe0>)
 800077e:	709a      	strb	r2, [r3, #2]

 }
 8000780:	bf00      	nop
 8000782:	3704      	adds	r7, #4
 8000784:	46bd      	mov	sp, r7
 8000786:	bd90      	pop	{r4, r7, pc}
 8000788:	20000084 	.word	0x20000084
 800078c:	20000094 	.word	0x20000094

08000790 <RTC_SetTime>:

 void RTC_SetTime(uint8_t hour, uint8_t minute, uint8_t sec, uint8_t date, uint8_t month, uint8_t year, int day) {
 8000790:	b590      	push	{r4, r7, lr}
 8000792:	b097      	sub	sp, #92	; 0x5c
 8000794:	af14      	add	r7, sp, #80	; 0x50
 8000796:	4604      	mov	r4, r0
 8000798:	4608      	mov	r0, r1
 800079a:	4611      	mov	r1, r2
 800079c:	461a      	mov	r2, r3
 800079e:	4623      	mov	r3, r4
 80007a0:	71fb      	strb	r3, [r7, #7]
 80007a2:	4603      	mov	r3, r0
 80007a4:	71bb      	strb	r3, [r7, #6]
 80007a6:	460b      	mov	r3, r1
 80007a8:	717b      	strb	r3, [r7, #5]
 80007aa:	4613      	mov	r3, r2
 80007ac:	713b      	strb	r3, [r7, #4]
	 DS1307.I2C_Buffer[0] = 0x00;
 80007ae:	4b2a      	ldr	r3, [pc, #168]	; (8000858 <RTC_SetTime+0xc8>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	71da      	strb	r2, [r3, #7]
	 DS1307.I2C_Buffer[1] = RTC_DEC2BCD(sec);
 80007b4:	797b      	ldrb	r3, [r7, #5]
 80007b6:	4618      	mov	r0, r3
 80007b8:	f7ff fef2 	bl	80005a0 <RTC_DEC2BCD>
 80007bc:	4603      	mov	r3, r0
 80007be:	461a      	mov	r2, r3
 80007c0:	4b25      	ldr	r3, [pc, #148]	; (8000858 <RTC_SetTime+0xc8>)
 80007c2:	721a      	strb	r2, [r3, #8]
	 DS1307.I2C_Buffer[2] = RTC_DEC2BCD(minute);
 80007c4:	79bb      	ldrb	r3, [r7, #6]
 80007c6:	4618      	mov	r0, r3
 80007c8:	f7ff feea 	bl	80005a0 <RTC_DEC2BCD>
 80007cc:	4603      	mov	r3, r0
 80007ce:	461a      	mov	r2, r3
 80007d0:	4b21      	ldr	r3, [pc, #132]	; (8000858 <RTC_SetTime+0xc8>)
 80007d2:	725a      	strb	r2, [r3, #9]
	 DS1307.I2C_Buffer[3] = RTC_DEC2BCD(hour);
 80007d4:	79fb      	ldrb	r3, [r7, #7]
 80007d6:	4618      	mov	r0, r3
 80007d8:	f7ff fee2 	bl	80005a0 <RTC_DEC2BCD>
 80007dc:	4603      	mov	r3, r0
 80007de:	461a      	mov	r2, r3
 80007e0:	4b1d      	ldr	r3, [pc, #116]	; (8000858 <RTC_SetTime+0xc8>)
 80007e2:	729a      	strb	r2, [r3, #10]
	 DS1307.I2C_Buffer[4] = RTC_DEC2BCD(day);
 80007e4:	6a3b      	ldr	r3, [r7, #32]
 80007e6:	b2db      	uxtb	r3, r3
 80007e8:	4618      	mov	r0, r3
 80007ea:	f7ff fed9 	bl	80005a0 <RTC_DEC2BCD>
 80007ee:	4603      	mov	r3, r0
 80007f0:	461a      	mov	r2, r3
 80007f2:	4b19      	ldr	r3, [pc, #100]	; (8000858 <RTC_SetTime+0xc8>)
 80007f4:	72da      	strb	r2, [r3, #11]
	 DS1307.I2C_Buffer[5] = RTC_DEC2BCD(date);
 80007f6:	793b      	ldrb	r3, [r7, #4]
 80007f8:	4618      	mov	r0, r3
 80007fa:	f7ff fed1 	bl	80005a0 <RTC_DEC2BCD>
 80007fe:	4603      	mov	r3, r0
 8000800:	461a      	mov	r2, r3
 8000802:	4b15      	ldr	r3, [pc, #84]	; (8000858 <RTC_SetTime+0xc8>)
 8000804:	731a      	strb	r2, [r3, #12]
	 DS1307.I2C_Buffer[6] = RTC_DEC2BCD(month);
 8000806:	7e3b      	ldrb	r3, [r7, #24]
 8000808:	4618      	mov	r0, r3
 800080a:	f7ff fec9 	bl	80005a0 <RTC_DEC2BCD>
 800080e:	4603      	mov	r3, r0
 8000810:	461a      	mov	r2, r3
 8000812:	4b11      	ldr	r3, [pc, #68]	; (8000858 <RTC_SetTime+0xc8>)
 8000814:	735a      	strb	r2, [r3, #13]
	 DS1307.I2C_Buffer[7] = RTC_DEC2BCD(year);
 8000816:	7f3b      	ldrb	r3, [r7, #28]
 8000818:	4618      	mov	r0, r3
 800081a:	f7ff fec1 	bl	80005a0 <RTC_DEC2BCD>
 800081e:	4603      	mov	r3, r0
 8000820:	461a      	mov	r2, r3
 8000822:	4b0d      	ldr	r3, [pc, #52]	; (8000858 <RTC_SetTime+0xc8>)
 8000824:	739a      	strb	r2, [r3, #14]
	 I2C_WriteBuffer(hi2c1, (uint16_t)DS1307_ADRESS, 8);
 8000826:	4c0d      	ldr	r4, [pc, #52]	; (800085c <RTC_SetTime+0xcc>)
 8000828:	2308      	movs	r3, #8
 800082a:	9312      	str	r3, [sp, #72]	; 0x48
 800082c:	23d0      	movs	r3, #208	; 0xd0
 800082e:	9311      	str	r3, [sp, #68]	; 0x44
 8000830:	4668      	mov	r0, sp
 8000832:	f104 0310 	add.w	r3, r4, #16
 8000836:	2244      	movs	r2, #68	; 0x44
 8000838:	4619      	mov	r1, r3
 800083a:	f005 fa76 	bl	8005d2a <memcpy>
 800083e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000842:	f7ff fed1 	bl	80005e8 <I2C_WriteBuffer>
	 HAL_Delay(500);
 8000846:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800084a:	f000 fbab 	bl	8000fa4 <HAL_Delay>
 }
 800084e:	bf00      	nop
 8000850:	370c      	adds	r7, #12
 8000852:	46bd      	mov	sp, r7
 8000854:	bd90      	pop	{r4, r7, pc}
 8000856:	bf00      	nop
 8000858:	20000084 	.word	0x20000084
 800085c:	20000094 	.word	0x20000094

08000860 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b084      	sub	sp, #16
 8000864:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000866:	f000 fb2b 	bl	8000ec0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800086a:	f000 f83b 	bl	80008e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800086e:	f000 f8ef 	bl	8000a50 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000872:	f000 f895 	bl	80009a0 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8000876:	f000 f8c1 	bl	80009fc <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
RTC_SetTime(11, 30, 20, 19, 10, 23, 5);
 800087a:	2305      	movs	r3, #5
 800087c:	9302      	str	r3, [sp, #8]
 800087e:	2317      	movs	r3, #23
 8000880:	9301      	str	r3, [sp, #4]
 8000882:	230a      	movs	r3, #10
 8000884:	9300      	str	r3, [sp, #0]
 8000886:	2313      	movs	r3, #19
 8000888:	2214      	movs	r2, #20
 800088a:	211e      	movs	r1, #30
 800088c:	200b      	movs	r0, #11
 800088e:	f7ff ff7f 	bl	8000790 <RTC_SetTime>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
RTC_GetTime();
 8000892:	f7ff ff09 	bl	80006a8 <RTC_GetTime>
printf("Thu %d-%02d-%02d-20%02d\n",DS1307.day, DS1307.date, DS1307.month, DS1307.year);
 8000896:	4b10      	ldr	r3, [pc, #64]	; (80008d8 <main+0x78>)
 8000898:	78db      	ldrb	r3, [r3, #3]
 800089a:	4619      	mov	r1, r3
 800089c:	4b0e      	ldr	r3, [pc, #56]	; (80008d8 <main+0x78>)
 800089e:	791b      	ldrb	r3, [r3, #4]
 80008a0:	461a      	mov	r2, r3
 80008a2:	4b0d      	ldr	r3, [pc, #52]	; (80008d8 <main+0x78>)
 80008a4:	795b      	ldrb	r3, [r3, #5]
 80008a6:	4618      	mov	r0, r3
 80008a8:	4b0b      	ldr	r3, [pc, #44]	; (80008d8 <main+0x78>)
 80008aa:	799b      	ldrb	r3, [r3, #6]
 80008ac:	9300      	str	r3, [sp, #0]
 80008ae:	4603      	mov	r3, r0
 80008b0:	480a      	ldr	r0, [pc, #40]	; (80008dc <main+0x7c>)
 80008b2:	f005 f879 	bl	80059a8 <iprintf>
printf("%02d:%02d:%02d\r\n", DS1307.hour, DS1307.minute, DS1307.sec);
 80008b6:	4b08      	ldr	r3, [pc, #32]	; (80008d8 <main+0x78>)
 80008b8:	789b      	ldrb	r3, [r3, #2]
 80008ba:	4619      	mov	r1, r3
 80008bc:	4b06      	ldr	r3, [pc, #24]	; (80008d8 <main+0x78>)
 80008be:	785b      	ldrb	r3, [r3, #1]
 80008c0:	461a      	mov	r2, r3
 80008c2:	4b05      	ldr	r3, [pc, #20]	; (80008d8 <main+0x78>)
 80008c4:	781b      	ldrb	r3, [r3, #0]
 80008c6:	4806      	ldr	r0, [pc, #24]	; (80008e0 <main+0x80>)
 80008c8:	f005 f86e 	bl	80059a8 <iprintf>
HAL_Delay(1000);
 80008cc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008d0:	f000 fb68 	bl	8000fa4 <HAL_Delay>
RTC_GetTime();
 80008d4:	e7dd      	b.n	8000892 <main+0x32>
 80008d6:	bf00      	nop
 80008d8:	20000084 	.word	0x20000084
 80008dc:	080067a4 	.word	0x080067a4
 80008e0:	080067c0 	.word	0x080067c0

080008e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b094      	sub	sp, #80	; 0x50
 80008e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008ea:	f107 0320 	add.w	r3, r7, #32
 80008ee:	2230      	movs	r2, #48	; 0x30
 80008f0:	2100      	movs	r1, #0
 80008f2:	4618      	mov	r0, r3
 80008f4:	f005 f99e 	bl	8005c34 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008f8:	f107 030c 	add.w	r3, r7, #12
 80008fc:	2200      	movs	r2, #0
 80008fe:	601a      	str	r2, [r3, #0]
 8000900:	605a      	str	r2, [r3, #4]
 8000902:	609a      	str	r2, [r3, #8]
 8000904:	60da      	str	r2, [r3, #12]
 8000906:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000908:	2300      	movs	r3, #0
 800090a:	60bb      	str	r3, [r7, #8]
 800090c:	4b22      	ldr	r3, [pc, #136]	; (8000998 <SystemClock_Config+0xb4>)
 800090e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000910:	4a21      	ldr	r2, [pc, #132]	; (8000998 <SystemClock_Config+0xb4>)
 8000912:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000916:	6413      	str	r3, [r2, #64]	; 0x40
 8000918:	4b1f      	ldr	r3, [pc, #124]	; (8000998 <SystemClock_Config+0xb4>)
 800091a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800091c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000920:	60bb      	str	r3, [r7, #8]
 8000922:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000924:	2300      	movs	r3, #0
 8000926:	607b      	str	r3, [r7, #4]
 8000928:	4b1c      	ldr	r3, [pc, #112]	; (800099c <SystemClock_Config+0xb8>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	4a1b      	ldr	r2, [pc, #108]	; (800099c <SystemClock_Config+0xb8>)
 800092e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000932:	6013      	str	r3, [r2, #0]
 8000934:	4b19      	ldr	r3, [pc, #100]	; (800099c <SystemClock_Config+0xb8>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800093c:	607b      	str	r3, [r7, #4]
 800093e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000940:	2302      	movs	r3, #2
 8000942:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000944:	2301      	movs	r3, #1
 8000946:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000948:	2310      	movs	r3, #16
 800094a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800094c:	2300      	movs	r3, #0
 800094e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000950:	f107 0320 	add.w	r3, r7, #32
 8000954:	4618      	mov	r0, r3
 8000956:	f003 faf9 	bl	8003f4c <HAL_RCC_OscConfig>
 800095a:	4603      	mov	r3, r0
 800095c:	2b00      	cmp	r3, #0
 800095e:	d001      	beq.n	8000964 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000960:	f000 f8b0 	bl	8000ac4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000964:	230f      	movs	r3, #15
 8000966:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000968:	2300      	movs	r3, #0
 800096a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800096c:	2300      	movs	r3, #0
 800096e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000970:	2300      	movs	r3, #0
 8000972:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000974:	2300      	movs	r3, #0
 8000976:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000978:	f107 030c 	add.w	r3, r7, #12
 800097c:	2100      	movs	r1, #0
 800097e:	4618      	mov	r0, r3
 8000980:	f003 fd5c 	bl	800443c <HAL_RCC_ClockConfig>
 8000984:	4603      	mov	r3, r0
 8000986:	2b00      	cmp	r3, #0
 8000988:	d001      	beq.n	800098e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800098a:	f000 f89b 	bl	8000ac4 <Error_Handler>
  }
}
 800098e:	bf00      	nop
 8000990:	3750      	adds	r7, #80	; 0x50
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	40023800 	.word	0x40023800
 800099c:	40007000 	.word	0x40007000

080009a0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80009a4:	4b12      	ldr	r3, [pc, #72]	; (80009f0 <MX_I2C1_Init+0x50>)
 80009a6:	4a13      	ldr	r2, [pc, #76]	; (80009f4 <MX_I2C1_Init+0x54>)
 80009a8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80009aa:	4b11      	ldr	r3, [pc, #68]	; (80009f0 <MX_I2C1_Init+0x50>)
 80009ac:	4a12      	ldr	r2, [pc, #72]	; (80009f8 <MX_I2C1_Init+0x58>)
 80009ae:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80009b0:	4b0f      	ldr	r3, [pc, #60]	; (80009f0 <MX_I2C1_Init+0x50>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80009b6:	4b0e      	ldr	r3, [pc, #56]	; (80009f0 <MX_I2C1_Init+0x50>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009bc:	4b0c      	ldr	r3, [pc, #48]	; (80009f0 <MX_I2C1_Init+0x50>)
 80009be:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80009c2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009c4:	4b0a      	ldr	r3, [pc, #40]	; (80009f0 <MX_I2C1_Init+0x50>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80009ca:	4b09      	ldr	r3, [pc, #36]	; (80009f0 <MX_I2C1_Init+0x50>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009d0:	4b07      	ldr	r3, [pc, #28]	; (80009f0 <MX_I2C1_Init+0x50>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009d6:	4b06      	ldr	r3, [pc, #24]	; (80009f0 <MX_I2C1_Init+0x50>)
 80009d8:	2200      	movs	r2, #0
 80009da:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80009dc:	4804      	ldr	r0, [pc, #16]	; (80009f0 <MX_I2C1_Init+0x50>)
 80009de:	f000 fe53 	bl	8001688 <HAL_I2C_Init>
 80009e2:	4603      	mov	r3, r0
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d001      	beq.n	80009ec <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80009e8:	f000 f86c 	bl	8000ac4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80009ec:	bf00      	nop
 80009ee:	bd80      	pop	{r7, pc}
 80009f0:	20000094 	.word	0x20000094
 80009f4:	40005400 	.word	0x40005400
 80009f8:	000186a0 	.word	0x000186a0

080009fc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a00:	4b11      	ldr	r3, [pc, #68]	; (8000a48 <MX_USART2_UART_Init+0x4c>)
 8000a02:	4a12      	ldr	r2, [pc, #72]	; (8000a4c <MX_USART2_UART_Init+0x50>)
 8000a04:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a06:	4b10      	ldr	r3, [pc, #64]	; (8000a48 <MX_USART2_UART_Init+0x4c>)
 8000a08:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a0c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a0e:	4b0e      	ldr	r3, [pc, #56]	; (8000a48 <MX_USART2_UART_Init+0x4c>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a14:	4b0c      	ldr	r3, [pc, #48]	; (8000a48 <MX_USART2_UART_Init+0x4c>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a1a:	4b0b      	ldr	r3, [pc, #44]	; (8000a48 <MX_USART2_UART_Init+0x4c>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a20:	4b09      	ldr	r3, [pc, #36]	; (8000a48 <MX_USART2_UART_Init+0x4c>)
 8000a22:	220c      	movs	r2, #12
 8000a24:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a26:	4b08      	ldr	r3, [pc, #32]	; (8000a48 <MX_USART2_UART_Init+0x4c>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a2c:	4b06      	ldr	r3, [pc, #24]	; (8000a48 <MX_USART2_UART_Init+0x4c>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a32:	4805      	ldr	r0, [pc, #20]	; (8000a48 <MX_USART2_UART_Init+0x4c>)
 8000a34:	f003 fee2 	bl	80047fc <HAL_UART_Init>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d001      	beq.n	8000a42 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000a3e:	f000 f841 	bl	8000ac4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a42:	bf00      	nop
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	200000e8 	.word	0x200000e8
 8000a4c:	40004400 	.word	0x40004400

08000a50 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	b083      	sub	sp, #12
 8000a54:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a56:	2300      	movs	r3, #0
 8000a58:	607b      	str	r3, [r7, #4]
 8000a5a:	4b10      	ldr	r3, [pc, #64]	; (8000a9c <MX_GPIO_Init+0x4c>)
 8000a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5e:	4a0f      	ldr	r2, [pc, #60]	; (8000a9c <MX_GPIO_Init+0x4c>)
 8000a60:	f043 0301 	orr.w	r3, r3, #1
 8000a64:	6313      	str	r3, [r2, #48]	; 0x30
 8000a66:	4b0d      	ldr	r3, [pc, #52]	; (8000a9c <MX_GPIO_Init+0x4c>)
 8000a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6a:	f003 0301 	and.w	r3, r3, #1
 8000a6e:	607b      	str	r3, [r7, #4]
 8000a70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a72:	2300      	movs	r3, #0
 8000a74:	603b      	str	r3, [r7, #0]
 8000a76:	4b09      	ldr	r3, [pc, #36]	; (8000a9c <MX_GPIO_Init+0x4c>)
 8000a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7a:	4a08      	ldr	r2, [pc, #32]	; (8000a9c <MX_GPIO_Init+0x4c>)
 8000a7c:	f043 0302 	orr.w	r3, r3, #2
 8000a80:	6313      	str	r3, [r2, #48]	; 0x30
 8000a82:	4b06      	ldr	r3, [pc, #24]	; (8000a9c <MX_GPIO_Init+0x4c>)
 8000a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a86:	f003 0302 	and.w	r3, r3, #2
 8000a8a:	603b      	str	r3, [r7, #0]
 8000a8c:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a8e:	bf00      	nop
 8000a90:	370c      	adds	r7, #12
 8000a92:	46bd      	mov	sp, r7
 8000a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop
 8000a9c:	40023800 	.word	0x40023800

08000aa0 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */

PUTCHAR_PROTOTYPE
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b082      	sub	sp, #8
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY); // bạn có thể điều chỉnh Timeout tùy thuộc vào yêu cầu của bạn
 8000aa8:	1d39      	adds	r1, r7, #4
 8000aaa:	f04f 33ff 	mov.w	r3, #4294967295
 8000aae:	2201      	movs	r2, #1
 8000ab0:	4803      	ldr	r0, [pc, #12]	; (8000ac0 <__io_putchar+0x20>)
 8000ab2:	f003 fef0 	bl	8004896 <HAL_UART_Transmit>
  return ch;
 8000ab6:	687b      	ldr	r3, [r7, #4]
}
 8000ab8:	4618      	mov	r0, r3
 8000aba:	3708      	adds	r7, #8
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bd80      	pop	{r7, pc}
 8000ac0:	200000e8 	.word	0x200000e8

08000ac4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ac8:	b672      	cpsid	i
}
 8000aca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000acc:	e7fe      	b.n	8000acc <Error_Handler+0x8>
	...

08000ad0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	b083      	sub	sp, #12
 8000ad4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	607b      	str	r3, [r7, #4]
 8000ada:	4b10      	ldr	r3, [pc, #64]	; (8000b1c <HAL_MspInit+0x4c>)
 8000adc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ade:	4a0f      	ldr	r2, [pc, #60]	; (8000b1c <HAL_MspInit+0x4c>)
 8000ae0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ae4:	6453      	str	r3, [r2, #68]	; 0x44
 8000ae6:	4b0d      	ldr	r3, [pc, #52]	; (8000b1c <HAL_MspInit+0x4c>)
 8000ae8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000aee:	607b      	str	r3, [r7, #4]
 8000af0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000af2:	2300      	movs	r3, #0
 8000af4:	603b      	str	r3, [r7, #0]
 8000af6:	4b09      	ldr	r3, [pc, #36]	; (8000b1c <HAL_MspInit+0x4c>)
 8000af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000afa:	4a08      	ldr	r2, [pc, #32]	; (8000b1c <HAL_MspInit+0x4c>)
 8000afc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b00:	6413      	str	r3, [r2, #64]	; 0x40
 8000b02:	4b06      	ldr	r3, [pc, #24]	; (8000b1c <HAL_MspInit+0x4c>)
 8000b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b0a:	603b      	str	r3, [r7, #0]
 8000b0c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b0e:	bf00      	nop
 8000b10:	370c      	adds	r7, #12
 8000b12:	46bd      	mov	sp, r7
 8000b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b18:	4770      	bx	lr
 8000b1a:	bf00      	nop
 8000b1c:	40023800 	.word	0x40023800

08000b20 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b08a      	sub	sp, #40	; 0x28
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b28:	f107 0314 	add.w	r3, r7, #20
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	601a      	str	r2, [r3, #0]
 8000b30:	605a      	str	r2, [r3, #4]
 8000b32:	609a      	str	r2, [r3, #8]
 8000b34:	60da      	str	r2, [r3, #12]
 8000b36:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	4a21      	ldr	r2, [pc, #132]	; (8000bc4 <HAL_I2C_MspInit+0xa4>)
 8000b3e:	4293      	cmp	r3, r2
 8000b40:	d13b      	bne.n	8000bba <HAL_I2C_MspInit+0x9a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b42:	2300      	movs	r3, #0
 8000b44:	613b      	str	r3, [r7, #16]
 8000b46:	4b20      	ldr	r3, [pc, #128]	; (8000bc8 <HAL_I2C_MspInit+0xa8>)
 8000b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4a:	4a1f      	ldr	r2, [pc, #124]	; (8000bc8 <HAL_I2C_MspInit+0xa8>)
 8000b4c:	f043 0302 	orr.w	r3, r3, #2
 8000b50:	6313      	str	r3, [r2, #48]	; 0x30
 8000b52:	4b1d      	ldr	r3, [pc, #116]	; (8000bc8 <HAL_I2C_MspInit+0xa8>)
 8000b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b56:	f003 0302 	and.w	r3, r3, #2
 8000b5a:	613b      	str	r3, [r7, #16]
 8000b5c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000b5e:	23c0      	movs	r3, #192	; 0xc0
 8000b60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b62:	2312      	movs	r3, #18
 8000b64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b66:	2300      	movs	r3, #0
 8000b68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b6a:	2303      	movs	r3, #3
 8000b6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b6e:	2304      	movs	r3, #4
 8000b70:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b72:	f107 0314 	add.w	r3, r7, #20
 8000b76:	4619      	mov	r1, r3
 8000b78:	4814      	ldr	r0, [pc, #80]	; (8000bcc <HAL_I2C_MspInit+0xac>)
 8000b7a:	f000 fbe9 	bl	8001350 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b7e:	2300      	movs	r3, #0
 8000b80:	60fb      	str	r3, [r7, #12]
 8000b82:	4b11      	ldr	r3, [pc, #68]	; (8000bc8 <HAL_I2C_MspInit+0xa8>)
 8000b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b86:	4a10      	ldr	r2, [pc, #64]	; (8000bc8 <HAL_I2C_MspInit+0xa8>)
 8000b88:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b8c:	6413      	str	r3, [r2, #64]	; 0x40
 8000b8e:	4b0e      	ldr	r3, [pc, #56]	; (8000bc8 <HAL_I2C_MspInit+0xa8>)
 8000b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b92:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b96:	60fb      	str	r3, [r7, #12]
 8000b98:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	2100      	movs	r1, #0
 8000b9e:	201f      	movs	r0, #31
 8000ba0:	f000 faff 	bl	80011a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000ba4:	201f      	movs	r0, #31
 8000ba6:	f000 fb18 	bl	80011da <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8000baa:	2200      	movs	r2, #0
 8000bac:	2100      	movs	r1, #0
 8000bae:	2020      	movs	r0, #32
 8000bb0:	f000 faf7 	bl	80011a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000bb4:	2020      	movs	r0, #32
 8000bb6:	f000 fb10 	bl	80011da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000bba:	bf00      	nop
 8000bbc:	3728      	adds	r7, #40	; 0x28
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	40005400 	.word	0x40005400
 8000bc8:	40023800 	.word	0x40023800
 8000bcc:	40020400 	.word	0x40020400

08000bd0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b08a      	sub	sp, #40	; 0x28
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bd8:	f107 0314 	add.w	r3, r7, #20
 8000bdc:	2200      	movs	r2, #0
 8000bde:	601a      	str	r2, [r3, #0]
 8000be0:	605a      	str	r2, [r3, #4]
 8000be2:	609a      	str	r2, [r3, #8]
 8000be4:	60da      	str	r2, [r3, #12]
 8000be6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	4a1d      	ldr	r2, [pc, #116]	; (8000c64 <HAL_UART_MspInit+0x94>)
 8000bee:	4293      	cmp	r3, r2
 8000bf0:	d133      	bne.n	8000c5a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	613b      	str	r3, [r7, #16]
 8000bf6:	4b1c      	ldr	r3, [pc, #112]	; (8000c68 <HAL_UART_MspInit+0x98>)
 8000bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bfa:	4a1b      	ldr	r2, [pc, #108]	; (8000c68 <HAL_UART_MspInit+0x98>)
 8000bfc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c00:	6413      	str	r3, [r2, #64]	; 0x40
 8000c02:	4b19      	ldr	r3, [pc, #100]	; (8000c68 <HAL_UART_MspInit+0x98>)
 8000c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c0a:	613b      	str	r3, [r7, #16]
 8000c0c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c0e:	2300      	movs	r3, #0
 8000c10:	60fb      	str	r3, [r7, #12]
 8000c12:	4b15      	ldr	r3, [pc, #84]	; (8000c68 <HAL_UART_MspInit+0x98>)
 8000c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c16:	4a14      	ldr	r2, [pc, #80]	; (8000c68 <HAL_UART_MspInit+0x98>)
 8000c18:	f043 0301 	orr.w	r3, r3, #1
 8000c1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c1e:	4b12      	ldr	r3, [pc, #72]	; (8000c68 <HAL_UART_MspInit+0x98>)
 8000c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c22:	f003 0301 	and.w	r3, r3, #1
 8000c26:	60fb      	str	r3, [r7, #12]
 8000c28:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000c2a:	230c      	movs	r3, #12
 8000c2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c2e:	2302      	movs	r3, #2
 8000c30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c32:	2300      	movs	r3, #0
 8000c34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c36:	2303      	movs	r3, #3
 8000c38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c3a:	2307      	movs	r3, #7
 8000c3c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c3e:	f107 0314 	add.w	r3, r7, #20
 8000c42:	4619      	mov	r1, r3
 8000c44:	4809      	ldr	r0, [pc, #36]	; (8000c6c <HAL_UART_MspInit+0x9c>)
 8000c46:	f000 fb83 	bl	8001350 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	2100      	movs	r1, #0
 8000c4e:	2026      	movs	r0, #38	; 0x26
 8000c50:	f000 faa7 	bl	80011a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000c54:	2026      	movs	r0, #38	; 0x26
 8000c56:	f000 fac0 	bl	80011da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c5a:	bf00      	nop
 8000c5c:	3728      	adds	r7, #40	; 0x28
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	40004400 	.word	0x40004400
 8000c68:	40023800 	.word	0x40023800
 8000c6c:	40020000 	.word	0x40020000

08000c70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c74:	e7fe      	b.n	8000c74 <NMI_Handler+0x4>

08000c76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c76:	b480      	push	{r7}
 8000c78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c7a:	e7fe      	b.n	8000c7a <HardFault_Handler+0x4>

08000c7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c80:	e7fe      	b.n	8000c80 <MemManage_Handler+0x4>

08000c82 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c82:	b480      	push	{r7}
 8000c84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c86:	e7fe      	b.n	8000c86 <BusFault_Handler+0x4>

08000c88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c8c:	e7fe      	b.n	8000c8c <UsageFault_Handler+0x4>

08000c8e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c8e:	b480      	push	{r7}
 8000c90:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c92:	bf00      	nop
 8000c94:	46bd      	mov	sp, r7
 8000c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9a:	4770      	bx	lr

08000c9c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ca0:	bf00      	nop
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca8:	4770      	bx	lr

08000caa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000caa:	b480      	push	{r7}
 8000cac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cae:	bf00      	nop
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb6:	4770      	bx	lr

08000cb8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cbc:	f000 f952 	bl	8000f64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cc0:	bf00      	nop
 8000cc2:	bd80      	pop	{r7, pc}

08000cc4 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000cc8:	4802      	ldr	r0, [pc, #8]	; (8000cd4 <I2C1_EV_IRQHandler+0x10>)
 8000cca:	f001 f945 	bl	8001f58 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000cce:	bf00      	nop
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	20000094 	.word	0x20000094

08000cd8 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8000cdc:	4802      	ldr	r0, [pc, #8]	; (8000ce8 <I2C1_ER_IRQHandler+0x10>)
 8000cde:	f001 fa8e 	bl	80021fe <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8000ce2:	bf00      	nop
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	20000094 	.word	0x20000094

08000cec <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000cf0:	4802      	ldr	r0, [pc, #8]	; (8000cfc <USART2_IRQHandler+0x10>)
 8000cf2:	f003 fe63 	bl	80049bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000cf6:	bf00      	nop
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	200000e8 	.word	0x200000e8

08000d00 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b086      	sub	sp, #24
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	60f8      	str	r0, [r7, #12]
 8000d08:	60b9      	str	r1, [r7, #8]
 8000d0a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	617b      	str	r3, [r7, #20]
 8000d10:	e00a      	b.n	8000d28 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000d12:	f3af 8000 	nop.w
 8000d16:	4601      	mov	r1, r0
 8000d18:	68bb      	ldr	r3, [r7, #8]
 8000d1a:	1c5a      	adds	r2, r3, #1
 8000d1c:	60ba      	str	r2, [r7, #8]
 8000d1e:	b2ca      	uxtb	r2, r1
 8000d20:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d22:	697b      	ldr	r3, [r7, #20]
 8000d24:	3301      	adds	r3, #1
 8000d26:	617b      	str	r3, [r7, #20]
 8000d28:	697a      	ldr	r2, [r7, #20]
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	429a      	cmp	r2, r3
 8000d2e:	dbf0      	blt.n	8000d12 <_read+0x12>
  }

  return len;
 8000d30:	687b      	ldr	r3, [r7, #4]
}
 8000d32:	4618      	mov	r0, r3
 8000d34:	3718      	adds	r7, #24
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}

08000d3a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000d3a:	b580      	push	{r7, lr}
 8000d3c:	b086      	sub	sp, #24
 8000d3e:	af00      	add	r7, sp, #0
 8000d40:	60f8      	str	r0, [r7, #12]
 8000d42:	60b9      	str	r1, [r7, #8]
 8000d44:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d46:	2300      	movs	r3, #0
 8000d48:	617b      	str	r3, [r7, #20]
 8000d4a:	e009      	b.n	8000d60 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000d4c:	68bb      	ldr	r3, [r7, #8]
 8000d4e:	1c5a      	adds	r2, r3, #1
 8000d50:	60ba      	str	r2, [r7, #8]
 8000d52:	781b      	ldrb	r3, [r3, #0]
 8000d54:	4618      	mov	r0, r3
 8000d56:	f7ff fea3 	bl	8000aa0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d5a:	697b      	ldr	r3, [r7, #20]
 8000d5c:	3301      	adds	r3, #1
 8000d5e:	617b      	str	r3, [r7, #20]
 8000d60:	697a      	ldr	r2, [r7, #20]
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	429a      	cmp	r2, r3
 8000d66:	dbf1      	blt.n	8000d4c <_write+0x12>
  }
  return len;
 8000d68:	687b      	ldr	r3, [r7, #4]
}
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	3718      	adds	r7, #24
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}

08000d72 <_close>:

int _close(int file)
{
 8000d72:	b480      	push	{r7}
 8000d74:	b083      	sub	sp, #12
 8000d76:	af00      	add	r7, sp, #0
 8000d78:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000d7a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d7e:	4618      	mov	r0, r3
 8000d80:	370c      	adds	r7, #12
 8000d82:	46bd      	mov	sp, r7
 8000d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d88:	4770      	bx	lr

08000d8a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d8a:	b480      	push	{r7}
 8000d8c:	b083      	sub	sp, #12
 8000d8e:	af00      	add	r7, sp, #0
 8000d90:	6078      	str	r0, [r7, #4]
 8000d92:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000d94:	683b      	ldr	r3, [r7, #0]
 8000d96:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d9a:	605a      	str	r2, [r3, #4]
  return 0;
 8000d9c:	2300      	movs	r3, #0
}
 8000d9e:	4618      	mov	r0, r3
 8000da0:	370c      	adds	r7, #12
 8000da2:	46bd      	mov	sp, r7
 8000da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da8:	4770      	bx	lr

08000daa <_isatty>:

int _isatty(int file)
{
 8000daa:	b480      	push	{r7}
 8000dac:	b083      	sub	sp, #12
 8000dae:	af00      	add	r7, sp, #0
 8000db0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000db2:	2301      	movs	r3, #1
}
 8000db4:	4618      	mov	r0, r3
 8000db6:	370c      	adds	r7, #12
 8000db8:	46bd      	mov	sp, r7
 8000dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbe:	4770      	bx	lr

08000dc0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	b085      	sub	sp, #20
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	60f8      	str	r0, [r7, #12]
 8000dc8:	60b9      	str	r1, [r7, #8]
 8000dca:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000dcc:	2300      	movs	r3, #0
}
 8000dce:	4618      	mov	r0, r3
 8000dd0:	3714      	adds	r7, #20
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd8:	4770      	bx	lr
	...

08000ddc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b086      	sub	sp, #24
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000de4:	4a14      	ldr	r2, [pc, #80]	; (8000e38 <_sbrk+0x5c>)
 8000de6:	4b15      	ldr	r3, [pc, #84]	; (8000e3c <_sbrk+0x60>)
 8000de8:	1ad3      	subs	r3, r2, r3
 8000dea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000dec:	697b      	ldr	r3, [r7, #20]
 8000dee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000df0:	4b13      	ldr	r3, [pc, #76]	; (8000e40 <_sbrk+0x64>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d102      	bne.n	8000dfe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000df8:	4b11      	ldr	r3, [pc, #68]	; (8000e40 <_sbrk+0x64>)
 8000dfa:	4a12      	ldr	r2, [pc, #72]	; (8000e44 <_sbrk+0x68>)
 8000dfc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dfe:	4b10      	ldr	r3, [pc, #64]	; (8000e40 <_sbrk+0x64>)
 8000e00:	681a      	ldr	r2, [r3, #0]
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	4413      	add	r3, r2
 8000e06:	693a      	ldr	r2, [r7, #16]
 8000e08:	429a      	cmp	r2, r3
 8000e0a:	d207      	bcs.n	8000e1c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e0c:	f004 ff60 	bl	8005cd0 <__errno>
 8000e10:	4603      	mov	r3, r0
 8000e12:	220c      	movs	r2, #12
 8000e14:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e16:	f04f 33ff 	mov.w	r3, #4294967295
 8000e1a:	e009      	b.n	8000e30 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e1c:	4b08      	ldr	r3, [pc, #32]	; (8000e40 <_sbrk+0x64>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e22:	4b07      	ldr	r3, [pc, #28]	; (8000e40 <_sbrk+0x64>)
 8000e24:	681a      	ldr	r2, [r3, #0]
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	4413      	add	r3, r2
 8000e2a:	4a05      	ldr	r2, [pc, #20]	; (8000e40 <_sbrk+0x64>)
 8000e2c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e2e:	68fb      	ldr	r3, [r7, #12]
}
 8000e30:	4618      	mov	r0, r3
 8000e32:	3718      	adds	r7, #24
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bd80      	pop	{r7, pc}
 8000e38:	20020000 	.word	0x20020000
 8000e3c:	00000400 	.word	0x00000400
 8000e40:	2000012c 	.word	0x2000012c
 8000e44:	20000280 	.word	0x20000280

08000e48 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e4c:	4b06      	ldr	r3, [pc, #24]	; (8000e68 <SystemInit+0x20>)
 8000e4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e52:	4a05      	ldr	r2, [pc, #20]	; (8000e68 <SystemInit+0x20>)
 8000e54:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e58:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e5c:	bf00      	nop
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e64:	4770      	bx	lr
 8000e66:	bf00      	nop
 8000e68:	e000ed00 	.word	0xe000ed00

08000e6c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000e6c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ea4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e70:	480d      	ldr	r0, [pc, #52]	; (8000ea8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e72:	490e      	ldr	r1, [pc, #56]	; (8000eac <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e74:	4a0e      	ldr	r2, [pc, #56]	; (8000eb0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e78:	e002      	b.n	8000e80 <LoopCopyDataInit>

08000e7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e7e:	3304      	adds	r3, #4

08000e80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e84:	d3f9      	bcc.n	8000e7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e86:	4a0b      	ldr	r2, [pc, #44]	; (8000eb4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e88:	4c0b      	ldr	r4, [pc, #44]	; (8000eb8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e8c:	e001      	b.n	8000e92 <LoopFillZerobss>

08000e8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e90:	3204      	adds	r2, #4

08000e92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e94:	d3fb      	bcc.n	8000e8e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e96:	f7ff ffd7 	bl	8000e48 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e9a:	f004 ff1f 	bl	8005cdc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e9e:	f7ff fcdf 	bl	8000860 <main>
  bx  lr    
 8000ea2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000ea4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ea8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000eac:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000eb0:	08006830 	.word	0x08006830
  ldr r2, =_sbss
 8000eb4:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000eb8:	20000280 	.word	0x20000280

08000ebc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ebc:	e7fe      	b.n	8000ebc <ADC_IRQHandler>
	...

08000ec0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ec4:	4b0e      	ldr	r3, [pc, #56]	; (8000f00 <HAL_Init+0x40>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	4a0d      	ldr	r2, [pc, #52]	; (8000f00 <HAL_Init+0x40>)
 8000eca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ece:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ed0:	4b0b      	ldr	r3, [pc, #44]	; (8000f00 <HAL_Init+0x40>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	4a0a      	ldr	r2, [pc, #40]	; (8000f00 <HAL_Init+0x40>)
 8000ed6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000eda:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000edc:	4b08      	ldr	r3, [pc, #32]	; (8000f00 <HAL_Init+0x40>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	4a07      	ldr	r2, [pc, #28]	; (8000f00 <HAL_Init+0x40>)
 8000ee2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ee6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ee8:	2003      	movs	r0, #3
 8000eea:	f000 f94f 	bl	800118c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000eee:	200f      	movs	r0, #15
 8000ef0:	f000 f808 	bl	8000f04 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ef4:	f7ff fdec 	bl	8000ad0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ef8:	2300      	movs	r3, #0
}
 8000efa:	4618      	mov	r0, r3
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	40023c00 	.word	0x40023c00

08000f04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b082      	sub	sp, #8
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f0c:	4b12      	ldr	r3, [pc, #72]	; (8000f58 <HAL_InitTick+0x54>)
 8000f0e:	681a      	ldr	r2, [r3, #0]
 8000f10:	4b12      	ldr	r3, [pc, #72]	; (8000f5c <HAL_InitTick+0x58>)
 8000f12:	781b      	ldrb	r3, [r3, #0]
 8000f14:	4619      	mov	r1, r3
 8000f16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f22:	4618      	mov	r0, r3
 8000f24:	f000 f967 	bl	80011f6 <HAL_SYSTICK_Config>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d001      	beq.n	8000f32 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f2e:	2301      	movs	r3, #1
 8000f30:	e00e      	b.n	8000f50 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	2b0f      	cmp	r3, #15
 8000f36:	d80a      	bhi.n	8000f4e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f38:	2200      	movs	r2, #0
 8000f3a:	6879      	ldr	r1, [r7, #4]
 8000f3c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f40:	f000 f92f 	bl	80011a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f44:	4a06      	ldr	r2, [pc, #24]	; (8000f60 <HAL_InitTick+0x5c>)
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	e000      	b.n	8000f50 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f4e:	2301      	movs	r3, #1
}
 8000f50:	4618      	mov	r0, r3
 8000f52:	3708      	adds	r7, #8
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	20000000 	.word	0x20000000
 8000f5c:	20000008 	.word	0x20000008
 8000f60:	20000004 	.word	0x20000004

08000f64 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f68:	4b06      	ldr	r3, [pc, #24]	; (8000f84 <HAL_IncTick+0x20>)
 8000f6a:	781b      	ldrb	r3, [r3, #0]
 8000f6c:	461a      	mov	r2, r3
 8000f6e:	4b06      	ldr	r3, [pc, #24]	; (8000f88 <HAL_IncTick+0x24>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	4413      	add	r3, r2
 8000f74:	4a04      	ldr	r2, [pc, #16]	; (8000f88 <HAL_IncTick+0x24>)
 8000f76:	6013      	str	r3, [r2, #0]
}
 8000f78:	bf00      	nop
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop
 8000f84:	20000008 	.word	0x20000008
 8000f88:	20000130 	.word	0x20000130

08000f8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0
  return uwTick;
 8000f90:	4b03      	ldr	r3, [pc, #12]	; (8000fa0 <HAL_GetTick+0x14>)
 8000f92:	681b      	ldr	r3, [r3, #0]
}
 8000f94:	4618      	mov	r0, r3
 8000f96:	46bd      	mov	sp, r7
 8000f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9c:	4770      	bx	lr
 8000f9e:	bf00      	nop
 8000fa0:	20000130 	.word	0x20000130

08000fa4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b084      	sub	sp, #16
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fac:	f7ff ffee 	bl	8000f8c <HAL_GetTick>
 8000fb0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fbc:	d005      	beq.n	8000fca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fbe:	4b0a      	ldr	r3, [pc, #40]	; (8000fe8 <HAL_Delay+0x44>)
 8000fc0:	781b      	ldrb	r3, [r3, #0]
 8000fc2:	461a      	mov	r2, r3
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	4413      	add	r3, r2
 8000fc8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000fca:	bf00      	nop
 8000fcc:	f7ff ffde 	bl	8000f8c <HAL_GetTick>
 8000fd0:	4602      	mov	r2, r0
 8000fd2:	68bb      	ldr	r3, [r7, #8]
 8000fd4:	1ad3      	subs	r3, r2, r3
 8000fd6:	68fa      	ldr	r2, [r7, #12]
 8000fd8:	429a      	cmp	r2, r3
 8000fda:	d8f7      	bhi.n	8000fcc <HAL_Delay+0x28>
  {
  }
}
 8000fdc:	bf00      	nop
 8000fde:	bf00      	nop
 8000fe0:	3710      	adds	r7, #16
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	20000008 	.word	0x20000008

08000fec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fec:	b480      	push	{r7}
 8000fee:	b085      	sub	sp, #20
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	f003 0307 	and.w	r3, r3, #7
 8000ffa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ffc:	4b0c      	ldr	r3, [pc, #48]	; (8001030 <__NVIC_SetPriorityGrouping+0x44>)
 8000ffe:	68db      	ldr	r3, [r3, #12]
 8001000:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001002:	68ba      	ldr	r2, [r7, #8]
 8001004:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001008:	4013      	ands	r3, r2
 800100a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001010:	68bb      	ldr	r3, [r7, #8]
 8001012:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001014:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001018:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800101c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800101e:	4a04      	ldr	r2, [pc, #16]	; (8001030 <__NVIC_SetPriorityGrouping+0x44>)
 8001020:	68bb      	ldr	r3, [r7, #8]
 8001022:	60d3      	str	r3, [r2, #12]
}
 8001024:	bf00      	nop
 8001026:	3714      	adds	r7, #20
 8001028:	46bd      	mov	sp, r7
 800102a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102e:	4770      	bx	lr
 8001030:	e000ed00 	.word	0xe000ed00

08001034 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001034:	b480      	push	{r7}
 8001036:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001038:	4b04      	ldr	r3, [pc, #16]	; (800104c <__NVIC_GetPriorityGrouping+0x18>)
 800103a:	68db      	ldr	r3, [r3, #12]
 800103c:	0a1b      	lsrs	r3, r3, #8
 800103e:	f003 0307 	and.w	r3, r3, #7
}
 8001042:	4618      	mov	r0, r3
 8001044:	46bd      	mov	sp, r7
 8001046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104a:	4770      	bx	lr
 800104c:	e000ed00 	.word	0xe000ed00

08001050 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001050:	b480      	push	{r7}
 8001052:	b083      	sub	sp, #12
 8001054:	af00      	add	r7, sp, #0
 8001056:	4603      	mov	r3, r0
 8001058:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800105a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800105e:	2b00      	cmp	r3, #0
 8001060:	db0b      	blt.n	800107a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001062:	79fb      	ldrb	r3, [r7, #7]
 8001064:	f003 021f 	and.w	r2, r3, #31
 8001068:	4907      	ldr	r1, [pc, #28]	; (8001088 <__NVIC_EnableIRQ+0x38>)
 800106a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800106e:	095b      	lsrs	r3, r3, #5
 8001070:	2001      	movs	r0, #1
 8001072:	fa00 f202 	lsl.w	r2, r0, r2
 8001076:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800107a:	bf00      	nop
 800107c:	370c      	adds	r7, #12
 800107e:	46bd      	mov	sp, r7
 8001080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001084:	4770      	bx	lr
 8001086:	bf00      	nop
 8001088:	e000e100 	.word	0xe000e100

0800108c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800108c:	b480      	push	{r7}
 800108e:	b083      	sub	sp, #12
 8001090:	af00      	add	r7, sp, #0
 8001092:	4603      	mov	r3, r0
 8001094:	6039      	str	r1, [r7, #0]
 8001096:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001098:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800109c:	2b00      	cmp	r3, #0
 800109e:	db0a      	blt.n	80010b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	b2da      	uxtb	r2, r3
 80010a4:	490c      	ldr	r1, [pc, #48]	; (80010d8 <__NVIC_SetPriority+0x4c>)
 80010a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010aa:	0112      	lsls	r2, r2, #4
 80010ac:	b2d2      	uxtb	r2, r2
 80010ae:	440b      	add	r3, r1
 80010b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010b4:	e00a      	b.n	80010cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	b2da      	uxtb	r2, r3
 80010ba:	4908      	ldr	r1, [pc, #32]	; (80010dc <__NVIC_SetPriority+0x50>)
 80010bc:	79fb      	ldrb	r3, [r7, #7]
 80010be:	f003 030f 	and.w	r3, r3, #15
 80010c2:	3b04      	subs	r3, #4
 80010c4:	0112      	lsls	r2, r2, #4
 80010c6:	b2d2      	uxtb	r2, r2
 80010c8:	440b      	add	r3, r1
 80010ca:	761a      	strb	r2, [r3, #24]
}
 80010cc:	bf00      	nop
 80010ce:	370c      	adds	r7, #12
 80010d0:	46bd      	mov	sp, r7
 80010d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d6:	4770      	bx	lr
 80010d8:	e000e100 	.word	0xe000e100
 80010dc:	e000ed00 	.word	0xe000ed00

080010e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010e0:	b480      	push	{r7}
 80010e2:	b089      	sub	sp, #36	; 0x24
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	60f8      	str	r0, [r7, #12]
 80010e8:	60b9      	str	r1, [r7, #8]
 80010ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	f003 0307 	and.w	r3, r3, #7
 80010f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010f4:	69fb      	ldr	r3, [r7, #28]
 80010f6:	f1c3 0307 	rsb	r3, r3, #7
 80010fa:	2b04      	cmp	r3, #4
 80010fc:	bf28      	it	cs
 80010fe:	2304      	movcs	r3, #4
 8001100:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001102:	69fb      	ldr	r3, [r7, #28]
 8001104:	3304      	adds	r3, #4
 8001106:	2b06      	cmp	r3, #6
 8001108:	d902      	bls.n	8001110 <NVIC_EncodePriority+0x30>
 800110a:	69fb      	ldr	r3, [r7, #28]
 800110c:	3b03      	subs	r3, #3
 800110e:	e000      	b.n	8001112 <NVIC_EncodePriority+0x32>
 8001110:	2300      	movs	r3, #0
 8001112:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001114:	f04f 32ff 	mov.w	r2, #4294967295
 8001118:	69bb      	ldr	r3, [r7, #24]
 800111a:	fa02 f303 	lsl.w	r3, r2, r3
 800111e:	43da      	mvns	r2, r3
 8001120:	68bb      	ldr	r3, [r7, #8]
 8001122:	401a      	ands	r2, r3
 8001124:	697b      	ldr	r3, [r7, #20]
 8001126:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001128:	f04f 31ff 	mov.w	r1, #4294967295
 800112c:	697b      	ldr	r3, [r7, #20]
 800112e:	fa01 f303 	lsl.w	r3, r1, r3
 8001132:	43d9      	mvns	r1, r3
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001138:	4313      	orrs	r3, r2
         );
}
 800113a:	4618      	mov	r0, r3
 800113c:	3724      	adds	r7, #36	; 0x24
 800113e:	46bd      	mov	sp, r7
 8001140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001144:	4770      	bx	lr
	...

08001148 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b082      	sub	sp, #8
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	3b01      	subs	r3, #1
 8001154:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001158:	d301      	bcc.n	800115e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800115a:	2301      	movs	r3, #1
 800115c:	e00f      	b.n	800117e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800115e:	4a0a      	ldr	r2, [pc, #40]	; (8001188 <SysTick_Config+0x40>)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	3b01      	subs	r3, #1
 8001164:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001166:	210f      	movs	r1, #15
 8001168:	f04f 30ff 	mov.w	r0, #4294967295
 800116c:	f7ff ff8e 	bl	800108c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001170:	4b05      	ldr	r3, [pc, #20]	; (8001188 <SysTick_Config+0x40>)
 8001172:	2200      	movs	r2, #0
 8001174:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001176:	4b04      	ldr	r3, [pc, #16]	; (8001188 <SysTick_Config+0x40>)
 8001178:	2207      	movs	r2, #7
 800117a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800117c:	2300      	movs	r3, #0
}
 800117e:	4618      	mov	r0, r3
 8001180:	3708      	adds	r7, #8
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	e000e010 	.word	0xe000e010

0800118c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b082      	sub	sp, #8
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001194:	6878      	ldr	r0, [r7, #4]
 8001196:	f7ff ff29 	bl	8000fec <__NVIC_SetPriorityGrouping>
}
 800119a:	bf00      	nop
 800119c:	3708      	adds	r7, #8
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}

080011a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011a2:	b580      	push	{r7, lr}
 80011a4:	b086      	sub	sp, #24
 80011a6:	af00      	add	r7, sp, #0
 80011a8:	4603      	mov	r3, r0
 80011aa:	60b9      	str	r1, [r7, #8]
 80011ac:	607a      	str	r2, [r7, #4]
 80011ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011b0:	2300      	movs	r3, #0
 80011b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011b4:	f7ff ff3e 	bl	8001034 <__NVIC_GetPriorityGrouping>
 80011b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011ba:	687a      	ldr	r2, [r7, #4]
 80011bc:	68b9      	ldr	r1, [r7, #8]
 80011be:	6978      	ldr	r0, [r7, #20]
 80011c0:	f7ff ff8e 	bl	80010e0 <NVIC_EncodePriority>
 80011c4:	4602      	mov	r2, r0
 80011c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011ca:	4611      	mov	r1, r2
 80011cc:	4618      	mov	r0, r3
 80011ce:	f7ff ff5d 	bl	800108c <__NVIC_SetPriority>
}
 80011d2:	bf00      	nop
 80011d4:	3718      	adds	r7, #24
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}

080011da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011da:	b580      	push	{r7, lr}
 80011dc:	b082      	sub	sp, #8
 80011de:	af00      	add	r7, sp, #0
 80011e0:	4603      	mov	r3, r0
 80011e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011e8:	4618      	mov	r0, r3
 80011ea:	f7ff ff31 	bl	8001050 <__NVIC_EnableIRQ>
}
 80011ee:	bf00      	nop
 80011f0:	3708      	adds	r7, #8
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}

080011f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011f6:	b580      	push	{r7, lr}
 80011f8:	b082      	sub	sp, #8
 80011fa:	af00      	add	r7, sp, #0
 80011fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011fe:	6878      	ldr	r0, [r7, #4]
 8001200:	f7ff ffa2 	bl	8001148 <SysTick_Config>
 8001204:	4603      	mov	r3, r0
}
 8001206:	4618      	mov	r0, r3
 8001208:	3708      	adds	r7, #8
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}

0800120e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800120e:	b580      	push	{r7, lr}
 8001210:	b084      	sub	sp, #16
 8001212:	af00      	add	r7, sp, #0
 8001214:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800121a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800121c:	f7ff feb6 	bl	8000f8c <HAL_GetTick>
 8001220:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001228:	b2db      	uxtb	r3, r3
 800122a:	2b02      	cmp	r3, #2
 800122c:	d008      	beq.n	8001240 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	2280      	movs	r2, #128	; 0x80
 8001232:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	2200      	movs	r2, #0
 8001238:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800123c:	2301      	movs	r3, #1
 800123e:	e052      	b.n	80012e6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	681a      	ldr	r2, [r3, #0]
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f022 0216 	bic.w	r2, r2, #22
 800124e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	695a      	ldr	r2, [r3, #20]
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800125e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001264:	2b00      	cmp	r3, #0
 8001266:	d103      	bne.n	8001270 <HAL_DMA_Abort+0x62>
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800126c:	2b00      	cmp	r3, #0
 800126e:	d007      	beq.n	8001280 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	681a      	ldr	r2, [r3, #0]
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f022 0208 	bic.w	r2, r2, #8
 800127e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	681a      	ldr	r2, [r3, #0]
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f022 0201 	bic.w	r2, r2, #1
 800128e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001290:	e013      	b.n	80012ba <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001292:	f7ff fe7b 	bl	8000f8c <HAL_GetTick>
 8001296:	4602      	mov	r2, r0
 8001298:	68bb      	ldr	r3, [r7, #8]
 800129a:	1ad3      	subs	r3, r2, r3
 800129c:	2b05      	cmp	r3, #5
 800129e:	d90c      	bls.n	80012ba <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	2220      	movs	r2, #32
 80012a4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	2203      	movs	r2, #3
 80012aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	2200      	movs	r2, #0
 80012b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80012b6:	2303      	movs	r3, #3
 80012b8:	e015      	b.n	80012e6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f003 0301 	and.w	r3, r3, #1
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d1e4      	bne.n	8001292 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012cc:	223f      	movs	r2, #63	; 0x3f
 80012ce:	409a      	lsls	r2, r3
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	2201      	movs	r2, #1
 80012d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	2200      	movs	r2, #0
 80012e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80012e4:	2300      	movs	r3, #0
}
 80012e6:	4618      	mov	r0, r3
 80012e8:	3710      	adds	r7, #16
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}

080012ee <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80012ee:	b480      	push	{r7}
 80012f0:	b083      	sub	sp, #12
 80012f2:	af00      	add	r7, sp, #0
 80012f4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80012fc:	b2db      	uxtb	r3, r3
 80012fe:	2b02      	cmp	r3, #2
 8001300:	d004      	beq.n	800130c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	2280      	movs	r2, #128	; 0x80
 8001306:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001308:	2301      	movs	r3, #1
 800130a:	e00c      	b.n	8001326 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	2205      	movs	r2, #5
 8001310:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	681a      	ldr	r2, [r3, #0]
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f022 0201 	bic.w	r2, r2, #1
 8001322:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001324:	2300      	movs	r3, #0
}
 8001326:	4618      	mov	r0, r3
 8001328:	370c      	adds	r7, #12
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr

08001332 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001332:	b480      	push	{r7}
 8001334:	b083      	sub	sp, #12
 8001336:	af00      	add	r7, sp, #0
 8001338:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001340:	b2db      	uxtb	r3, r3
}
 8001342:	4618      	mov	r0, r3
 8001344:	370c      	adds	r7, #12
 8001346:	46bd      	mov	sp, r7
 8001348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134c:	4770      	bx	lr
	...

08001350 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001350:	b480      	push	{r7}
 8001352:	b089      	sub	sp, #36	; 0x24
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
 8001358:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800135a:	2300      	movs	r3, #0
 800135c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800135e:	2300      	movs	r3, #0
 8001360:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001362:	2300      	movs	r3, #0
 8001364:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001366:	2300      	movs	r3, #0
 8001368:	61fb      	str	r3, [r7, #28]
 800136a:	e16b      	b.n	8001644 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800136c:	2201      	movs	r2, #1
 800136e:	69fb      	ldr	r3, [r7, #28]
 8001370:	fa02 f303 	lsl.w	r3, r2, r3
 8001374:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	697a      	ldr	r2, [r7, #20]
 800137c:	4013      	ands	r3, r2
 800137e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001380:	693a      	ldr	r2, [r7, #16]
 8001382:	697b      	ldr	r3, [r7, #20]
 8001384:	429a      	cmp	r2, r3
 8001386:	f040 815a 	bne.w	800163e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	f003 0303 	and.w	r3, r3, #3
 8001392:	2b01      	cmp	r3, #1
 8001394:	d005      	beq.n	80013a2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	685b      	ldr	r3, [r3, #4]
 800139a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800139e:	2b02      	cmp	r3, #2
 80013a0:	d130      	bne.n	8001404 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	689b      	ldr	r3, [r3, #8]
 80013a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80013a8:	69fb      	ldr	r3, [r7, #28]
 80013aa:	005b      	lsls	r3, r3, #1
 80013ac:	2203      	movs	r2, #3
 80013ae:	fa02 f303 	lsl.w	r3, r2, r3
 80013b2:	43db      	mvns	r3, r3
 80013b4:	69ba      	ldr	r2, [r7, #24]
 80013b6:	4013      	ands	r3, r2
 80013b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	68da      	ldr	r2, [r3, #12]
 80013be:	69fb      	ldr	r3, [r7, #28]
 80013c0:	005b      	lsls	r3, r3, #1
 80013c2:	fa02 f303 	lsl.w	r3, r2, r3
 80013c6:	69ba      	ldr	r2, [r7, #24]
 80013c8:	4313      	orrs	r3, r2
 80013ca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	69ba      	ldr	r2, [r7, #24]
 80013d0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80013d8:	2201      	movs	r2, #1
 80013da:	69fb      	ldr	r3, [r7, #28]
 80013dc:	fa02 f303 	lsl.w	r3, r2, r3
 80013e0:	43db      	mvns	r3, r3
 80013e2:	69ba      	ldr	r2, [r7, #24]
 80013e4:	4013      	ands	r3, r2
 80013e6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	091b      	lsrs	r3, r3, #4
 80013ee:	f003 0201 	and.w	r2, r3, #1
 80013f2:	69fb      	ldr	r3, [r7, #28]
 80013f4:	fa02 f303 	lsl.w	r3, r2, r3
 80013f8:	69ba      	ldr	r2, [r7, #24]
 80013fa:	4313      	orrs	r3, r2
 80013fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	69ba      	ldr	r2, [r7, #24]
 8001402:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	f003 0303 	and.w	r3, r3, #3
 800140c:	2b03      	cmp	r3, #3
 800140e:	d017      	beq.n	8001440 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	68db      	ldr	r3, [r3, #12]
 8001414:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001416:	69fb      	ldr	r3, [r7, #28]
 8001418:	005b      	lsls	r3, r3, #1
 800141a:	2203      	movs	r2, #3
 800141c:	fa02 f303 	lsl.w	r3, r2, r3
 8001420:	43db      	mvns	r3, r3
 8001422:	69ba      	ldr	r2, [r7, #24]
 8001424:	4013      	ands	r3, r2
 8001426:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	689a      	ldr	r2, [r3, #8]
 800142c:	69fb      	ldr	r3, [r7, #28]
 800142e:	005b      	lsls	r3, r3, #1
 8001430:	fa02 f303 	lsl.w	r3, r2, r3
 8001434:	69ba      	ldr	r2, [r7, #24]
 8001436:	4313      	orrs	r3, r2
 8001438:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	69ba      	ldr	r2, [r7, #24]
 800143e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	f003 0303 	and.w	r3, r3, #3
 8001448:	2b02      	cmp	r3, #2
 800144a:	d123      	bne.n	8001494 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800144c:	69fb      	ldr	r3, [r7, #28]
 800144e:	08da      	lsrs	r2, r3, #3
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	3208      	adds	r2, #8
 8001454:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001458:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800145a:	69fb      	ldr	r3, [r7, #28]
 800145c:	f003 0307 	and.w	r3, r3, #7
 8001460:	009b      	lsls	r3, r3, #2
 8001462:	220f      	movs	r2, #15
 8001464:	fa02 f303 	lsl.w	r3, r2, r3
 8001468:	43db      	mvns	r3, r3
 800146a:	69ba      	ldr	r2, [r7, #24]
 800146c:	4013      	ands	r3, r2
 800146e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	691a      	ldr	r2, [r3, #16]
 8001474:	69fb      	ldr	r3, [r7, #28]
 8001476:	f003 0307 	and.w	r3, r3, #7
 800147a:	009b      	lsls	r3, r3, #2
 800147c:	fa02 f303 	lsl.w	r3, r2, r3
 8001480:	69ba      	ldr	r2, [r7, #24]
 8001482:	4313      	orrs	r3, r2
 8001484:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001486:	69fb      	ldr	r3, [r7, #28]
 8001488:	08da      	lsrs	r2, r3, #3
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	3208      	adds	r2, #8
 800148e:	69b9      	ldr	r1, [r7, #24]
 8001490:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800149a:	69fb      	ldr	r3, [r7, #28]
 800149c:	005b      	lsls	r3, r3, #1
 800149e:	2203      	movs	r2, #3
 80014a0:	fa02 f303 	lsl.w	r3, r2, r3
 80014a4:	43db      	mvns	r3, r3
 80014a6:	69ba      	ldr	r2, [r7, #24]
 80014a8:	4013      	ands	r3, r2
 80014aa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	f003 0203 	and.w	r2, r3, #3
 80014b4:	69fb      	ldr	r3, [r7, #28]
 80014b6:	005b      	lsls	r3, r3, #1
 80014b8:	fa02 f303 	lsl.w	r3, r2, r3
 80014bc:	69ba      	ldr	r2, [r7, #24]
 80014be:	4313      	orrs	r3, r2
 80014c0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	69ba      	ldr	r2, [r7, #24]
 80014c6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	f000 80b4 	beq.w	800163e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014d6:	2300      	movs	r3, #0
 80014d8:	60fb      	str	r3, [r7, #12]
 80014da:	4b60      	ldr	r3, [pc, #384]	; (800165c <HAL_GPIO_Init+0x30c>)
 80014dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014de:	4a5f      	ldr	r2, [pc, #380]	; (800165c <HAL_GPIO_Init+0x30c>)
 80014e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014e4:	6453      	str	r3, [r2, #68]	; 0x44
 80014e6:	4b5d      	ldr	r3, [pc, #372]	; (800165c <HAL_GPIO_Init+0x30c>)
 80014e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014ee:	60fb      	str	r3, [r7, #12]
 80014f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80014f2:	4a5b      	ldr	r2, [pc, #364]	; (8001660 <HAL_GPIO_Init+0x310>)
 80014f4:	69fb      	ldr	r3, [r7, #28]
 80014f6:	089b      	lsrs	r3, r3, #2
 80014f8:	3302      	adds	r3, #2
 80014fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001500:	69fb      	ldr	r3, [r7, #28]
 8001502:	f003 0303 	and.w	r3, r3, #3
 8001506:	009b      	lsls	r3, r3, #2
 8001508:	220f      	movs	r2, #15
 800150a:	fa02 f303 	lsl.w	r3, r2, r3
 800150e:	43db      	mvns	r3, r3
 8001510:	69ba      	ldr	r2, [r7, #24]
 8001512:	4013      	ands	r3, r2
 8001514:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	4a52      	ldr	r2, [pc, #328]	; (8001664 <HAL_GPIO_Init+0x314>)
 800151a:	4293      	cmp	r3, r2
 800151c:	d02b      	beq.n	8001576 <HAL_GPIO_Init+0x226>
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	4a51      	ldr	r2, [pc, #324]	; (8001668 <HAL_GPIO_Init+0x318>)
 8001522:	4293      	cmp	r3, r2
 8001524:	d025      	beq.n	8001572 <HAL_GPIO_Init+0x222>
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	4a50      	ldr	r2, [pc, #320]	; (800166c <HAL_GPIO_Init+0x31c>)
 800152a:	4293      	cmp	r3, r2
 800152c:	d01f      	beq.n	800156e <HAL_GPIO_Init+0x21e>
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	4a4f      	ldr	r2, [pc, #316]	; (8001670 <HAL_GPIO_Init+0x320>)
 8001532:	4293      	cmp	r3, r2
 8001534:	d019      	beq.n	800156a <HAL_GPIO_Init+0x21a>
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	4a4e      	ldr	r2, [pc, #312]	; (8001674 <HAL_GPIO_Init+0x324>)
 800153a:	4293      	cmp	r3, r2
 800153c:	d013      	beq.n	8001566 <HAL_GPIO_Init+0x216>
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	4a4d      	ldr	r2, [pc, #308]	; (8001678 <HAL_GPIO_Init+0x328>)
 8001542:	4293      	cmp	r3, r2
 8001544:	d00d      	beq.n	8001562 <HAL_GPIO_Init+0x212>
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	4a4c      	ldr	r2, [pc, #304]	; (800167c <HAL_GPIO_Init+0x32c>)
 800154a:	4293      	cmp	r3, r2
 800154c:	d007      	beq.n	800155e <HAL_GPIO_Init+0x20e>
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	4a4b      	ldr	r2, [pc, #300]	; (8001680 <HAL_GPIO_Init+0x330>)
 8001552:	4293      	cmp	r3, r2
 8001554:	d101      	bne.n	800155a <HAL_GPIO_Init+0x20a>
 8001556:	2307      	movs	r3, #7
 8001558:	e00e      	b.n	8001578 <HAL_GPIO_Init+0x228>
 800155a:	2308      	movs	r3, #8
 800155c:	e00c      	b.n	8001578 <HAL_GPIO_Init+0x228>
 800155e:	2306      	movs	r3, #6
 8001560:	e00a      	b.n	8001578 <HAL_GPIO_Init+0x228>
 8001562:	2305      	movs	r3, #5
 8001564:	e008      	b.n	8001578 <HAL_GPIO_Init+0x228>
 8001566:	2304      	movs	r3, #4
 8001568:	e006      	b.n	8001578 <HAL_GPIO_Init+0x228>
 800156a:	2303      	movs	r3, #3
 800156c:	e004      	b.n	8001578 <HAL_GPIO_Init+0x228>
 800156e:	2302      	movs	r3, #2
 8001570:	e002      	b.n	8001578 <HAL_GPIO_Init+0x228>
 8001572:	2301      	movs	r3, #1
 8001574:	e000      	b.n	8001578 <HAL_GPIO_Init+0x228>
 8001576:	2300      	movs	r3, #0
 8001578:	69fa      	ldr	r2, [r7, #28]
 800157a:	f002 0203 	and.w	r2, r2, #3
 800157e:	0092      	lsls	r2, r2, #2
 8001580:	4093      	lsls	r3, r2
 8001582:	69ba      	ldr	r2, [r7, #24]
 8001584:	4313      	orrs	r3, r2
 8001586:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001588:	4935      	ldr	r1, [pc, #212]	; (8001660 <HAL_GPIO_Init+0x310>)
 800158a:	69fb      	ldr	r3, [r7, #28]
 800158c:	089b      	lsrs	r3, r3, #2
 800158e:	3302      	adds	r3, #2
 8001590:	69ba      	ldr	r2, [r7, #24]
 8001592:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001596:	4b3b      	ldr	r3, [pc, #236]	; (8001684 <HAL_GPIO_Init+0x334>)
 8001598:	689b      	ldr	r3, [r3, #8]
 800159a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800159c:	693b      	ldr	r3, [r7, #16]
 800159e:	43db      	mvns	r3, r3
 80015a0:	69ba      	ldr	r2, [r7, #24]
 80015a2:	4013      	ands	r3, r2
 80015a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d003      	beq.n	80015ba <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80015b2:	69ba      	ldr	r2, [r7, #24]
 80015b4:	693b      	ldr	r3, [r7, #16]
 80015b6:	4313      	orrs	r3, r2
 80015b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80015ba:	4a32      	ldr	r2, [pc, #200]	; (8001684 <HAL_GPIO_Init+0x334>)
 80015bc:	69bb      	ldr	r3, [r7, #24]
 80015be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80015c0:	4b30      	ldr	r3, [pc, #192]	; (8001684 <HAL_GPIO_Init+0x334>)
 80015c2:	68db      	ldr	r3, [r3, #12]
 80015c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015c6:	693b      	ldr	r3, [r7, #16]
 80015c8:	43db      	mvns	r3, r3
 80015ca:	69ba      	ldr	r2, [r7, #24]
 80015cc:	4013      	ands	r3, r2
 80015ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d003      	beq.n	80015e4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80015dc:	69ba      	ldr	r2, [r7, #24]
 80015de:	693b      	ldr	r3, [r7, #16]
 80015e0:	4313      	orrs	r3, r2
 80015e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80015e4:	4a27      	ldr	r2, [pc, #156]	; (8001684 <HAL_GPIO_Init+0x334>)
 80015e6:	69bb      	ldr	r3, [r7, #24]
 80015e8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80015ea:	4b26      	ldr	r3, [pc, #152]	; (8001684 <HAL_GPIO_Init+0x334>)
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015f0:	693b      	ldr	r3, [r7, #16]
 80015f2:	43db      	mvns	r3, r3
 80015f4:	69ba      	ldr	r2, [r7, #24]
 80015f6:	4013      	ands	r3, r2
 80015f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001602:	2b00      	cmp	r3, #0
 8001604:	d003      	beq.n	800160e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001606:	69ba      	ldr	r2, [r7, #24]
 8001608:	693b      	ldr	r3, [r7, #16]
 800160a:	4313      	orrs	r3, r2
 800160c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800160e:	4a1d      	ldr	r2, [pc, #116]	; (8001684 <HAL_GPIO_Init+0x334>)
 8001610:	69bb      	ldr	r3, [r7, #24]
 8001612:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001614:	4b1b      	ldr	r3, [pc, #108]	; (8001684 <HAL_GPIO_Init+0x334>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800161a:	693b      	ldr	r3, [r7, #16]
 800161c:	43db      	mvns	r3, r3
 800161e:	69ba      	ldr	r2, [r7, #24]
 8001620:	4013      	ands	r3, r2
 8001622:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800162c:	2b00      	cmp	r3, #0
 800162e:	d003      	beq.n	8001638 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001630:	69ba      	ldr	r2, [r7, #24]
 8001632:	693b      	ldr	r3, [r7, #16]
 8001634:	4313      	orrs	r3, r2
 8001636:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001638:	4a12      	ldr	r2, [pc, #72]	; (8001684 <HAL_GPIO_Init+0x334>)
 800163a:	69bb      	ldr	r3, [r7, #24]
 800163c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800163e:	69fb      	ldr	r3, [r7, #28]
 8001640:	3301      	adds	r3, #1
 8001642:	61fb      	str	r3, [r7, #28]
 8001644:	69fb      	ldr	r3, [r7, #28]
 8001646:	2b0f      	cmp	r3, #15
 8001648:	f67f ae90 	bls.w	800136c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800164c:	bf00      	nop
 800164e:	bf00      	nop
 8001650:	3724      	adds	r7, #36	; 0x24
 8001652:	46bd      	mov	sp, r7
 8001654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001658:	4770      	bx	lr
 800165a:	bf00      	nop
 800165c:	40023800 	.word	0x40023800
 8001660:	40013800 	.word	0x40013800
 8001664:	40020000 	.word	0x40020000
 8001668:	40020400 	.word	0x40020400
 800166c:	40020800 	.word	0x40020800
 8001670:	40020c00 	.word	0x40020c00
 8001674:	40021000 	.word	0x40021000
 8001678:	40021400 	.word	0x40021400
 800167c:	40021800 	.word	0x40021800
 8001680:	40021c00 	.word	0x40021c00
 8001684:	40013c00 	.word	0x40013c00

08001688 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b084      	sub	sp, #16
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	2b00      	cmp	r3, #0
 8001694:	d101      	bne.n	800169a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001696:	2301      	movs	r3, #1
 8001698:	e12b      	b.n	80018f2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80016a0:	b2db      	uxtb	r3, r3
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d106      	bne.n	80016b4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	2200      	movs	r2, #0
 80016aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80016ae:	6878      	ldr	r0, [r7, #4]
 80016b0:	f7ff fa36 	bl	8000b20 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	2224      	movs	r2, #36	; 0x24
 80016b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	681a      	ldr	r2, [r3, #0]
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f022 0201 	bic.w	r2, r2, #1
 80016ca:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	681a      	ldr	r2, [r3, #0]
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80016da:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	681a      	ldr	r2, [r3, #0]
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80016ea:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80016ec:	f003 f85e 	bl	80047ac <HAL_RCC_GetPCLK1Freq>
 80016f0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	4a81      	ldr	r2, [pc, #516]	; (80018fc <HAL_I2C_Init+0x274>)
 80016f8:	4293      	cmp	r3, r2
 80016fa:	d807      	bhi.n	800170c <HAL_I2C_Init+0x84>
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	4a80      	ldr	r2, [pc, #512]	; (8001900 <HAL_I2C_Init+0x278>)
 8001700:	4293      	cmp	r3, r2
 8001702:	bf94      	ite	ls
 8001704:	2301      	movls	r3, #1
 8001706:	2300      	movhi	r3, #0
 8001708:	b2db      	uxtb	r3, r3
 800170a:	e006      	b.n	800171a <HAL_I2C_Init+0x92>
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	4a7d      	ldr	r2, [pc, #500]	; (8001904 <HAL_I2C_Init+0x27c>)
 8001710:	4293      	cmp	r3, r2
 8001712:	bf94      	ite	ls
 8001714:	2301      	movls	r3, #1
 8001716:	2300      	movhi	r3, #0
 8001718:	b2db      	uxtb	r3, r3
 800171a:	2b00      	cmp	r3, #0
 800171c:	d001      	beq.n	8001722 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800171e:	2301      	movs	r3, #1
 8001720:	e0e7      	b.n	80018f2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	4a78      	ldr	r2, [pc, #480]	; (8001908 <HAL_I2C_Init+0x280>)
 8001726:	fba2 2303 	umull	r2, r3, r2, r3
 800172a:	0c9b      	lsrs	r3, r3, #18
 800172c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	68ba      	ldr	r2, [r7, #8]
 800173e:	430a      	orrs	r2, r1
 8001740:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	6a1b      	ldr	r3, [r3, #32]
 8001748:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	4a6a      	ldr	r2, [pc, #424]	; (80018fc <HAL_I2C_Init+0x274>)
 8001752:	4293      	cmp	r3, r2
 8001754:	d802      	bhi.n	800175c <HAL_I2C_Init+0xd4>
 8001756:	68bb      	ldr	r3, [r7, #8]
 8001758:	3301      	adds	r3, #1
 800175a:	e009      	b.n	8001770 <HAL_I2C_Init+0xe8>
 800175c:	68bb      	ldr	r3, [r7, #8]
 800175e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001762:	fb02 f303 	mul.w	r3, r2, r3
 8001766:	4a69      	ldr	r2, [pc, #420]	; (800190c <HAL_I2C_Init+0x284>)
 8001768:	fba2 2303 	umull	r2, r3, r2, r3
 800176c:	099b      	lsrs	r3, r3, #6
 800176e:	3301      	adds	r3, #1
 8001770:	687a      	ldr	r2, [r7, #4]
 8001772:	6812      	ldr	r2, [r2, #0]
 8001774:	430b      	orrs	r3, r1
 8001776:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	69db      	ldr	r3, [r3, #28]
 800177e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001782:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	495c      	ldr	r1, [pc, #368]	; (80018fc <HAL_I2C_Init+0x274>)
 800178c:	428b      	cmp	r3, r1
 800178e:	d819      	bhi.n	80017c4 <HAL_I2C_Init+0x13c>
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	1e59      	subs	r1, r3, #1
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	005b      	lsls	r3, r3, #1
 800179a:	fbb1 f3f3 	udiv	r3, r1, r3
 800179e:	1c59      	adds	r1, r3, #1
 80017a0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80017a4:	400b      	ands	r3, r1
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d00a      	beq.n	80017c0 <HAL_I2C_Init+0x138>
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	1e59      	subs	r1, r3, #1
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	005b      	lsls	r3, r3, #1
 80017b4:	fbb1 f3f3 	udiv	r3, r1, r3
 80017b8:	3301      	adds	r3, #1
 80017ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017be:	e051      	b.n	8001864 <HAL_I2C_Init+0x1dc>
 80017c0:	2304      	movs	r3, #4
 80017c2:	e04f      	b.n	8001864 <HAL_I2C_Init+0x1dc>
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	689b      	ldr	r3, [r3, #8]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d111      	bne.n	80017f0 <HAL_I2C_Init+0x168>
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	1e58      	subs	r0, r3, #1
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6859      	ldr	r1, [r3, #4]
 80017d4:	460b      	mov	r3, r1
 80017d6:	005b      	lsls	r3, r3, #1
 80017d8:	440b      	add	r3, r1
 80017da:	fbb0 f3f3 	udiv	r3, r0, r3
 80017de:	3301      	adds	r3, #1
 80017e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	bf0c      	ite	eq
 80017e8:	2301      	moveq	r3, #1
 80017ea:	2300      	movne	r3, #0
 80017ec:	b2db      	uxtb	r3, r3
 80017ee:	e012      	b.n	8001816 <HAL_I2C_Init+0x18e>
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	1e58      	subs	r0, r3, #1
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	6859      	ldr	r1, [r3, #4]
 80017f8:	460b      	mov	r3, r1
 80017fa:	009b      	lsls	r3, r3, #2
 80017fc:	440b      	add	r3, r1
 80017fe:	0099      	lsls	r1, r3, #2
 8001800:	440b      	add	r3, r1
 8001802:	fbb0 f3f3 	udiv	r3, r0, r3
 8001806:	3301      	adds	r3, #1
 8001808:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800180c:	2b00      	cmp	r3, #0
 800180e:	bf0c      	ite	eq
 8001810:	2301      	moveq	r3, #1
 8001812:	2300      	movne	r3, #0
 8001814:	b2db      	uxtb	r3, r3
 8001816:	2b00      	cmp	r3, #0
 8001818:	d001      	beq.n	800181e <HAL_I2C_Init+0x196>
 800181a:	2301      	movs	r3, #1
 800181c:	e022      	b.n	8001864 <HAL_I2C_Init+0x1dc>
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	689b      	ldr	r3, [r3, #8]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d10e      	bne.n	8001844 <HAL_I2C_Init+0x1bc>
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	1e58      	subs	r0, r3, #1
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6859      	ldr	r1, [r3, #4]
 800182e:	460b      	mov	r3, r1
 8001830:	005b      	lsls	r3, r3, #1
 8001832:	440b      	add	r3, r1
 8001834:	fbb0 f3f3 	udiv	r3, r0, r3
 8001838:	3301      	adds	r3, #1
 800183a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800183e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001842:	e00f      	b.n	8001864 <HAL_I2C_Init+0x1dc>
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	1e58      	subs	r0, r3, #1
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6859      	ldr	r1, [r3, #4]
 800184c:	460b      	mov	r3, r1
 800184e:	009b      	lsls	r3, r3, #2
 8001850:	440b      	add	r3, r1
 8001852:	0099      	lsls	r1, r3, #2
 8001854:	440b      	add	r3, r1
 8001856:	fbb0 f3f3 	udiv	r3, r0, r3
 800185a:	3301      	adds	r3, #1
 800185c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001860:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001864:	6879      	ldr	r1, [r7, #4]
 8001866:	6809      	ldr	r1, [r1, #0]
 8001868:	4313      	orrs	r3, r2
 800186a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	69da      	ldr	r2, [r3, #28]
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6a1b      	ldr	r3, [r3, #32]
 800187e:	431a      	orrs	r2, r3
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	430a      	orrs	r2, r1
 8001886:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	689b      	ldr	r3, [r3, #8]
 800188e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001892:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001896:	687a      	ldr	r2, [r7, #4]
 8001898:	6911      	ldr	r1, [r2, #16]
 800189a:	687a      	ldr	r2, [r7, #4]
 800189c:	68d2      	ldr	r2, [r2, #12]
 800189e:	4311      	orrs	r1, r2
 80018a0:	687a      	ldr	r2, [r7, #4]
 80018a2:	6812      	ldr	r2, [r2, #0]
 80018a4:	430b      	orrs	r3, r1
 80018a6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	68db      	ldr	r3, [r3, #12]
 80018ae:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	695a      	ldr	r2, [r3, #20]
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	699b      	ldr	r3, [r3, #24]
 80018ba:	431a      	orrs	r2, r3
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	430a      	orrs	r2, r1
 80018c2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	681a      	ldr	r2, [r3, #0]
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f042 0201 	orr.w	r2, r2, #1
 80018d2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	2200      	movs	r2, #0
 80018d8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	2220      	movs	r2, #32
 80018de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	2200      	movs	r2, #0
 80018e6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2200      	movs	r2, #0
 80018ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80018f0:	2300      	movs	r3, #0
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	3710      	adds	r7, #16
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	000186a0 	.word	0x000186a0
 8001900:	001e847f 	.word	0x001e847f
 8001904:	003d08ff 	.word	0x003d08ff
 8001908:	431bde83 	.word	0x431bde83
 800190c:	10624dd3 	.word	0x10624dd3

08001910 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b088      	sub	sp, #32
 8001914:	af02      	add	r7, sp, #8
 8001916:	60f8      	str	r0, [r7, #12]
 8001918:	607a      	str	r2, [r7, #4]
 800191a:	461a      	mov	r2, r3
 800191c:	460b      	mov	r3, r1
 800191e:	817b      	strh	r3, [r7, #10]
 8001920:	4613      	mov	r3, r2
 8001922:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001924:	f7ff fb32 	bl	8000f8c <HAL_GetTick>
 8001928:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001930:	b2db      	uxtb	r3, r3
 8001932:	2b20      	cmp	r3, #32
 8001934:	f040 80e0 	bne.w	8001af8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001938:	697b      	ldr	r3, [r7, #20]
 800193a:	9300      	str	r3, [sp, #0]
 800193c:	2319      	movs	r3, #25
 800193e:	2201      	movs	r2, #1
 8001940:	4970      	ldr	r1, [pc, #448]	; (8001b04 <HAL_I2C_Master_Transmit+0x1f4>)
 8001942:	68f8      	ldr	r0, [r7, #12]
 8001944:	f002 f8d8 	bl	8003af8 <I2C_WaitOnFlagUntilTimeout>
 8001948:	4603      	mov	r3, r0
 800194a:	2b00      	cmp	r3, #0
 800194c:	d001      	beq.n	8001952 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800194e:	2302      	movs	r3, #2
 8001950:	e0d3      	b.n	8001afa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001958:	2b01      	cmp	r3, #1
 800195a:	d101      	bne.n	8001960 <HAL_I2C_Master_Transmit+0x50>
 800195c:	2302      	movs	r3, #2
 800195e:	e0cc      	b.n	8001afa <HAL_I2C_Master_Transmit+0x1ea>
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	2201      	movs	r2, #1
 8001964:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f003 0301 	and.w	r3, r3, #1
 8001972:	2b01      	cmp	r3, #1
 8001974:	d007      	beq.n	8001986 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	681a      	ldr	r2, [r3, #0]
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f042 0201 	orr.w	r2, r2, #1
 8001984:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	681a      	ldr	r2, [r3, #0]
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001994:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	2221      	movs	r2, #33	; 0x21
 800199a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	2210      	movs	r2, #16
 80019a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	2200      	movs	r2, #0
 80019aa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	687a      	ldr	r2, [r7, #4]
 80019b0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	893a      	ldrh	r2, [r7, #8]
 80019b6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019bc:	b29a      	uxth	r2, r3
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	4a50      	ldr	r2, [pc, #320]	; (8001b08 <HAL_I2C_Master_Transmit+0x1f8>)
 80019c6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80019c8:	8979      	ldrh	r1, [r7, #10]
 80019ca:	697b      	ldr	r3, [r7, #20]
 80019cc:	6a3a      	ldr	r2, [r7, #32]
 80019ce:	68f8      	ldr	r0, [r7, #12]
 80019d0:	f001 fe9a 	bl	8003708 <I2C_MasterRequestWrite>
 80019d4:	4603      	mov	r3, r0
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d001      	beq.n	80019de <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80019da:	2301      	movs	r3, #1
 80019dc:	e08d      	b.n	8001afa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80019de:	2300      	movs	r3, #0
 80019e0:	613b      	str	r3, [r7, #16]
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	695b      	ldr	r3, [r3, #20]
 80019e8:	613b      	str	r3, [r7, #16]
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	699b      	ldr	r3, [r3, #24]
 80019f0:	613b      	str	r3, [r7, #16]
 80019f2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80019f4:	e066      	b.n	8001ac4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80019f6:	697a      	ldr	r2, [r7, #20]
 80019f8:	6a39      	ldr	r1, [r7, #32]
 80019fa:	68f8      	ldr	r0, [r7, #12]
 80019fc:	f002 f952 	bl	8003ca4 <I2C_WaitOnTXEFlagUntilTimeout>
 8001a00:	4603      	mov	r3, r0
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d00d      	beq.n	8001a22 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a0a:	2b04      	cmp	r3, #4
 8001a0c:	d107      	bne.n	8001a1e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	681a      	ldr	r2, [r3, #0]
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a1c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001a1e:	2301      	movs	r3, #1
 8001a20:	e06b      	b.n	8001afa <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a26:	781a      	ldrb	r2, [r3, #0]
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a32:	1c5a      	adds	r2, r3, #1
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a3c:	b29b      	uxth	r3, r3
 8001a3e:	3b01      	subs	r3, #1
 8001a40:	b29a      	uxth	r2, r3
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a4a:	3b01      	subs	r3, #1
 8001a4c:	b29a      	uxth	r2, r3
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	695b      	ldr	r3, [r3, #20]
 8001a58:	f003 0304 	and.w	r3, r3, #4
 8001a5c:	2b04      	cmp	r3, #4
 8001a5e:	d11b      	bne.n	8001a98 <HAL_I2C_Master_Transmit+0x188>
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d017      	beq.n	8001a98 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a6c:	781a      	ldrb	r2, [r3, #0]
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a78:	1c5a      	adds	r2, r3, #1
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a82:	b29b      	uxth	r3, r3
 8001a84:	3b01      	subs	r3, #1
 8001a86:	b29a      	uxth	r2, r3
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a90:	3b01      	subs	r3, #1
 8001a92:	b29a      	uxth	r2, r3
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a98:	697a      	ldr	r2, [r7, #20]
 8001a9a:	6a39      	ldr	r1, [r7, #32]
 8001a9c:	68f8      	ldr	r0, [r7, #12]
 8001a9e:	f002 f942 	bl	8003d26 <I2C_WaitOnBTFFlagUntilTimeout>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d00d      	beq.n	8001ac4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aac:	2b04      	cmp	r3, #4
 8001aae:	d107      	bne.n	8001ac0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	681a      	ldr	r2, [r3, #0]
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001abe:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	e01a      	b.n	8001afa <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d194      	bne.n	80019f6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	681a      	ldr	r2, [r3, #0]
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ada:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	2220      	movs	r2, #32
 8001ae0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	2200      	movs	r2, #0
 8001af0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001af4:	2300      	movs	r3, #0
 8001af6:	e000      	b.n	8001afa <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001af8:	2302      	movs	r3, #2
  }
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	3718      	adds	r7, #24
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	bf00      	nop
 8001b04:	00100002 	.word	0x00100002
 8001b08:	ffff0000 	.word	0xffff0000

08001b0c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b08c      	sub	sp, #48	; 0x30
 8001b10:	af02      	add	r7, sp, #8
 8001b12:	60f8      	str	r0, [r7, #12]
 8001b14:	607a      	str	r2, [r7, #4]
 8001b16:	461a      	mov	r2, r3
 8001b18:	460b      	mov	r3, r1
 8001b1a:	817b      	strh	r3, [r7, #10]
 8001b1c:	4613      	mov	r3, r2
 8001b1e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001b20:	f7ff fa34 	bl	8000f8c <HAL_GetTick>
 8001b24:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b2c:	b2db      	uxtb	r3, r3
 8001b2e:	2b20      	cmp	r3, #32
 8001b30:	f040 820b 	bne.w	8001f4a <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b36:	9300      	str	r3, [sp, #0]
 8001b38:	2319      	movs	r3, #25
 8001b3a:	2201      	movs	r2, #1
 8001b3c:	497c      	ldr	r1, [pc, #496]	; (8001d30 <HAL_I2C_Master_Receive+0x224>)
 8001b3e:	68f8      	ldr	r0, [r7, #12]
 8001b40:	f001 ffda 	bl	8003af8 <I2C_WaitOnFlagUntilTimeout>
 8001b44:	4603      	mov	r3, r0
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d001      	beq.n	8001b4e <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8001b4a:	2302      	movs	r3, #2
 8001b4c:	e1fe      	b.n	8001f4c <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b54:	2b01      	cmp	r3, #1
 8001b56:	d101      	bne.n	8001b5c <HAL_I2C_Master_Receive+0x50>
 8001b58:	2302      	movs	r3, #2
 8001b5a:	e1f7      	b.n	8001f4c <HAL_I2C_Master_Receive+0x440>
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	2201      	movs	r2, #1
 8001b60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f003 0301 	and.w	r3, r3, #1
 8001b6e:	2b01      	cmp	r3, #1
 8001b70:	d007      	beq.n	8001b82 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	681a      	ldr	r2, [r3, #0]
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f042 0201 	orr.w	r2, r2, #1
 8001b80:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	681a      	ldr	r2, [r3, #0]
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001b90:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	2222      	movs	r2, #34	; 0x22
 8001b96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	2210      	movs	r2, #16
 8001b9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	687a      	ldr	r2, [r7, #4]
 8001bac:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	893a      	ldrh	r2, [r7, #8]
 8001bb2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bb8:	b29a      	uxth	r2, r3
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	4a5c      	ldr	r2, [pc, #368]	; (8001d34 <HAL_I2C_Master_Receive+0x228>)
 8001bc2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001bc4:	8979      	ldrh	r1, [r7, #10]
 8001bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bc8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001bca:	68f8      	ldr	r0, [r7, #12]
 8001bcc:	f001 fe1e 	bl	800380c <I2C_MasterRequestRead>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d001      	beq.n	8001bda <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	e1b8      	b.n	8001f4c <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d113      	bne.n	8001c0a <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001be2:	2300      	movs	r3, #0
 8001be4:	623b      	str	r3, [r7, #32]
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	695b      	ldr	r3, [r3, #20]
 8001bec:	623b      	str	r3, [r7, #32]
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	699b      	ldr	r3, [r3, #24]
 8001bf4:	623b      	str	r3, [r7, #32]
 8001bf6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	681a      	ldr	r2, [r3, #0]
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c06:	601a      	str	r2, [r3, #0]
 8001c08:	e18c      	b.n	8001f24 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c0e:	2b01      	cmp	r3, #1
 8001c10:	d11b      	bne.n	8001c4a <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	681a      	ldr	r2, [r3, #0]
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c20:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c22:	2300      	movs	r3, #0
 8001c24:	61fb      	str	r3, [r7, #28]
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	695b      	ldr	r3, [r3, #20]
 8001c2c:	61fb      	str	r3, [r7, #28]
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	699b      	ldr	r3, [r3, #24]
 8001c34:	61fb      	str	r3, [r7, #28]
 8001c36:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	681a      	ldr	r2, [r3, #0]
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c46:	601a      	str	r2, [r3, #0]
 8001c48:	e16c      	b.n	8001f24 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c4e:	2b02      	cmp	r3, #2
 8001c50:	d11b      	bne.n	8001c8a <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	681a      	ldr	r2, [r3, #0]
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c60:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	681a      	ldr	r2, [r3, #0]
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001c70:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c72:	2300      	movs	r3, #0
 8001c74:	61bb      	str	r3, [r7, #24]
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	695b      	ldr	r3, [r3, #20]
 8001c7c:	61bb      	str	r3, [r7, #24]
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	699b      	ldr	r3, [r3, #24]
 8001c84:	61bb      	str	r3, [r7, #24]
 8001c86:	69bb      	ldr	r3, [r7, #24]
 8001c88:	e14c      	b.n	8001f24 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	681a      	ldr	r2, [r3, #0]
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001c98:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	617b      	str	r3, [r7, #20]
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	695b      	ldr	r3, [r3, #20]
 8001ca4:	617b      	str	r3, [r7, #20]
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	699b      	ldr	r3, [r3, #24]
 8001cac:	617b      	str	r3, [r7, #20]
 8001cae:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001cb0:	e138      	b.n	8001f24 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cb6:	2b03      	cmp	r3, #3
 8001cb8:	f200 80f1 	bhi.w	8001e9e <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cc0:	2b01      	cmp	r3, #1
 8001cc2:	d123      	bne.n	8001d0c <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001cc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cc6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001cc8:	68f8      	ldr	r0, [r7, #12]
 8001cca:	f002 f89f 	bl	8003e0c <I2C_WaitOnRXNEFlagUntilTimeout>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d001      	beq.n	8001cd8 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	e139      	b.n	8001f4c <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	691a      	ldr	r2, [r3, #16]
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ce2:	b2d2      	uxtb	r2, r2
 8001ce4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cea:	1c5a      	adds	r2, r3, #1
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cf4:	3b01      	subs	r3, #1
 8001cf6:	b29a      	uxth	r2, r3
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d00:	b29b      	uxth	r3, r3
 8001d02:	3b01      	subs	r3, #1
 8001d04:	b29a      	uxth	r2, r3
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001d0a:	e10b      	b.n	8001f24 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d10:	2b02      	cmp	r3, #2
 8001d12:	d14e      	bne.n	8001db2 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d16:	9300      	str	r3, [sp, #0]
 8001d18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	4906      	ldr	r1, [pc, #24]	; (8001d38 <HAL_I2C_Master_Receive+0x22c>)
 8001d1e:	68f8      	ldr	r0, [r7, #12]
 8001d20:	f001 feea 	bl	8003af8 <I2C_WaitOnFlagUntilTimeout>
 8001d24:	4603      	mov	r3, r0
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d008      	beq.n	8001d3c <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	e10e      	b.n	8001f4c <HAL_I2C_Master_Receive+0x440>
 8001d2e:	bf00      	nop
 8001d30:	00100002 	.word	0x00100002
 8001d34:	ffff0000 	.word	0xffff0000
 8001d38:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	681a      	ldr	r2, [r3, #0]
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d4a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	691a      	ldr	r2, [r3, #16]
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d56:	b2d2      	uxtb	r2, r2
 8001d58:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d5e:	1c5a      	adds	r2, r3, #1
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d68:	3b01      	subs	r3, #1
 8001d6a:	b29a      	uxth	r2, r3
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d74:	b29b      	uxth	r3, r3
 8001d76:	3b01      	subs	r3, #1
 8001d78:	b29a      	uxth	r2, r3
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	691a      	ldr	r2, [r3, #16]
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d88:	b2d2      	uxtb	r2, r2
 8001d8a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d90:	1c5a      	adds	r2, r3, #1
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d9a:	3b01      	subs	r3, #1
 8001d9c:	b29a      	uxth	r2, r3
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001da6:	b29b      	uxth	r3, r3
 8001da8:	3b01      	subs	r3, #1
 8001daa:	b29a      	uxth	r2, r3
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001db0:	e0b8      	b.n	8001f24 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001db4:	9300      	str	r3, [sp, #0]
 8001db6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001db8:	2200      	movs	r2, #0
 8001dba:	4966      	ldr	r1, [pc, #408]	; (8001f54 <HAL_I2C_Master_Receive+0x448>)
 8001dbc:	68f8      	ldr	r0, [r7, #12]
 8001dbe:	f001 fe9b 	bl	8003af8 <I2C_WaitOnFlagUntilTimeout>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d001      	beq.n	8001dcc <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8001dc8:	2301      	movs	r3, #1
 8001dca:	e0bf      	b.n	8001f4c <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	681a      	ldr	r2, [r3, #0]
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001dda:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	691a      	ldr	r2, [r3, #16]
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001de6:	b2d2      	uxtb	r2, r2
 8001de8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dee:	1c5a      	adds	r2, r3, #1
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001df8:	3b01      	subs	r3, #1
 8001dfa:	b29a      	uxth	r2, r3
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e04:	b29b      	uxth	r3, r3
 8001e06:	3b01      	subs	r3, #1
 8001e08:	b29a      	uxth	r2, r3
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e10:	9300      	str	r3, [sp, #0]
 8001e12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e14:	2200      	movs	r2, #0
 8001e16:	494f      	ldr	r1, [pc, #316]	; (8001f54 <HAL_I2C_Master_Receive+0x448>)
 8001e18:	68f8      	ldr	r0, [r7, #12]
 8001e1a:	f001 fe6d 	bl	8003af8 <I2C_WaitOnFlagUntilTimeout>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d001      	beq.n	8001e28 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8001e24:	2301      	movs	r3, #1
 8001e26:	e091      	b.n	8001f4c <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	681a      	ldr	r2, [r3, #0]
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e36:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	691a      	ldr	r2, [r3, #16]
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e42:	b2d2      	uxtb	r2, r2
 8001e44:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e4a:	1c5a      	adds	r2, r3, #1
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e54:	3b01      	subs	r3, #1
 8001e56:	b29a      	uxth	r2, r3
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e60:	b29b      	uxth	r3, r3
 8001e62:	3b01      	subs	r3, #1
 8001e64:	b29a      	uxth	r2, r3
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	691a      	ldr	r2, [r3, #16]
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e74:	b2d2      	uxtb	r2, r2
 8001e76:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e7c:	1c5a      	adds	r2, r3, #1
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e86:	3b01      	subs	r3, #1
 8001e88:	b29a      	uxth	r2, r3
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e92:	b29b      	uxth	r3, r3
 8001e94:	3b01      	subs	r3, #1
 8001e96:	b29a      	uxth	r2, r3
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001e9c:	e042      	b.n	8001f24 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ea0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001ea2:	68f8      	ldr	r0, [r7, #12]
 8001ea4:	f001 ffb2 	bl	8003e0c <I2C_WaitOnRXNEFlagUntilTimeout>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d001      	beq.n	8001eb2 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e04c      	b.n	8001f4c <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	691a      	ldr	r2, [r3, #16]
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ebc:	b2d2      	uxtb	r2, r2
 8001ebe:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ec4:	1c5a      	adds	r2, r3, #1
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ece:	3b01      	subs	r3, #1
 8001ed0:	b29a      	uxth	r2, r3
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001eda:	b29b      	uxth	r3, r3
 8001edc:	3b01      	subs	r3, #1
 8001ede:	b29a      	uxth	r2, r3
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	695b      	ldr	r3, [r3, #20]
 8001eea:	f003 0304 	and.w	r3, r3, #4
 8001eee:	2b04      	cmp	r3, #4
 8001ef0:	d118      	bne.n	8001f24 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	691a      	ldr	r2, [r3, #16]
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001efc:	b2d2      	uxtb	r2, r2
 8001efe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f04:	1c5a      	adds	r2, r3, #1
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f0e:	3b01      	subs	r3, #1
 8001f10:	b29a      	uxth	r2, r3
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f1a:	b29b      	uxth	r3, r3
 8001f1c:	3b01      	subs	r3, #1
 8001f1e:	b29a      	uxth	r2, r3
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	f47f aec2 	bne.w	8001cb2 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	2220      	movs	r2, #32
 8001f32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	2200      	movs	r2, #0
 8001f3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	2200      	movs	r2, #0
 8001f42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001f46:	2300      	movs	r3, #0
 8001f48:	e000      	b.n	8001f4c <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8001f4a:	2302      	movs	r3, #2
  }
}
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	3728      	adds	r7, #40	; 0x28
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bd80      	pop	{r7, pc}
 8001f54:	00010004 	.word	0x00010004

08001f58 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b088      	sub	sp, #32
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8001f60:	2300      	movs	r3, #0
 8001f62:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f70:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001f78:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f80:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8001f82:	7bfb      	ldrb	r3, [r7, #15]
 8001f84:	2b10      	cmp	r3, #16
 8001f86:	d003      	beq.n	8001f90 <HAL_I2C_EV_IRQHandler+0x38>
 8001f88:	7bfb      	ldrb	r3, [r7, #15]
 8001f8a:	2b40      	cmp	r3, #64	; 0x40
 8001f8c:	f040 80b1 	bne.w	80020f2 <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	699b      	ldr	r3, [r3, #24]
 8001f96:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	695b      	ldr	r3, [r3, #20]
 8001f9e:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8001fa0:	69fb      	ldr	r3, [r7, #28]
 8001fa2:	f003 0301 	and.w	r3, r3, #1
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d10d      	bne.n	8001fc6 <HAL_I2C_EV_IRQHandler+0x6e>
 8001faa:	693b      	ldr	r3, [r7, #16]
 8001fac:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8001fb0:	d003      	beq.n	8001fba <HAL_I2C_EV_IRQHandler+0x62>
 8001fb2:	693b      	ldr	r3, [r7, #16]
 8001fb4:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8001fb8:	d101      	bne.n	8001fbe <HAL_I2C_EV_IRQHandler+0x66>
 8001fba:	2301      	movs	r3, #1
 8001fbc:	e000      	b.n	8001fc0 <HAL_I2C_EV_IRQHandler+0x68>
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	2b01      	cmp	r3, #1
 8001fc2:	f000 8114 	beq.w	80021ee <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001fc6:	69fb      	ldr	r3, [r7, #28]
 8001fc8:	f003 0301 	and.w	r3, r3, #1
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d00b      	beq.n	8001fe8 <HAL_I2C_EV_IRQHandler+0x90>
 8001fd0:	697b      	ldr	r3, [r7, #20]
 8001fd2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d006      	beq.n	8001fe8 <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8001fda:	6878      	ldr	r0, [r7, #4]
 8001fdc:	f001 ff9b 	bl	8003f16 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8001fe0:	6878      	ldr	r0, [r7, #4]
 8001fe2:	f000 fd78 	bl	8002ad6 <I2C_Master_SB>
 8001fe6:	e083      	b.n	80020f0 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001fe8:	69fb      	ldr	r3, [r7, #28]
 8001fea:	f003 0308 	and.w	r3, r3, #8
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d008      	beq.n	8002004 <HAL_I2C_EV_IRQHandler+0xac>
 8001ff2:	697b      	ldr	r3, [r7, #20]
 8001ff4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d003      	beq.n	8002004 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 8001ffc:	6878      	ldr	r0, [r7, #4]
 8001ffe:	f000 fdf0 	bl	8002be2 <I2C_Master_ADD10>
 8002002:	e075      	b.n	80020f0 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002004:	69fb      	ldr	r3, [r7, #28]
 8002006:	f003 0302 	and.w	r3, r3, #2
 800200a:	2b00      	cmp	r3, #0
 800200c:	d008      	beq.n	8002020 <HAL_I2C_EV_IRQHandler+0xc8>
 800200e:	697b      	ldr	r3, [r7, #20]
 8002010:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002014:	2b00      	cmp	r3, #0
 8002016:	d003      	beq.n	8002020 <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 8002018:	6878      	ldr	r0, [r7, #4]
 800201a:	f000 fe0c 	bl	8002c36 <I2C_Master_ADDR>
 800201e:	e067      	b.n	80020f0 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8002020:	69bb      	ldr	r3, [r7, #24]
 8002022:	f003 0304 	and.w	r3, r3, #4
 8002026:	2b00      	cmp	r3, #0
 8002028:	d036      	beq.n	8002098 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002034:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002038:	f000 80db 	beq.w	80021f2 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800203c:	69fb      	ldr	r3, [r7, #28]
 800203e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002042:	2b00      	cmp	r3, #0
 8002044:	d00d      	beq.n	8002062 <HAL_I2C_EV_IRQHandler+0x10a>
 8002046:	697b      	ldr	r3, [r7, #20]
 8002048:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800204c:	2b00      	cmp	r3, #0
 800204e:	d008      	beq.n	8002062 <HAL_I2C_EV_IRQHandler+0x10a>
 8002050:	69fb      	ldr	r3, [r7, #28]
 8002052:	f003 0304 	and.w	r3, r3, #4
 8002056:	2b00      	cmp	r3, #0
 8002058:	d103      	bne.n	8002062 <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800205a:	6878      	ldr	r0, [r7, #4]
 800205c:	f000 f9f0 	bl	8002440 <I2C_MasterTransmit_TXE>
 8002060:	e046      	b.n	80020f0 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002062:	69fb      	ldr	r3, [r7, #28]
 8002064:	f003 0304 	and.w	r3, r3, #4
 8002068:	2b00      	cmp	r3, #0
 800206a:	f000 80c2 	beq.w	80021f2 <HAL_I2C_EV_IRQHandler+0x29a>
 800206e:	697b      	ldr	r3, [r7, #20]
 8002070:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002074:	2b00      	cmp	r3, #0
 8002076:	f000 80bc 	beq.w	80021f2 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800207a:	7bbb      	ldrb	r3, [r7, #14]
 800207c:	2b21      	cmp	r3, #33	; 0x21
 800207e:	d103      	bne.n	8002088 <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8002080:	6878      	ldr	r0, [r7, #4]
 8002082:	f000 fa79 	bl	8002578 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002086:	e0b4      	b.n	80021f2 <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8002088:	7bfb      	ldrb	r3, [r7, #15]
 800208a:	2b40      	cmp	r3, #64	; 0x40
 800208c:	f040 80b1 	bne.w	80021f2 <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002090:	6878      	ldr	r0, [r7, #4]
 8002092:	f000 fae7 	bl	8002664 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002096:	e0ac      	b.n	80021f2 <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80020a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80020a6:	f000 80a4 	beq.w	80021f2 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80020aa:	69fb      	ldr	r3, [r7, #28]
 80020ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d00d      	beq.n	80020d0 <HAL_I2C_EV_IRQHandler+0x178>
 80020b4:	697b      	ldr	r3, [r7, #20]
 80020b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d008      	beq.n	80020d0 <HAL_I2C_EV_IRQHandler+0x178>
 80020be:	69fb      	ldr	r3, [r7, #28]
 80020c0:	f003 0304 	and.w	r3, r3, #4
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d103      	bne.n	80020d0 <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80020c8:	6878      	ldr	r0, [r7, #4]
 80020ca:	f000 fb5f 	bl	800278c <I2C_MasterReceive_RXNE>
 80020ce:	e00f      	b.n	80020f0 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80020d0:	69fb      	ldr	r3, [r7, #28]
 80020d2:	f003 0304 	and.w	r3, r3, #4
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	f000 808b 	beq.w	80021f2 <HAL_I2C_EV_IRQHandler+0x29a>
 80020dc:	697b      	ldr	r3, [r7, #20]
 80020de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	f000 8085 	beq.w	80021f2 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 80020e8:	6878      	ldr	r0, [r7, #4]
 80020ea:	f000 fc0a 	bl	8002902 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80020ee:	e080      	b.n	80021f2 <HAL_I2C_EV_IRQHandler+0x29a>
 80020f0:	e07f      	b.n	80021f2 <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d004      	beq.n	8002104 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	695b      	ldr	r3, [r3, #20]
 8002100:	61fb      	str	r3, [r7, #28]
 8002102:	e007      	b.n	8002114 <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	699b      	ldr	r3, [r3, #24]
 800210a:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	695b      	ldr	r3, [r3, #20]
 8002112:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002114:	69fb      	ldr	r3, [r7, #28]
 8002116:	f003 0302 	and.w	r3, r3, #2
 800211a:	2b00      	cmp	r3, #0
 800211c:	d011      	beq.n	8002142 <HAL_I2C_EV_IRQHandler+0x1ea>
 800211e:	697b      	ldr	r3, [r7, #20]
 8002120:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002124:	2b00      	cmp	r3, #0
 8002126:	d00c      	beq.n	8002142 <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800212c:	2b00      	cmp	r3, #0
 800212e:	d003      	beq.n	8002138 <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	699b      	ldr	r3, [r3, #24]
 8002136:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8002138:	69b9      	ldr	r1, [r7, #24]
 800213a:	6878      	ldr	r0, [r7, #4]
 800213c:	f000 ffca 	bl	80030d4 <I2C_Slave_ADDR>
 8002140:	e05a      	b.n	80021f8 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002142:	69fb      	ldr	r3, [r7, #28]
 8002144:	f003 0310 	and.w	r3, r3, #16
 8002148:	2b00      	cmp	r3, #0
 800214a:	d008      	beq.n	800215e <HAL_I2C_EV_IRQHandler+0x206>
 800214c:	697b      	ldr	r3, [r7, #20]
 800214e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002152:	2b00      	cmp	r3, #0
 8002154:	d003      	beq.n	800215e <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 8002156:	6878      	ldr	r0, [r7, #4]
 8002158:	f001 f804 	bl	8003164 <I2C_Slave_STOPF>
 800215c:	e04c      	b.n	80021f8 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800215e:	7bbb      	ldrb	r3, [r7, #14]
 8002160:	2b21      	cmp	r3, #33	; 0x21
 8002162:	d002      	beq.n	800216a <HAL_I2C_EV_IRQHandler+0x212>
 8002164:	7bbb      	ldrb	r3, [r7, #14]
 8002166:	2b29      	cmp	r3, #41	; 0x29
 8002168:	d120      	bne.n	80021ac <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800216a:	69fb      	ldr	r3, [r7, #28]
 800216c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002170:	2b00      	cmp	r3, #0
 8002172:	d00d      	beq.n	8002190 <HAL_I2C_EV_IRQHandler+0x238>
 8002174:	697b      	ldr	r3, [r7, #20]
 8002176:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800217a:	2b00      	cmp	r3, #0
 800217c:	d008      	beq.n	8002190 <HAL_I2C_EV_IRQHandler+0x238>
 800217e:	69fb      	ldr	r3, [r7, #28]
 8002180:	f003 0304 	and.w	r3, r3, #4
 8002184:	2b00      	cmp	r3, #0
 8002186:	d103      	bne.n	8002190 <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8002188:	6878      	ldr	r0, [r7, #4]
 800218a:	f000 fee5 	bl	8002f58 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800218e:	e032      	b.n	80021f6 <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002190:	69fb      	ldr	r3, [r7, #28]
 8002192:	f003 0304 	and.w	r3, r3, #4
 8002196:	2b00      	cmp	r3, #0
 8002198:	d02d      	beq.n	80021f6 <HAL_I2C_EV_IRQHandler+0x29e>
 800219a:	697b      	ldr	r3, [r7, #20]
 800219c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d028      	beq.n	80021f6 <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80021a4:	6878      	ldr	r0, [r7, #4]
 80021a6:	f000 ff14 	bl	8002fd2 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80021aa:	e024      	b.n	80021f6 <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80021ac:	69fb      	ldr	r3, [r7, #28]
 80021ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d00d      	beq.n	80021d2 <HAL_I2C_EV_IRQHandler+0x27a>
 80021b6:	697b      	ldr	r3, [r7, #20]
 80021b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d008      	beq.n	80021d2 <HAL_I2C_EV_IRQHandler+0x27a>
 80021c0:	69fb      	ldr	r3, [r7, #28]
 80021c2:	f003 0304 	and.w	r3, r3, #4
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d103      	bne.n	80021d2 <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80021ca:	6878      	ldr	r0, [r7, #4]
 80021cc:	f000 ff22 	bl	8003014 <I2C_SlaveReceive_RXNE>
 80021d0:	e012      	b.n	80021f8 <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80021d2:	69fb      	ldr	r3, [r7, #28]
 80021d4:	f003 0304 	and.w	r3, r3, #4
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d00d      	beq.n	80021f8 <HAL_I2C_EV_IRQHandler+0x2a0>
 80021dc:	697b      	ldr	r3, [r7, #20]
 80021de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d008      	beq.n	80021f8 <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80021e6:	6878      	ldr	r0, [r7, #4]
 80021e8:	f000 ff52 	bl	8003090 <I2C_SlaveReceive_BTF>
 80021ec:	e004      	b.n	80021f8 <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 80021ee:	bf00      	nop
 80021f0:	e002      	b.n	80021f8 <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80021f2:	bf00      	nop
 80021f4:	e000      	b.n	80021f8 <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80021f6:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80021f8:	3720      	adds	r7, #32
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}

080021fe <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80021fe:	b580      	push	{r7, lr}
 8002200:	b08a      	sub	sp, #40	; 0x28
 8002202:	af00      	add	r7, sp, #0
 8002204:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	695b      	ldr	r3, [r3, #20]
 800220c:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8002216:	2300      	movs	r3, #0
 8002218:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002220:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002222:	6a3b      	ldr	r3, [r7, #32]
 8002224:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002228:	2b00      	cmp	r3, #0
 800222a:	d00d      	beq.n	8002248 <HAL_I2C_ER_IRQHandler+0x4a>
 800222c:	69fb      	ldr	r3, [r7, #28]
 800222e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002232:	2b00      	cmp	r3, #0
 8002234:	d008      	beq.n	8002248 <HAL_I2C_ER_IRQHandler+0x4a>
  {
    error |= HAL_I2C_ERROR_BERR;
 8002236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002238:	f043 0301 	orr.w	r3, r3, #1
 800223c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002246:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002248:	6a3b      	ldr	r3, [r7, #32]
 800224a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800224e:	2b00      	cmp	r3, #0
 8002250:	d00d      	beq.n	800226e <HAL_I2C_ER_IRQHandler+0x70>
 8002252:	69fb      	ldr	r3, [r7, #28]
 8002254:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002258:	2b00      	cmp	r3, #0
 800225a:	d008      	beq.n	800226e <HAL_I2C_ER_IRQHandler+0x70>
  {
    error |= HAL_I2C_ERROR_ARLO;
 800225c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800225e:	f043 0302 	orr.w	r3, r3, #2
 8002262:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f46f 7200 	mvn.w	r2, #512	; 0x200
 800226c:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800226e:	6a3b      	ldr	r3, [r7, #32]
 8002270:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002274:	2b00      	cmp	r3, #0
 8002276:	d03e      	beq.n	80022f6 <HAL_I2C_ER_IRQHandler+0xf8>
 8002278:	69fb      	ldr	r3, [r7, #28]
 800227a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800227e:	2b00      	cmp	r3, #0
 8002280:	d039      	beq.n	80022f6 <HAL_I2C_ER_IRQHandler+0xf8>
  {
    tmp1 = CurrentMode;
 8002282:	7efb      	ldrb	r3, [r7, #27]
 8002284:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800228a:	b29b      	uxth	r3, r3
 800228c:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002294:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800229a:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 800229c:	7ebb      	ldrb	r3, [r7, #26]
 800229e:	2b20      	cmp	r3, #32
 80022a0:	d112      	bne.n	80022c8 <HAL_I2C_ER_IRQHandler+0xca>
 80022a2:	697b      	ldr	r3, [r7, #20]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d10f      	bne.n	80022c8 <HAL_I2C_ER_IRQHandler+0xca>
 80022a8:	7cfb      	ldrb	r3, [r7, #19]
 80022aa:	2b21      	cmp	r3, #33	; 0x21
 80022ac:	d008      	beq.n	80022c0 <HAL_I2C_ER_IRQHandler+0xc2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80022ae:	7cfb      	ldrb	r3, [r7, #19]
 80022b0:	2b29      	cmp	r3, #41	; 0x29
 80022b2:	d005      	beq.n	80022c0 <HAL_I2C_ER_IRQHandler+0xc2>
 80022b4:	7cfb      	ldrb	r3, [r7, #19]
 80022b6:	2b28      	cmp	r3, #40	; 0x28
 80022b8:	d106      	bne.n	80022c8 <HAL_I2C_ER_IRQHandler+0xca>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	2b21      	cmp	r3, #33	; 0x21
 80022be:	d103      	bne.n	80022c8 <HAL_I2C_ER_IRQHandler+0xca>
    {
      I2C_Slave_AF(hi2c);
 80022c0:	6878      	ldr	r0, [r7, #4]
 80022c2:	f001 f87f 	bl	80033c4 <I2C_Slave_AF>
 80022c6:	e016      	b.n	80022f6 <HAL_I2C_ER_IRQHandler+0xf8>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80022d0:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 80022d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d4:	f043 0304 	orr.w	r3, r3, #4
 80022d8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80022da:	7efb      	ldrb	r3, [r7, #27]
 80022dc:	2b10      	cmp	r3, #16
 80022de:	d002      	beq.n	80022e6 <HAL_I2C_ER_IRQHandler+0xe8>
 80022e0:	7efb      	ldrb	r3, [r7, #27]
 80022e2:	2b40      	cmp	r3, #64	; 0x40
 80022e4:	d107      	bne.n	80022f6 <HAL_I2C_ER_IRQHandler+0xf8>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	681a      	ldr	r2, [r3, #0]
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022f4:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80022f6:	6a3b      	ldr	r3, [r7, #32]
 80022f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d00d      	beq.n	800231c <HAL_I2C_ER_IRQHandler+0x11e>
 8002300:	69fb      	ldr	r3, [r7, #28]
 8002302:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002306:	2b00      	cmp	r3, #0
 8002308:	d008      	beq.n	800231c <HAL_I2C_ER_IRQHandler+0x11e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800230a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800230c:	f043 0308 	orr.w	r3, r3, #8
 8002310:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 800231a:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 800231c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800231e:	2b00      	cmp	r3, #0
 8002320:	d008      	beq.n	8002334 <HAL_I2C_ER_IRQHandler+0x136>
  {
    hi2c->ErrorCode |= error;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002328:	431a      	orrs	r2, r3
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 800232e:	6878      	ldr	r0, [r7, #4]
 8002330:	f001 f8b8 	bl	80034a4 <I2C_ITError>
  }
}
 8002334:	bf00      	nop
 8002336:	3728      	adds	r7, #40	; 0x28
 8002338:	46bd      	mov	sp, r7
 800233a:	bd80      	pop	{r7, pc}

0800233c <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800233c:	b480      	push	{r7}
 800233e:	b083      	sub	sp, #12
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8002344:	bf00      	nop
 8002346:	370c      	adds	r7, #12
 8002348:	46bd      	mov	sp, r7
 800234a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234e:	4770      	bx	lr

08002350 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002350:	b480      	push	{r7}
 8002352:	b083      	sub	sp, #12
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8002358:	bf00      	nop
 800235a:	370c      	adds	r7, #12
 800235c:	46bd      	mov	sp, r7
 800235e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002362:	4770      	bx	lr

08002364 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002364:	b480      	push	{r7}
 8002366:	b083      	sub	sp, #12
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800236c:	bf00      	nop
 800236e:	370c      	adds	r7, #12
 8002370:	46bd      	mov	sp, r7
 8002372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002376:	4770      	bx	lr

08002378 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002378:	b480      	push	{r7}
 800237a:	b083      	sub	sp, #12
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002380:	bf00      	nop
 8002382:	370c      	adds	r7, #12
 8002384:	46bd      	mov	sp, r7
 8002386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238a:	4770      	bx	lr

0800238c <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800238c:	b480      	push	{r7}
 800238e:	b083      	sub	sp, #12
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
 8002394:	460b      	mov	r3, r1
 8002396:	70fb      	strb	r3, [r7, #3]
 8002398:	4613      	mov	r3, r2
 800239a:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800239c:	bf00      	nop
 800239e:	370c      	adds	r7, #12
 80023a0:	46bd      	mov	sp, r7
 80023a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a6:	4770      	bx	lr

080023a8 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80023a8:	b480      	push	{r7}
 80023aa:	b083      	sub	sp, #12
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80023b0:	bf00      	nop
 80023b2:	370c      	adds	r7, #12
 80023b4:	46bd      	mov	sp, r7
 80023b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ba:	4770      	bx	lr

080023bc <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80023bc:	b480      	push	{r7}
 80023be:	b083      	sub	sp, #12
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80023c4:	bf00      	nop
 80023c6:	370c      	adds	r7, #12
 80023c8:	46bd      	mov	sp, r7
 80023ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ce:	4770      	bx	lr

080023d0 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80023d0:	b480      	push	{r7}
 80023d2:	b083      	sub	sp, #12
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80023d8:	bf00      	nop
 80023da:	370c      	adds	r7, #12
 80023dc:	46bd      	mov	sp, r7
 80023de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e2:	4770      	bx	lr

080023e4 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80023e4:	b480      	push	{r7}
 80023e6:	b083      	sub	sp, #12
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80023ec:	bf00      	nop
 80023ee:	370c      	adds	r7, #12
 80023f0:	46bd      	mov	sp, r7
 80023f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f6:	4770      	bx	lr

080023f8 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80023f8:	b480      	push	{r7}
 80023fa:	b083      	sub	sp, #12
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002400:	bf00      	nop
 8002402:	370c      	adds	r7, #12
 8002404:	46bd      	mov	sp, r7
 8002406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240a:	4770      	bx	lr

0800240c <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800240c:	b480      	push	{r7}
 800240e:	b083      	sub	sp, #12
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800241a:	b2db      	uxtb	r3, r3
}
 800241c:	4618      	mov	r0, r3
 800241e:	370c      	adds	r7, #12
 8002420:	46bd      	mov	sp, r7
 8002422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002426:	4770      	bx	lr

08002428 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8002428:	b480      	push	{r7}
 800242a:	b083      	sub	sp, #12
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002434:	4618      	mov	r0, r3
 8002436:	370c      	adds	r7, #12
 8002438:	46bd      	mov	sp, r7
 800243a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243e:	4770      	bx	lr

08002440 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b084      	sub	sp, #16
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800244e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002456:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800245c:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002462:	2b00      	cmp	r3, #0
 8002464:	d150      	bne.n	8002508 <I2C_MasterTransmit_TXE+0xc8>
 8002466:	7bfb      	ldrb	r3, [r7, #15]
 8002468:	2b21      	cmp	r3, #33	; 0x21
 800246a:	d14d      	bne.n	8002508 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800246c:	68bb      	ldr	r3, [r7, #8]
 800246e:	2b08      	cmp	r3, #8
 8002470:	d01d      	beq.n	80024ae <I2C_MasterTransmit_TXE+0x6e>
 8002472:	68bb      	ldr	r3, [r7, #8]
 8002474:	2b20      	cmp	r3, #32
 8002476:	d01a      	beq.n	80024ae <I2C_MasterTransmit_TXE+0x6e>
 8002478:	68bb      	ldr	r3, [r7, #8]
 800247a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800247e:	d016      	beq.n	80024ae <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	685a      	ldr	r2, [r3, #4]
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800248e:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2211      	movs	r2, #17
 8002494:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2200      	movs	r2, #0
 800249a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2220      	movs	r2, #32
 80024a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80024a6:	6878      	ldr	r0, [r7, #4]
 80024a8:	f7ff ff48 	bl	800233c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80024ac:	e060      	b.n	8002570 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	685a      	ldr	r2, [r3, #4]
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80024bc:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	681a      	ldr	r2, [r3, #0]
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024cc:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2200      	movs	r2, #0
 80024d2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2220      	movs	r2, #32
 80024d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80024e2:	b2db      	uxtb	r3, r3
 80024e4:	2b40      	cmp	r3, #64	; 0x40
 80024e6:	d107      	bne.n	80024f8 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2200      	movs	r2, #0
 80024ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80024f0:	6878      	ldr	r0, [r7, #4]
 80024f2:	f7ff ff63 	bl	80023bc <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80024f6:	e03b      	b.n	8002570 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2200      	movs	r2, #0
 80024fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002500:	6878      	ldr	r0, [r7, #4]
 8002502:	f7ff ff1b 	bl	800233c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002506:	e033      	b.n	8002570 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8002508:	7bfb      	ldrb	r3, [r7, #15]
 800250a:	2b21      	cmp	r3, #33	; 0x21
 800250c:	d005      	beq.n	800251a <I2C_MasterTransmit_TXE+0xda>
 800250e:	7bbb      	ldrb	r3, [r7, #14]
 8002510:	2b40      	cmp	r3, #64	; 0x40
 8002512:	d12d      	bne.n	8002570 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8002514:	7bfb      	ldrb	r3, [r7, #15]
 8002516:	2b22      	cmp	r3, #34	; 0x22
 8002518:	d12a      	bne.n	8002570 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800251e:	b29b      	uxth	r3, r3
 8002520:	2b00      	cmp	r3, #0
 8002522:	d108      	bne.n	8002536 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	685a      	ldr	r2, [r3, #4]
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002532:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8002534:	e01c      	b.n	8002570 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800253c:	b2db      	uxtb	r3, r3
 800253e:	2b40      	cmp	r3, #64	; 0x40
 8002540:	d103      	bne.n	800254a <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002542:	6878      	ldr	r0, [r7, #4]
 8002544:	f000 f88e 	bl	8002664 <I2C_MemoryTransmit_TXE_BTF>
}
 8002548:	e012      	b.n	8002570 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800254e:	781a      	ldrb	r2, [r3, #0]
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800255a:	1c5a      	adds	r2, r3, #1
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002564:	b29b      	uxth	r3, r3
 8002566:	3b01      	subs	r3, #1
 8002568:	b29a      	uxth	r2, r3
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800256e:	e7ff      	b.n	8002570 <I2C_MasterTransmit_TXE+0x130>
 8002570:	bf00      	nop
 8002572:	3710      	adds	r7, #16
 8002574:	46bd      	mov	sp, r7
 8002576:	bd80      	pop	{r7, pc}

08002578 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b084      	sub	sp, #16
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002584:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800258c:	b2db      	uxtb	r3, r3
 800258e:	2b21      	cmp	r3, #33	; 0x21
 8002590:	d164      	bne.n	800265c <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002596:	b29b      	uxth	r3, r3
 8002598:	2b00      	cmp	r3, #0
 800259a:	d012      	beq.n	80025c2 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025a0:	781a      	ldrb	r2, [r3, #0]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ac:	1c5a      	adds	r2, r3, #1
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025b6:	b29b      	uxth	r3, r3
 80025b8:	3b01      	subs	r3, #1
 80025ba:	b29a      	uxth	r2, r3
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80025c0:	e04c      	b.n	800265c <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	2b08      	cmp	r3, #8
 80025c6:	d01d      	beq.n	8002604 <I2C_MasterTransmit_BTF+0x8c>
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	2b20      	cmp	r3, #32
 80025cc:	d01a      	beq.n	8002604 <I2C_MasterTransmit_BTF+0x8c>
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80025d4:	d016      	beq.n	8002604 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	685a      	ldr	r2, [r3, #4]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80025e4:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2211      	movs	r2, #17
 80025ea:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2200      	movs	r2, #0
 80025f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2220      	movs	r2, #32
 80025f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80025fc:	6878      	ldr	r0, [r7, #4]
 80025fe:	f7ff fe9d 	bl	800233c <HAL_I2C_MasterTxCpltCallback>
}
 8002602:	e02b      	b.n	800265c <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	685a      	ldr	r2, [r3, #4]
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002612:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	681a      	ldr	r2, [r3, #0]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002622:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2200      	movs	r2, #0
 8002628:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2220      	movs	r2, #32
 800262e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002638:	b2db      	uxtb	r3, r3
 800263a:	2b40      	cmp	r3, #64	; 0x40
 800263c:	d107      	bne.n	800264e <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2200      	movs	r2, #0
 8002642:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8002646:	6878      	ldr	r0, [r7, #4]
 8002648:	f7ff feb8 	bl	80023bc <HAL_I2C_MemTxCpltCallback>
}
 800264c:	e006      	b.n	800265c <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2200      	movs	r2, #0
 8002652:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8002656:	6878      	ldr	r0, [r7, #4]
 8002658:	f7ff fe70 	bl	800233c <HAL_I2C_MasterTxCpltCallback>
}
 800265c:	bf00      	nop
 800265e:	3710      	adds	r7, #16
 8002660:	46bd      	mov	sp, r7
 8002662:	bd80      	pop	{r7, pc}

08002664 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b084      	sub	sp, #16
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002672:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002678:	2b00      	cmp	r3, #0
 800267a:	d11d      	bne.n	80026b8 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002680:	2b01      	cmp	r3, #1
 8002682:	d10b      	bne.n	800269c <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002688:	b2da      	uxtb	r2, r3
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002694:	1c9a      	adds	r2, r3, #2
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 800269a:	e073      	b.n	8002784 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026a0:	b29b      	uxth	r3, r3
 80026a2:	121b      	asrs	r3, r3, #8
 80026a4:	b2da      	uxtb	r2, r3
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026b0:	1c5a      	adds	r2, r3, #1
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	651a      	str	r2, [r3, #80]	; 0x50
}
 80026b6:	e065      	b.n	8002784 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026bc:	2b01      	cmp	r3, #1
 80026be:	d10b      	bne.n	80026d8 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026c4:	b2da      	uxtb	r2, r3
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026d0:	1c5a      	adds	r2, r3, #1
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	651a      	str	r2, [r3, #80]	; 0x50
}
 80026d6:	e055      	b.n	8002784 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026dc:	2b02      	cmp	r3, #2
 80026de:	d151      	bne.n	8002784 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80026e0:	7bfb      	ldrb	r3, [r7, #15]
 80026e2:	2b22      	cmp	r3, #34	; 0x22
 80026e4:	d10d      	bne.n	8002702 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	681a      	ldr	r2, [r3, #0]
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80026f4:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026fa:	1c5a      	adds	r2, r3, #1
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002700:	e040      	b.n	8002784 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002706:	b29b      	uxth	r3, r3
 8002708:	2b00      	cmp	r3, #0
 800270a:	d015      	beq.n	8002738 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 800270c:	7bfb      	ldrb	r3, [r7, #15]
 800270e:	2b21      	cmp	r3, #33	; 0x21
 8002710:	d112      	bne.n	8002738 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002716:	781a      	ldrb	r2, [r3, #0]
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002722:	1c5a      	adds	r2, r3, #1
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800272c:	b29b      	uxth	r3, r3
 800272e:	3b01      	subs	r3, #1
 8002730:	b29a      	uxth	r2, r3
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002736:	e025      	b.n	8002784 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800273c:	b29b      	uxth	r3, r3
 800273e:	2b00      	cmp	r3, #0
 8002740:	d120      	bne.n	8002784 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8002742:	7bfb      	ldrb	r3, [r7, #15]
 8002744:	2b21      	cmp	r3, #33	; 0x21
 8002746:	d11d      	bne.n	8002784 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	685a      	ldr	r2, [r3, #4]
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002756:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	681a      	ldr	r2, [r3, #0]
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002766:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2200      	movs	r2, #0
 800276c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2220      	movs	r2, #32
 8002772:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2200      	movs	r2, #0
 800277a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800277e:	6878      	ldr	r0, [r7, #4]
 8002780:	f7ff fe1c 	bl	80023bc <HAL_I2C_MemTxCpltCallback>
}
 8002784:	bf00      	nop
 8002786:	3710      	adds	r7, #16
 8002788:	46bd      	mov	sp, r7
 800278a:	bd80      	pop	{r7, pc}

0800278c <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b084      	sub	sp, #16
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800279a:	b2db      	uxtb	r3, r3
 800279c:	2b22      	cmp	r3, #34	; 0x22
 800279e:	f040 80ac 	bne.w	80028fa <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027a6:	b29b      	uxth	r3, r3
 80027a8:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	2b03      	cmp	r3, #3
 80027ae:	d921      	bls.n	80027f4 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	691a      	ldr	r2, [r3, #16]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ba:	b2d2      	uxtb	r2, r2
 80027bc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027c2:	1c5a      	adds	r2, r3, #1
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027cc:	b29b      	uxth	r3, r3
 80027ce:	3b01      	subs	r3, #1
 80027d0:	b29a      	uxth	r2, r3
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027da:	b29b      	uxth	r3, r3
 80027dc:	2b03      	cmp	r3, #3
 80027de:	f040 808c 	bne.w	80028fa <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	685a      	ldr	r2, [r3, #4]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027f0:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 80027f2:	e082      	b.n	80028fa <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027f8:	2b02      	cmp	r3, #2
 80027fa:	d075      	beq.n	80028e8 <I2C_MasterReceive_RXNE+0x15c>
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	2b01      	cmp	r3, #1
 8002800:	d002      	beq.n	8002808 <I2C_MasterReceive_RXNE+0x7c>
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d16f      	bne.n	80028e8 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002808:	6878      	ldr	r0, [r7, #4]
 800280a:	f001 facd 	bl	8003da8 <I2C_WaitOnSTOPRequestThroughIT>
 800280e:	4603      	mov	r3, r0
 8002810:	2b00      	cmp	r3, #0
 8002812:	d142      	bne.n	800289a <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	681a      	ldr	r2, [r3, #0]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002822:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	685a      	ldr	r2, [r3, #4]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002832:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	691a      	ldr	r2, [r3, #16]
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800283e:	b2d2      	uxtb	r2, r2
 8002840:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002846:	1c5a      	adds	r2, r3, #1
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002850:	b29b      	uxth	r3, r3
 8002852:	3b01      	subs	r3, #1
 8002854:	b29a      	uxth	r2, r3
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2220      	movs	r2, #32
 800285e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002868:	b2db      	uxtb	r3, r3
 800286a:	2b40      	cmp	r3, #64	; 0x40
 800286c:	d10a      	bne.n	8002884 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2200      	movs	r2, #0
 8002872:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2200      	movs	r2, #0
 800287a:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 800287c:	6878      	ldr	r0, [r7, #4]
 800287e:	f7ff fda7 	bl	80023d0 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002882:	e03a      	b.n	80028fa <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2200      	movs	r2, #0
 8002888:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2212      	movs	r2, #18
 8002890:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8002892:	6878      	ldr	r0, [r7, #4]
 8002894:	f7ff fd5c 	bl	8002350 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002898:	e02f      	b.n	80028fa <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	685a      	ldr	r2, [r3, #4]
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80028a8:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	691a      	ldr	r2, [r3, #16]
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028b4:	b2d2      	uxtb	r2, r2
 80028b6:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028bc:	1c5a      	adds	r2, r3, #1
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028c6:	b29b      	uxth	r3, r3
 80028c8:	3b01      	subs	r3, #1
 80028ca:	b29a      	uxth	r2, r3
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2220      	movs	r2, #32
 80028d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2200      	movs	r2, #0
 80028dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80028e0:	6878      	ldr	r0, [r7, #4]
 80028e2:	f7ff fd7f 	bl	80023e4 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80028e6:	e008      	b.n	80028fa <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	685a      	ldr	r2, [r3, #4]
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80028f6:	605a      	str	r2, [r3, #4]
}
 80028f8:	e7ff      	b.n	80028fa <I2C_MasterReceive_RXNE+0x16e>
 80028fa:	bf00      	nop
 80028fc:	3710      	adds	r7, #16
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd80      	pop	{r7, pc}

08002902 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002902:	b580      	push	{r7, lr}
 8002904:	b084      	sub	sp, #16
 8002906:	af00      	add	r7, sp, #0
 8002908:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800290e:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002914:	b29b      	uxth	r3, r3
 8002916:	2b04      	cmp	r3, #4
 8002918:	d11b      	bne.n	8002952 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	685a      	ldr	r2, [r3, #4]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002928:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	691a      	ldr	r2, [r3, #16]
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002934:	b2d2      	uxtb	r2, r2
 8002936:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800293c:	1c5a      	adds	r2, r3, #1
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002946:	b29b      	uxth	r3, r3
 8002948:	3b01      	subs	r3, #1
 800294a:	b29a      	uxth	r2, r3
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8002950:	e0bd      	b.n	8002ace <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002956:	b29b      	uxth	r3, r3
 8002958:	2b03      	cmp	r3, #3
 800295a:	d129      	bne.n	80029b0 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	685a      	ldr	r2, [r3, #4]
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800296a:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	2b04      	cmp	r3, #4
 8002970:	d00a      	beq.n	8002988 <I2C_MasterReceive_BTF+0x86>
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	2b02      	cmp	r3, #2
 8002976:	d007      	beq.n	8002988 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	681a      	ldr	r2, [r3, #0]
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002986:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	691a      	ldr	r2, [r3, #16]
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002992:	b2d2      	uxtb	r2, r2
 8002994:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800299a:	1c5a      	adds	r2, r3, #1
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029a4:	b29b      	uxth	r3, r3
 80029a6:	3b01      	subs	r3, #1
 80029a8:	b29a      	uxth	r2, r3
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80029ae:	e08e      	b.n	8002ace <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029b4:	b29b      	uxth	r3, r3
 80029b6:	2b02      	cmp	r3, #2
 80029b8:	d176      	bne.n	8002aa8 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	2b01      	cmp	r3, #1
 80029be:	d002      	beq.n	80029c6 <I2C_MasterReceive_BTF+0xc4>
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	2b10      	cmp	r3, #16
 80029c4:	d108      	bne.n	80029d8 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	681a      	ldr	r2, [r3, #0]
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029d4:	601a      	str	r2, [r3, #0]
 80029d6:	e019      	b.n	8002a0c <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	2b04      	cmp	r3, #4
 80029dc:	d002      	beq.n	80029e4 <I2C_MasterReceive_BTF+0xe2>
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	2b02      	cmp	r3, #2
 80029e2:	d108      	bne.n	80029f6 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	681a      	ldr	r2, [r3, #0]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80029f2:	601a      	str	r2, [r3, #0]
 80029f4:	e00a      	b.n	8002a0c <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	2b10      	cmp	r3, #16
 80029fa:	d007      	beq.n	8002a0c <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	681a      	ldr	r2, [r3, #0]
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a0a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	691a      	ldr	r2, [r3, #16]
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a16:	b2d2      	uxtb	r2, r2
 8002a18:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a1e:	1c5a      	adds	r2, r3, #1
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a28:	b29b      	uxth	r3, r3
 8002a2a:	3b01      	subs	r3, #1
 8002a2c:	b29a      	uxth	r2, r3
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	691a      	ldr	r2, [r3, #16]
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a3c:	b2d2      	uxtb	r2, r2
 8002a3e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a44:	1c5a      	adds	r2, r3, #1
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a4e:	b29b      	uxth	r3, r3
 8002a50:	3b01      	subs	r3, #1
 8002a52:	b29a      	uxth	r2, r3
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	685a      	ldr	r2, [r3, #4]
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002a66:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2220      	movs	r2, #32
 8002a6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002a76:	b2db      	uxtb	r3, r3
 8002a78:	2b40      	cmp	r3, #64	; 0x40
 8002a7a:	d10a      	bne.n	8002a92 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2200      	movs	r2, #0
 8002a80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2200      	movs	r2, #0
 8002a88:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8002a8a:	6878      	ldr	r0, [r7, #4]
 8002a8c:	f7ff fca0 	bl	80023d0 <HAL_I2C_MemRxCpltCallback>
}
 8002a90:	e01d      	b.n	8002ace <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2200      	movs	r2, #0
 8002a96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2212      	movs	r2, #18
 8002a9e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8002aa0:	6878      	ldr	r0, [r7, #4]
 8002aa2:	f7ff fc55 	bl	8002350 <HAL_I2C_MasterRxCpltCallback>
}
 8002aa6:	e012      	b.n	8002ace <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	691a      	ldr	r2, [r3, #16]
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ab2:	b2d2      	uxtb	r2, r2
 8002ab4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aba:	1c5a      	adds	r2, r3, #1
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ac4:	b29b      	uxth	r3, r3
 8002ac6:	3b01      	subs	r3, #1
 8002ac8:	b29a      	uxth	r2, r3
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002ace:	bf00      	nop
 8002ad0:	3710      	adds	r7, #16
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bd80      	pop	{r7, pc}

08002ad6 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8002ad6:	b480      	push	{r7}
 8002ad8:	b083      	sub	sp, #12
 8002ada:	af00      	add	r7, sp, #0
 8002adc:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002ae4:	b2db      	uxtb	r3, r3
 8002ae6:	2b40      	cmp	r3, #64	; 0x40
 8002ae8:	d117      	bne.n	8002b1a <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d109      	bne.n	8002b06 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002af6:	b2db      	uxtb	r3, r3
 8002af8:	461a      	mov	r2, r3
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002b02:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8002b04:	e067      	b.n	8002bd6 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b0a:	b2db      	uxtb	r3, r3
 8002b0c:	f043 0301 	orr.w	r3, r3, #1
 8002b10:	b2da      	uxtb	r2, r3
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	611a      	str	r2, [r3, #16]
}
 8002b18:	e05d      	b.n	8002bd6 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	691b      	ldr	r3, [r3, #16]
 8002b1e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002b22:	d133      	bne.n	8002b8c <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b2a:	b2db      	uxtb	r3, r3
 8002b2c:	2b21      	cmp	r3, #33	; 0x21
 8002b2e:	d109      	bne.n	8002b44 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b34:	b2db      	uxtb	r3, r3
 8002b36:	461a      	mov	r2, r3
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002b40:	611a      	str	r2, [r3, #16]
 8002b42:	e008      	b.n	8002b56 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b48:	b2db      	uxtb	r3, r3
 8002b4a:	f043 0301 	orr.w	r3, r3, #1
 8002b4e:	b2da      	uxtb	r2, r3
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d004      	beq.n	8002b68 <I2C_Master_SB+0x92>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d108      	bne.n	8002b7a <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d032      	beq.n	8002bd6 <I2C_Master_SB+0x100>
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d02d      	beq.n	8002bd6 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	685a      	ldr	r2, [r3, #4]
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002b88:	605a      	str	r2, [r3, #4]
}
 8002b8a:	e024      	b.n	8002bd6 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d10e      	bne.n	8002bb2 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b98:	b29b      	uxth	r3, r3
 8002b9a:	11db      	asrs	r3, r3, #7
 8002b9c:	b2db      	uxtb	r3, r3
 8002b9e:	f003 0306 	and.w	r3, r3, #6
 8002ba2:	b2db      	uxtb	r3, r3
 8002ba4:	f063 030f 	orn	r3, r3, #15
 8002ba8:	b2da      	uxtb	r2, r3
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	611a      	str	r2, [r3, #16]
}
 8002bb0:	e011      	b.n	8002bd6 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bb6:	2b01      	cmp	r3, #1
 8002bb8:	d10d      	bne.n	8002bd6 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bbe:	b29b      	uxth	r3, r3
 8002bc0:	11db      	asrs	r3, r3, #7
 8002bc2:	b2db      	uxtb	r3, r3
 8002bc4:	f003 0306 	and.w	r3, r3, #6
 8002bc8:	b2db      	uxtb	r3, r3
 8002bca:	f063 030e 	orn	r3, r3, #14
 8002bce:	b2da      	uxtb	r2, r3
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	611a      	str	r2, [r3, #16]
}
 8002bd6:	bf00      	nop
 8002bd8:	370c      	adds	r7, #12
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be0:	4770      	bx	lr

08002be2 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8002be2:	b480      	push	{r7}
 8002be4:	b083      	sub	sp, #12
 8002be6:	af00      	add	r7, sp, #0
 8002be8:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bee:	b2da      	uxtb	r2, r3
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d004      	beq.n	8002c08 <I2C_Master_ADD10+0x26>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d108      	bne.n	8002c1a <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d00c      	beq.n	8002c2a <I2C_Master_ADD10+0x48>
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d007      	beq.n	8002c2a <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	685a      	ldr	r2, [r3, #4]
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002c28:	605a      	str	r2, [r3, #4]
  }
}
 8002c2a:	bf00      	nop
 8002c2c:	370c      	adds	r7, #12
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c34:	4770      	bx	lr

08002c36 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8002c36:	b480      	push	{r7}
 8002c38:	b091      	sub	sp, #68	; 0x44
 8002c3a:	af00      	add	r7, sp, #0
 8002c3c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002c44:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c4c:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c52:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c5a:	b2db      	uxtb	r3, r3
 8002c5c:	2b22      	cmp	r3, #34	; 0x22
 8002c5e:	f040 8169 	bne.w	8002f34 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d10f      	bne.n	8002c8a <I2C_Master_ADDR+0x54>
 8002c6a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002c6e:	2b40      	cmp	r3, #64	; 0x40
 8002c70:	d10b      	bne.n	8002c8a <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c72:	2300      	movs	r3, #0
 8002c74:	633b      	str	r3, [r7, #48]	; 0x30
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	695b      	ldr	r3, [r3, #20]
 8002c7c:	633b      	str	r3, [r7, #48]	; 0x30
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	699b      	ldr	r3, [r3, #24]
 8002c84:	633b      	str	r3, [r7, #48]	; 0x30
 8002c86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c88:	e160      	b.n	8002f4c <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d11d      	bne.n	8002cce <I2C_Master_ADDR+0x98>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	691b      	ldr	r3, [r3, #16]
 8002c96:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002c9a:	d118      	bne.n	8002cce <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	695b      	ldr	r3, [r3, #20]
 8002ca6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	699b      	ldr	r3, [r3, #24]
 8002cae:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002cb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	681a      	ldr	r2, [r3, #0]
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002cc0:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cc6:	1c5a      	adds	r2, r3, #1
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	651a      	str	r2, [r3, #80]	; 0x50
 8002ccc:	e13e      	b.n	8002f4c <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cd2:	b29b      	uxth	r3, r3
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d113      	bne.n	8002d00 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002cd8:	2300      	movs	r3, #0
 8002cda:	62bb      	str	r3, [r7, #40]	; 0x28
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	695b      	ldr	r3, [r3, #20]
 8002ce2:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	699b      	ldr	r3, [r3, #24]
 8002cea:	62bb      	str	r3, [r7, #40]	; 0x28
 8002cec:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	681a      	ldr	r2, [r3, #0]
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cfc:	601a      	str	r2, [r3, #0]
 8002cfe:	e115      	b.n	8002f2c <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d04:	b29b      	uxth	r3, r3
 8002d06:	2b01      	cmp	r3, #1
 8002d08:	f040 808a 	bne.w	8002e20 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8002d0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d0e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002d12:	d137      	bne.n	8002d84 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	681a      	ldr	r2, [r3, #0]
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d22:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d2e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d32:	d113      	bne.n	8002d5c <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	681a      	ldr	r2, [r3, #0]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d42:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d44:	2300      	movs	r3, #0
 8002d46:	627b      	str	r3, [r7, #36]	; 0x24
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	695b      	ldr	r3, [r3, #20]
 8002d4e:	627b      	str	r3, [r7, #36]	; 0x24
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	699b      	ldr	r3, [r3, #24]
 8002d56:	627b      	str	r3, [r7, #36]	; 0x24
 8002d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d5a:	e0e7      	b.n	8002f2c <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	623b      	str	r3, [r7, #32]
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	695b      	ldr	r3, [r3, #20]
 8002d66:	623b      	str	r3, [r7, #32]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	699b      	ldr	r3, [r3, #24]
 8002d6e:	623b      	str	r3, [r7, #32]
 8002d70:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	681a      	ldr	r2, [r3, #0]
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d80:	601a      	str	r2, [r3, #0]
 8002d82:	e0d3      	b.n	8002f2c <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8002d84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d86:	2b08      	cmp	r3, #8
 8002d88:	d02e      	beq.n	8002de8 <I2C_Master_ADDR+0x1b2>
 8002d8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d8c:	2b20      	cmp	r3, #32
 8002d8e:	d02b      	beq.n	8002de8 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8002d90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d92:	2b12      	cmp	r3, #18
 8002d94:	d102      	bne.n	8002d9c <I2C_Master_ADDR+0x166>
 8002d96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d98:	2b01      	cmp	r3, #1
 8002d9a:	d125      	bne.n	8002de8 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002d9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d9e:	2b04      	cmp	r3, #4
 8002da0:	d00e      	beq.n	8002dc0 <I2C_Master_ADDR+0x18a>
 8002da2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002da4:	2b02      	cmp	r3, #2
 8002da6:	d00b      	beq.n	8002dc0 <I2C_Master_ADDR+0x18a>
 8002da8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002daa:	2b10      	cmp	r3, #16
 8002dac:	d008      	beq.n	8002dc0 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	681a      	ldr	r2, [r3, #0]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002dbc:	601a      	str	r2, [r3, #0]
 8002dbe:	e007      	b.n	8002dd0 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	681a      	ldr	r2, [r3, #0]
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002dce:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	61fb      	str	r3, [r7, #28]
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	695b      	ldr	r3, [r3, #20]
 8002dda:	61fb      	str	r3, [r7, #28]
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	699b      	ldr	r3, [r3, #24]
 8002de2:	61fb      	str	r3, [r7, #28]
 8002de4:	69fb      	ldr	r3, [r7, #28]
 8002de6:	e0a1      	b.n	8002f2c <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	681a      	ldr	r2, [r3, #0]
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002df6:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002df8:	2300      	movs	r3, #0
 8002dfa:	61bb      	str	r3, [r7, #24]
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	695b      	ldr	r3, [r3, #20]
 8002e02:	61bb      	str	r3, [r7, #24]
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	699b      	ldr	r3, [r3, #24]
 8002e0a:	61bb      	str	r3, [r7, #24]
 8002e0c:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	681a      	ldr	r2, [r3, #0]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e1c:	601a      	str	r2, [r3, #0]
 8002e1e:	e085      	b.n	8002f2c <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e24:	b29b      	uxth	r3, r3
 8002e26:	2b02      	cmp	r3, #2
 8002e28:	d14d      	bne.n	8002ec6 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002e2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e2c:	2b04      	cmp	r3, #4
 8002e2e:	d016      	beq.n	8002e5e <I2C_Master_ADDR+0x228>
 8002e30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e32:	2b02      	cmp	r3, #2
 8002e34:	d013      	beq.n	8002e5e <I2C_Master_ADDR+0x228>
 8002e36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e38:	2b10      	cmp	r3, #16
 8002e3a:	d010      	beq.n	8002e5e <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	681a      	ldr	r2, [r3, #0]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e4a:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	681a      	ldr	r2, [r3, #0]
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e5a:	601a      	str	r2, [r3, #0]
 8002e5c:	e007      	b.n	8002e6e <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	681a      	ldr	r2, [r3, #0]
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002e6c:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e78:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e7c:	d117      	bne.n	8002eae <I2C_Master_ADDR+0x278>
 8002e7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e80:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002e84:	d00b      	beq.n	8002e9e <I2C_Master_ADDR+0x268>
 8002e86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e88:	2b01      	cmp	r3, #1
 8002e8a:	d008      	beq.n	8002e9e <I2C_Master_ADDR+0x268>
 8002e8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e8e:	2b08      	cmp	r3, #8
 8002e90:	d005      	beq.n	8002e9e <I2C_Master_ADDR+0x268>
 8002e92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e94:	2b10      	cmp	r3, #16
 8002e96:	d002      	beq.n	8002e9e <I2C_Master_ADDR+0x268>
 8002e98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e9a:	2b20      	cmp	r3, #32
 8002e9c:	d107      	bne.n	8002eae <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	685a      	ldr	r2, [r3, #4]
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002eac:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002eae:	2300      	movs	r3, #0
 8002eb0:	617b      	str	r3, [r7, #20]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	695b      	ldr	r3, [r3, #20]
 8002eb8:	617b      	str	r3, [r7, #20]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	699b      	ldr	r3, [r3, #24]
 8002ec0:	617b      	str	r3, [r7, #20]
 8002ec2:	697b      	ldr	r3, [r7, #20]
 8002ec4:	e032      	b.n	8002f2c <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	681a      	ldr	r2, [r3, #0]
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002ed4:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ee0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ee4:	d117      	bne.n	8002f16 <I2C_Master_ADDR+0x2e0>
 8002ee6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ee8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002eec:	d00b      	beq.n	8002f06 <I2C_Master_ADDR+0x2d0>
 8002eee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ef0:	2b01      	cmp	r3, #1
 8002ef2:	d008      	beq.n	8002f06 <I2C_Master_ADDR+0x2d0>
 8002ef4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ef6:	2b08      	cmp	r3, #8
 8002ef8:	d005      	beq.n	8002f06 <I2C_Master_ADDR+0x2d0>
 8002efa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002efc:	2b10      	cmp	r3, #16
 8002efe:	d002      	beq.n	8002f06 <I2C_Master_ADDR+0x2d0>
 8002f00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f02:	2b20      	cmp	r3, #32
 8002f04:	d107      	bne.n	8002f16 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	685a      	ldr	r2, [r3, #4]
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002f14:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f16:	2300      	movs	r3, #0
 8002f18:	613b      	str	r3, [r7, #16]
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	695b      	ldr	r3, [r3, #20]
 8002f20:	613b      	str	r3, [r7, #16]
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	699b      	ldr	r3, [r3, #24]
 8002f28:	613b      	str	r3, [r7, #16]
 8002f2a:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8002f32:	e00b      	b.n	8002f4c <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f34:	2300      	movs	r3, #0
 8002f36:	60fb      	str	r3, [r7, #12]
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	695b      	ldr	r3, [r3, #20]
 8002f3e:	60fb      	str	r3, [r7, #12]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	699b      	ldr	r3, [r3, #24]
 8002f46:	60fb      	str	r3, [r7, #12]
 8002f48:	68fb      	ldr	r3, [r7, #12]
}
 8002f4a:	e7ff      	b.n	8002f4c <I2C_Master_ADDR+0x316>
 8002f4c:	bf00      	nop
 8002f4e:	3744      	adds	r7, #68	; 0x44
 8002f50:	46bd      	mov	sp, r7
 8002f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f56:	4770      	bx	lr

08002f58 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b084      	sub	sp, #16
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f66:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f6c:	b29b      	uxth	r3, r3
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d02b      	beq.n	8002fca <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f76:	781a      	ldrb	r2, [r3, #0]
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f82:	1c5a      	adds	r2, r3, #1
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f8c:	b29b      	uxth	r3, r3
 8002f8e:	3b01      	subs	r3, #1
 8002f90:	b29a      	uxth	r2, r3
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f9a:	b29b      	uxth	r3, r3
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d114      	bne.n	8002fca <I2C_SlaveTransmit_TXE+0x72>
 8002fa0:	7bfb      	ldrb	r3, [r7, #15]
 8002fa2:	2b29      	cmp	r3, #41	; 0x29
 8002fa4:	d111      	bne.n	8002fca <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	685a      	ldr	r2, [r3, #4]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002fb4:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2221      	movs	r2, #33	; 0x21
 8002fba:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2228      	movs	r2, #40	; 0x28
 8002fc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002fc4:	6878      	ldr	r0, [r7, #4]
 8002fc6:	f7ff f9cd 	bl	8002364 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8002fca:	bf00      	nop
 8002fcc:	3710      	adds	r7, #16
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}

08002fd2 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002fd2:	b480      	push	{r7}
 8002fd4:	b083      	sub	sp, #12
 8002fd6:	af00      	add	r7, sp, #0
 8002fd8:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fde:	b29b      	uxth	r3, r3
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d011      	beq.n	8003008 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fe8:	781a      	ldrb	r2, [r3, #0]
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff4:	1c5a      	adds	r2, r3, #1
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ffe:	b29b      	uxth	r3, r3
 8003000:	3b01      	subs	r3, #1
 8003002:	b29a      	uxth	r2, r3
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8003008:	bf00      	nop
 800300a:	370c      	adds	r7, #12
 800300c:	46bd      	mov	sp, r7
 800300e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003012:	4770      	bx	lr

08003014 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b084      	sub	sp, #16
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003022:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003028:	b29b      	uxth	r3, r3
 800302a:	2b00      	cmp	r3, #0
 800302c:	d02c      	beq.n	8003088 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	691a      	ldr	r2, [r3, #16]
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003038:	b2d2      	uxtb	r2, r2
 800303a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003040:	1c5a      	adds	r2, r3, #1
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800304a:	b29b      	uxth	r3, r3
 800304c:	3b01      	subs	r3, #1
 800304e:	b29a      	uxth	r2, r3
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003058:	b29b      	uxth	r3, r3
 800305a:	2b00      	cmp	r3, #0
 800305c:	d114      	bne.n	8003088 <I2C_SlaveReceive_RXNE+0x74>
 800305e:	7bfb      	ldrb	r3, [r7, #15]
 8003060:	2b2a      	cmp	r3, #42	; 0x2a
 8003062:	d111      	bne.n	8003088 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	685a      	ldr	r2, [r3, #4]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003072:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2222      	movs	r2, #34	; 0x22
 8003078:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2228      	movs	r2, #40	; 0x28
 800307e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003082:	6878      	ldr	r0, [r7, #4]
 8003084:	f7ff f978 	bl	8002378 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003088:	bf00      	nop
 800308a:	3710      	adds	r7, #16
 800308c:	46bd      	mov	sp, r7
 800308e:	bd80      	pop	{r7, pc}

08003090 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003090:	b480      	push	{r7}
 8003092:	b083      	sub	sp, #12
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800309c:	b29b      	uxth	r3, r3
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d012      	beq.n	80030c8 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	691a      	ldr	r2, [r3, #16]
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ac:	b2d2      	uxtb	r2, r2
 80030ae:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030b4:	1c5a      	adds	r2, r3, #1
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030be:	b29b      	uxth	r3, r3
 80030c0:	3b01      	subs	r3, #1
 80030c2:	b29a      	uxth	r2, r3
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80030c8:	bf00      	nop
 80030ca:	370c      	adds	r7, #12
 80030cc:	46bd      	mov	sp, r7
 80030ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d2:	4770      	bx	lr

080030d4 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b084      	sub	sp, #16
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
 80030dc:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80030de:	2300      	movs	r3, #0
 80030e0:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030e8:	b2db      	uxtb	r3, r3
 80030ea:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80030ee:	2b28      	cmp	r3, #40	; 0x28
 80030f0:	d125      	bne.n	800313e <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	685a      	ldr	r2, [r3, #4]
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003100:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	f003 0304 	and.w	r3, r3, #4
 8003108:	2b00      	cmp	r3, #0
 800310a:	d101      	bne.n	8003110 <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800310c:	2301      	movs	r3, #1
 800310e:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003116:	2b00      	cmp	r3, #0
 8003118:	d103      	bne.n	8003122 <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	68db      	ldr	r3, [r3, #12]
 800311e:	81bb      	strh	r3, [r7, #12]
 8003120:	e002      	b.n	8003128 <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	699b      	ldr	r3, [r3, #24]
 8003126:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2200      	movs	r2, #0
 800312c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8003130:	89ba      	ldrh	r2, [r7, #12]
 8003132:	7bfb      	ldrb	r3, [r7, #15]
 8003134:	4619      	mov	r1, r3
 8003136:	6878      	ldr	r0, [r7, #4]
 8003138:	f7ff f928 	bl	800238c <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800313c:	e00e      	b.n	800315c <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800313e:	2300      	movs	r3, #0
 8003140:	60bb      	str	r3, [r7, #8]
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	695b      	ldr	r3, [r3, #20]
 8003148:	60bb      	str	r3, [r7, #8]
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	699b      	ldr	r3, [r3, #24]
 8003150:	60bb      	str	r3, [r7, #8]
 8003152:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2200      	movs	r2, #0
 8003158:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 800315c:	bf00      	nop
 800315e:	3710      	adds	r7, #16
 8003160:	46bd      	mov	sp, r7
 8003162:	bd80      	pop	{r7, pc}

08003164 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b084      	sub	sp, #16
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003172:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	685a      	ldr	r2, [r3, #4]
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003182:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8003184:	2300      	movs	r3, #0
 8003186:	60bb      	str	r3, [r7, #8]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	695b      	ldr	r3, [r3, #20]
 800318e:	60bb      	str	r3, [r7, #8]
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	681a      	ldr	r2, [r3, #0]
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f042 0201 	orr.w	r2, r2, #1
 800319e:	601a      	str	r2, [r3, #0]
 80031a0:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	681a      	ldr	r2, [r3, #0]
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031b0:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80031bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80031c0:	d172      	bne.n	80032a8 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80031c2:	7bfb      	ldrb	r3, [r7, #15]
 80031c4:	2b22      	cmp	r3, #34	; 0x22
 80031c6:	d002      	beq.n	80031ce <I2C_Slave_STOPF+0x6a>
 80031c8:	7bfb      	ldrb	r3, [r7, #15]
 80031ca:	2b2a      	cmp	r3, #42	; 0x2a
 80031cc:	d135      	bne.n	800323a <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	b29a      	uxth	r2, r3
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031e0:	b29b      	uxth	r3, r3
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d005      	beq.n	80031f2 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ea:	f043 0204 	orr.w	r2, r3, #4
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	685a      	ldr	r2, [r3, #4]
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003200:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003206:	4618      	mov	r0, r3
 8003208:	f7fe f893 	bl	8001332 <HAL_DMA_GetState>
 800320c:	4603      	mov	r3, r0
 800320e:	2b01      	cmp	r3, #1
 8003210:	d049      	beq.n	80032a6 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003216:	4a69      	ldr	r2, [pc, #420]	; (80033bc <I2C_Slave_STOPF+0x258>)
 8003218:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800321e:	4618      	mov	r0, r3
 8003220:	f7fe f865 	bl	80012ee <HAL_DMA_Abort_IT>
 8003224:	4603      	mov	r3, r0
 8003226:	2b00      	cmp	r3, #0
 8003228:	d03d      	beq.n	80032a6 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800322e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003230:	687a      	ldr	r2, [r7, #4]
 8003232:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003234:	4610      	mov	r0, r2
 8003236:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003238:	e035      	b.n	80032a6 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	685b      	ldr	r3, [r3, #4]
 8003242:	b29a      	uxth	r2, r3
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800324c:	b29b      	uxth	r3, r3
 800324e:	2b00      	cmp	r3, #0
 8003250:	d005      	beq.n	800325e <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003256:	f043 0204 	orr.w	r2, r3, #4
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	685a      	ldr	r2, [r3, #4]
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800326c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003272:	4618      	mov	r0, r3
 8003274:	f7fe f85d 	bl	8001332 <HAL_DMA_GetState>
 8003278:	4603      	mov	r3, r0
 800327a:	2b01      	cmp	r3, #1
 800327c:	d014      	beq.n	80032a8 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003282:	4a4e      	ldr	r2, [pc, #312]	; (80033bc <I2C_Slave_STOPF+0x258>)
 8003284:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800328a:	4618      	mov	r0, r3
 800328c:	f7fe f82f 	bl	80012ee <HAL_DMA_Abort_IT>
 8003290:	4603      	mov	r3, r0
 8003292:	2b00      	cmp	r3, #0
 8003294:	d008      	beq.n	80032a8 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800329a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800329c:	687a      	ldr	r2, [r7, #4]
 800329e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80032a0:	4610      	mov	r0, r2
 80032a2:	4798      	blx	r3
 80032a4:	e000      	b.n	80032a8 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80032a6:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032ac:	b29b      	uxth	r3, r3
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d03e      	beq.n	8003330 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	695b      	ldr	r3, [r3, #20]
 80032b8:	f003 0304 	and.w	r3, r3, #4
 80032bc:	2b04      	cmp	r3, #4
 80032be:	d112      	bne.n	80032e6 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	691a      	ldr	r2, [r3, #16]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ca:	b2d2      	uxtb	r2, r2
 80032cc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032d2:	1c5a      	adds	r2, r3, #1
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032dc:	b29b      	uxth	r3, r3
 80032de:	3b01      	subs	r3, #1
 80032e0:	b29a      	uxth	r2, r3
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	695b      	ldr	r3, [r3, #20]
 80032ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032f0:	2b40      	cmp	r3, #64	; 0x40
 80032f2:	d112      	bne.n	800331a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	691a      	ldr	r2, [r3, #16]
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032fe:	b2d2      	uxtb	r2, r2
 8003300:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003306:	1c5a      	adds	r2, r3, #1
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003310:	b29b      	uxth	r3, r3
 8003312:	3b01      	subs	r3, #1
 8003314:	b29a      	uxth	r2, r3
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800331e:	b29b      	uxth	r3, r3
 8003320:	2b00      	cmp	r3, #0
 8003322:	d005      	beq.n	8003330 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003328:	f043 0204 	orr.w	r2, r3, #4
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003334:	2b00      	cmp	r3, #0
 8003336:	d003      	beq.n	8003340 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8003338:	6878      	ldr	r0, [r7, #4]
 800333a:	f000 f8b3 	bl	80034a4 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800333e:	e039      	b.n	80033b4 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003340:	7bfb      	ldrb	r3, [r7, #15]
 8003342:	2b2a      	cmp	r3, #42	; 0x2a
 8003344:	d109      	bne.n	800335a <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2200      	movs	r2, #0
 800334a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2228      	movs	r2, #40	; 0x28
 8003350:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003354:	6878      	ldr	r0, [r7, #4]
 8003356:	f7ff f80f 	bl	8002378 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003360:	b2db      	uxtb	r3, r3
 8003362:	2b28      	cmp	r3, #40	; 0x28
 8003364:	d111      	bne.n	800338a <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	4a15      	ldr	r2, [pc, #84]	; (80033c0 <I2C_Slave_STOPF+0x25c>)
 800336a:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2200      	movs	r2, #0
 8003370:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2220      	movs	r2, #32
 8003376:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2200      	movs	r2, #0
 800337e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8003382:	6878      	ldr	r0, [r7, #4]
 8003384:	f7ff f810 	bl	80023a8 <HAL_I2C_ListenCpltCallback>
}
 8003388:	e014      	b.n	80033b4 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800338e:	2b22      	cmp	r3, #34	; 0x22
 8003390:	d002      	beq.n	8003398 <I2C_Slave_STOPF+0x234>
 8003392:	7bfb      	ldrb	r3, [r7, #15]
 8003394:	2b22      	cmp	r3, #34	; 0x22
 8003396:	d10d      	bne.n	80033b4 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2200      	movs	r2, #0
 800339c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2220      	movs	r2, #32
 80033a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2200      	movs	r2, #0
 80033aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80033ae:	6878      	ldr	r0, [r7, #4]
 80033b0:	f7fe ffe2 	bl	8002378 <HAL_I2C_SlaveRxCpltCallback>
}
 80033b4:	bf00      	nop
 80033b6:	3710      	adds	r7, #16
 80033b8:	46bd      	mov	sp, r7
 80033ba:	bd80      	pop	{r7, pc}
 80033bc:	080039a9 	.word	0x080039a9
 80033c0:	ffff0000 	.word	0xffff0000

080033c4 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b084      	sub	sp, #16
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033d2:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033d8:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80033da:	68bb      	ldr	r3, [r7, #8]
 80033dc:	2b08      	cmp	r3, #8
 80033de:	d002      	beq.n	80033e6 <I2C_Slave_AF+0x22>
 80033e0:	68bb      	ldr	r3, [r7, #8]
 80033e2:	2b20      	cmp	r3, #32
 80033e4:	d129      	bne.n	800343a <I2C_Slave_AF+0x76>
 80033e6:	7bfb      	ldrb	r3, [r7, #15]
 80033e8:	2b28      	cmp	r3, #40	; 0x28
 80033ea:	d126      	bne.n	800343a <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	4a2c      	ldr	r2, [pc, #176]	; (80034a0 <I2C_Slave_AF+0xdc>)
 80033f0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	685a      	ldr	r2, [r3, #4]
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003400:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800340a:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	681a      	ldr	r2, [r3, #0]
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800341a:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2200      	movs	r2, #0
 8003420:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2220      	movs	r2, #32
 8003426:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2200      	movs	r2, #0
 800342e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8003432:	6878      	ldr	r0, [r7, #4]
 8003434:	f7fe ffb8 	bl	80023a8 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8003438:	e02e      	b.n	8003498 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800343a:	7bfb      	ldrb	r3, [r7, #15]
 800343c:	2b21      	cmp	r3, #33	; 0x21
 800343e:	d126      	bne.n	800348e <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	4a17      	ldr	r2, [pc, #92]	; (80034a0 <I2C_Slave_AF+0xdc>)
 8003444:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2221      	movs	r2, #33	; 0x21
 800344a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2220      	movs	r2, #32
 8003450:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2200      	movs	r2, #0
 8003458:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	685a      	ldr	r2, [r3, #4]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800346a:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003474:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	681a      	ldr	r2, [r3, #0]
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003484:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003486:	6878      	ldr	r0, [r7, #4]
 8003488:	f7fe ff6c 	bl	8002364 <HAL_I2C_SlaveTxCpltCallback>
}
 800348c:	e004      	b.n	8003498 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003496:	615a      	str	r2, [r3, #20]
}
 8003498:	bf00      	nop
 800349a:	3710      	adds	r7, #16
 800349c:	46bd      	mov	sp, r7
 800349e:	bd80      	pop	{r7, pc}
 80034a0:	ffff0000 	.word	0xffff0000

080034a4 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b084      	sub	sp, #16
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034b2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80034ba:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80034bc:	7bbb      	ldrb	r3, [r7, #14]
 80034be:	2b10      	cmp	r3, #16
 80034c0:	d002      	beq.n	80034c8 <I2C_ITError+0x24>
 80034c2:	7bbb      	ldrb	r3, [r7, #14]
 80034c4:	2b40      	cmp	r3, #64	; 0x40
 80034c6:	d10a      	bne.n	80034de <I2C_ITError+0x3a>
 80034c8:	7bfb      	ldrb	r3, [r7, #15]
 80034ca:	2b22      	cmp	r3, #34	; 0x22
 80034cc:	d107      	bne.n	80034de <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	681a      	ldr	r2, [r3, #0]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80034dc:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80034de:	7bfb      	ldrb	r3, [r7, #15]
 80034e0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80034e4:	2b28      	cmp	r3, #40	; 0x28
 80034e6:	d107      	bne.n	80034f8 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2200      	movs	r2, #0
 80034ec:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2228      	movs	r2, #40	; 0x28
 80034f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80034f6:	e015      	b.n	8003524 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003502:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003506:	d00a      	beq.n	800351e <I2C_ITError+0x7a>
 8003508:	7bfb      	ldrb	r3, [r7, #15]
 800350a:	2b60      	cmp	r3, #96	; 0x60
 800350c:	d007      	beq.n	800351e <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2220      	movs	r2, #32
 8003512:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2200      	movs	r2, #0
 800351a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2200      	movs	r2, #0
 8003522:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800352e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003532:	d162      	bne.n	80035fa <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	685a      	ldr	r2, [r3, #4]
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003542:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003548:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800354c:	b2db      	uxtb	r3, r3
 800354e:	2b01      	cmp	r3, #1
 8003550:	d020      	beq.n	8003594 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003556:	4a6a      	ldr	r2, [pc, #424]	; (8003700 <I2C_ITError+0x25c>)
 8003558:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800355e:	4618      	mov	r0, r3
 8003560:	f7fd fec5 	bl	80012ee <HAL_DMA_Abort_IT>
 8003564:	4603      	mov	r3, r0
 8003566:	2b00      	cmp	r3, #0
 8003568:	f000 8089 	beq.w	800367e <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	681a      	ldr	r2, [r3, #0]
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f022 0201 	bic.w	r2, r2, #1
 800357a:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2220      	movs	r2, #32
 8003580:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003588:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800358a:	687a      	ldr	r2, [r7, #4]
 800358c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800358e:	4610      	mov	r0, r2
 8003590:	4798      	blx	r3
 8003592:	e074      	b.n	800367e <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003598:	4a59      	ldr	r2, [pc, #356]	; (8003700 <I2C_ITError+0x25c>)
 800359a:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035a0:	4618      	mov	r0, r3
 80035a2:	f7fd fea4 	bl	80012ee <HAL_DMA_Abort_IT>
 80035a6:	4603      	mov	r3, r0
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d068      	beq.n	800367e <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	695b      	ldr	r3, [r3, #20]
 80035b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035b6:	2b40      	cmp	r3, #64	; 0x40
 80035b8:	d10b      	bne.n	80035d2 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	691a      	ldr	r2, [r3, #16]
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c4:	b2d2      	uxtb	r2, r2
 80035c6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035cc:	1c5a      	adds	r2, r3, #1
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	681a      	ldr	r2, [r3, #0]
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f022 0201 	bic.w	r2, r2, #1
 80035e0:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2220      	movs	r2, #32
 80035e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035f0:	687a      	ldr	r2, [r7, #4]
 80035f2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80035f4:	4610      	mov	r0, r2
 80035f6:	4798      	blx	r3
 80035f8:	e041      	b.n	800367e <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003600:	b2db      	uxtb	r3, r3
 8003602:	2b60      	cmp	r3, #96	; 0x60
 8003604:	d125      	bne.n	8003652 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2220      	movs	r2, #32
 800360a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2200      	movs	r2, #0
 8003612:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	695b      	ldr	r3, [r3, #20]
 800361a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800361e:	2b40      	cmp	r3, #64	; 0x40
 8003620:	d10b      	bne.n	800363a <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	691a      	ldr	r2, [r3, #16]
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800362c:	b2d2      	uxtb	r2, r2
 800362e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003634:	1c5a      	adds	r2, r3, #1
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	681a      	ldr	r2, [r3, #0]
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f022 0201 	bic.w	r2, r2, #1
 8003648:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800364a:	6878      	ldr	r0, [r7, #4]
 800364c:	f7fe fed4 	bl	80023f8 <HAL_I2C_AbortCpltCallback>
 8003650:	e015      	b.n	800367e <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	695b      	ldr	r3, [r3, #20]
 8003658:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800365c:	2b40      	cmp	r3, #64	; 0x40
 800365e:	d10b      	bne.n	8003678 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	691a      	ldr	r2, [r3, #16]
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800366a:	b2d2      	uxtb	r2, r2
 800366c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003672:	1c5a      	adds	r2, r3, #1
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8003678:	6878      	ldr	r0, [r7, #4]
 800367a:	f7fe feb3 	bl	80023e4 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003682:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003684:	68bb      	ldr	r3, [r7, #8]
 8003686:	f003 0301 	and.w	r3, r3, #1
 800368a:	2b00      	cmp	r3, #0
 800368c:	d10e      	bne.n	80036ac <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800368e:	68bb      	ldr	r3, [r7, #8]
 8003690:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003694:	2b00      	cmp	r3, #0
 8003696:	d109      	bne.n	80036ac <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003698:	68bb      	ldr	r3, [r7, #8]
 800369a:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d104      	bne.n	80036ac <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80036a2:	68bb      	ldr	r3, [r7, #8]
 80036a4:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d007      	beq.n	80036bc <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	685a      	ldr	r2, [r3, #4]
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80036ba:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036c2:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036c8:	f003 0304 	and.w	r3, r3, #4
 80036cc:	2b04      	cmp	r3, #4
 80036ce:	d113      	bne.n	80036f8 <I2C_ITError+0x254>
 80036d0:	7bfb      	ldrb	r3, [r7, #15]
 80036d2:	2b28      	cmp	r3, #40	; 0x28
 80036d4:	d110      	bne.n	80036f8 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	4a0a      	ldr	r2, [pc, #40]	; (8003704 <I2C_ITError+0x260>)
 80036da:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2200      	movs	r2, #0
 80036e0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2220      	movs	r2, #32
 80036e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2200      	movs	r2, #0
 80036ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80036f2:	6878      	ldr	r0, [r7, #4]
 80036f4:	f7fe fe58 	bl	80023a8 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80036f8:	bf00      	nop
 80036fa:	3710      	adds	r7, #16
 80036fc:	46bd      	mov	sp, r7
 80036fe:	bd80      	pop	{r7, pc}
 8003700:	080039a9 	.word	0x080039a9
 8003704:	ffff0000 	.word	0xffff0000

08003708 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b088      	sub	sp, #32
 800370c:	af02      	add	r7, sp, #8
 800370e:	60f8      	str	r0, [r7, #12]
 8003710:	607a      	str	r2, [r7, #4]
 8003712:	603b      	str	r3, [r7, #0]
 8003714:	460b      	mov	r3, r1
 8003716:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800371c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800371e:	697b      	ldr	r3, [r7, #20]
 8003720:	2b08      	cmp	r3, #8
 8003722:	d006      	beq.n	8003732 <I2C_MasterRequestWrite+0x2a>
 8003724:	697b      	ldr	r3, [r7, #20]
 8003726:	2b01      	cmp	r3, #1
 8003728:	d003      	beq.n	8003732 <I2C_MasterRequestWrite+0x2a>
 800372a:	697b      	ldr	r3, [r7, #20]
 800372c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003730:	d108      	bne.n	8003744 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	681a      	ldr	r2, [r3, #0]
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003740:	601a      	str	r2, [r3, #0]
 8003742:	e00b      	b.n	800375c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003748:	2b12      	cmp	r3, #18
 800374a:	d107      	bne.n	800375c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	681a      	ldr	r2, [r3, #0]
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800375a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	9300      	str	r3, [sp, #0]
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2200      	movs	r2, #0
 8003764:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003768:	68f8      	ldr	r0, [r7, #12]
 800376a:	f000 f9c5 	bl	8003af8 <I2C_WaitOnFlagUntilTimeout>
 800376e:	4603      	mov	r3, r0
 8003770:	2b00      	cmp	r3, #0
 8003772:	d00d      	beq.n	8003790 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800377e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003782:	d103      	bne.n	800378c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	f44f 7200 	mov.w	r2, #512	; 0x200
 800378a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800378c:	2303      	movs	r3, #3
 800378e:	e035      	b.n	80037fc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	691b      	ldr	r3, [r3, #16]
 8003794:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003798:	d108      	bne.n	80037ac <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800379a:	897b      	ldrh	r3, [r7, #10]
 800379c:	b2db      	uxtb	r3, r3
 800379e:	461a      	mov	r2, r3
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80037a8:	611a      	str	r2, [r3, #16]
 80037aa:	e01b      	b.n	80037e4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80037ac:	897b      	ldrh	r3, [r7, #10]
 80037ae:	11db      	asrs	r3, r3, #7
 80037b0:	b2db      	uxtb	r3, r3
 80037b2:	f003 0306 	and.w	r3, r3, #6
 80037b6:	b2db      	uxtb	r3, r3
 80037b8:	f063 030f 	orn	r3, r3, #15
 80037bc:	b2da      	uxtb	r2, r3
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	687a      	ldr	r2, [r7, #4]
 80037c8:	490e      	ldr	r1, [pc, #56]	; (8003804 <I2C_MasterRequestWrite+0xfc>)
 80037ca:	68f8      	ldr	r0, [r7, #12]
 80037cc:	f000 f9eb 	bl	8003ba6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80037d0:	4603      	mov	r3, r0
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d001      	beq.n	80037da <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80037d6:	2301      	movs	r3, #1
 80037d8:	e010      	b.n	80037fc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80037da:	897b      	ldrh	r3, [r7, #10]
 80037dc:	b2da      	uxtb	r2, r3
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	687a      	ldr	r2, [r7, #4]
 80037e8:	4907      	ldr	r1, [pc, #28]	; (8003808 <I2C_MasterRequestWrite+0x100>)
 80037ea:	68f8      	ldr	r0, [r7, #12]
 80037ec:	f000 f9db 	bl	8003ba6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80037f0:	4603      	mov	r3, r0
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d001      	beq.n	80037fa <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80037f6:	2301      	movs	r3, #1
 80037f8:	e000      	b.n	80037fc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80037fa:	2300      	movs	r3, #0
}
 80037fc:	4618      	mov	r0, r3
 80037fe:	3718      	adds	r7, #24
 8003800:	46bd      	mov	sp, r7
 8003802:	bd80      	pop	{r7, pc}
 8003804:	00010008 	.word	0x00010008
 8003808:	00010002 	.word	0x00010002

0800380c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b088      	sub	sp, #32
 8003810:	af02      	add	r7, sp, #8
 8003812:	60f8      	str	r0, [r7, #12]
 8003814:	607a      	str	r2, [r7, #4]
 8003816:	603b      	str	r3, [r7, #0]
 8003818:	460b      	mov	r3, r1
 800381a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003820:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	681a      	ldr	r2, [r3, #0]
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003830:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003832:	697b      	ldr	r3, [r7, #20]
 8003834:	2b08      	cmp	r3, #8
 8003836:	d006      	beq.n	8003846 <I2C_MasterRequestRead+0x3a>
 8003838:	697b      	ldr	r3, [r7, #20]
 800383a:	2b01      	cmp	r3, #1
 800383c:	d003      	beq.n	8003846 <I2C_MasterRequestRead+0x3a>
 800383e:	697b      	ldr	r3, [r7, #20]
 8003840:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003844:	d108      	bne.n	8003858 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	681a      	ldr	r2, [r3, #0]
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003854:	601a      	str	r2, [r3, #0]
 8003856:	e00b      	b.n	8003870 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800385c:	2b11      	cmp	r3, #17
 800385e:	d107      	bne.n	8003870 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	681a      	ldr	r2, [r3, #0]
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800386e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	9300      	str	r3, [sp, #0]
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2200      	movs	r2, #0
 8003878:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800387c:	68f8      	ldr	r0, [r7, #12]
 800387e:	f000 f93b 	bl	8003af8 <I2C_WaitOnFlagUntilTimeout>
 8003882:	4603      	mov	r3, r0
 8003884:	2b00      	cmp	r3, #0
 8003886:	d00d      	beq.n	80038a4 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003892:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003896:	d103      	bne.n	80038a0 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800389e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80038a0:	2303      	movs	r3, #3
 80038a2:	e079      	b.n	8003998 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	691b      	ldr	r3, [r3, #16]
 80038a8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80038ac:	d108      	bne.n	80038c0 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80038ae:	897b      	ldrh	r3, [r7, #10]
 80038b0:	b2db      	uxtb	r3, r3
 80038b2:	f043 0301 	orr.w	r3, r3, #1
 80038b6:	b2da      	uxtb	r2, r3
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	611a      	str	r2, [r3, #16]
 80038be:	e05f      	b.n	8003980 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80038c0:	897b      	ldrh	r3, [r7, #10]
 80038c2:	11db      	asrs	r3, r3, #7
 80038c4:	b2db      	uxtb	r3, r3
 80038c6:	f003 0306 	and.w	r3, r3, #6
 80038ca:	b2db      	uxtb	r3, r3
 80038cc:	f063 030f 	orn	r3, r3, #15
 80038d0:	b2da      	uxtb	r2, r3
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	687a      	ldr	r2, [r7, #4]
 80038dc:	4930      	ldr	r1, [pc, #192]	; (80039a0 <I2C_MasterRequestRead+0x194>)
 80038de:	68f8      	ldr	r0, [r7, #12]
 80038e0:	f000 f961 	bl	8003ba6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80038e4:	4603      	mov	r3, r0
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d001      	beq.n	80038ee <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80038ea:	2301      	movs	r3, #1
 80038ec:	e054      	b.n	8003998 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80038ee:	897b      	ldrh	r3, [r7, #10]
 80038f0:	b2da      	uxtb	r2, r3
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	687a      	ldr	r2, [r7, #4]
 80038fc:	4929      	ldr	r1, [pc, #164]	; (80039a4 <I2C_MasterRequestRead+0x198>)
 80038fe:	68f8      	ldr	r0, [r7, #12]
 8003900:	f000 f951 	bl	8003ba6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003904:	4603      	mov	r3, r0
 8003906:	2b00      	cmp	r3, #0
 8003908:	d001      	beq.n	800390e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800390a:	2301      	movs	r3, #1
 800390c:	e044      	b.n	8003998 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800390e:	2300      	movs	r3, #0
 8003910:	613b      	str	r3, [r7, #16]
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	695b      	ldr	r3, [r3, #20]
 8003918:	613b      	str	r3, [r7, #16]
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	699b      	ldr	r3, [r3, #24]
 8003920:	613b      	str	r3, [r7, #16]
 8003922:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	681a      	ldr	r2, [r3, #0]
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003932:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	9300      	str	r3, [sp, #0]
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2200      	movs	r2, #0
 800393c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003940:	68f8      	ldr	r0, [r7, #12]
 8003942:	f000 f8d9 	bl	8003af8 <I2C_WaitOnFlagUntilTimeout>
 8003946:	4603      	mov	r3, r0
 8003948:	2b00      	cmp	r3, #0
 800394a:	d00d      	beq.n	8003968 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003956:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800395a:	d103      	bne.n	8003964 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003962:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8003964:	2303      	movs	r3, #3
 8003966:	e017      	b.n	8003998 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003968:	897b      	ldrh	r3, [r7, #10]
 800396a:	11db      	asrs	r3, r3, #7
 800396c:	b2db      	uxtb	r3, r3
 800396e:	f003 0306 	and.w	r3, r3, #6
 8003972:	b2db      	uxtb	r3, r3
 8003974:	f063 030e 	orn	r3, r3, #14
 8003978:	b2da      	uxtb	r2, r3
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	687a      	ldr	r2, [r7, #4]
 8003984:	4907      	ldr	r1, [pc, #28]	; (80039a4 <I2C_MasterRequestRead+0x198>)
 8003986:	68f8      	ldr	r0, [r7, #12]
 8003988:	f000 f90d 	bl	8003ba6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800398c:	4603      	mov	r3, r0
 800398e:	2b00      	cmp	r3, #0
 8003990:	d001      	beq.n	8003996 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8003992:	2301      	movs	r3, #1
 8003994:	e000      	b.n	8003998 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8003996:	2300      	movs	r3, #0
}
 8003998:	4618      	mov	r0, r3
 800399a:	3718      	adds	r7, #24
 800399c:	46bd      	mov	sp, r7
 800399e:	bd80      	pop	{r7, pc}
 80039a0:	00010008 	.word	0x00010008
 80039a4:	00010002 	.word	0x00010002

080039a8 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b086      	sub	sp, #24
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80039b0:	2300      	movs	r3, #0
 80039b2:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039b8:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80039ba:	697b      	ldr	r3, [r7, #20]
 80039bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039c0:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80039c2:	4b4b      	ldr	r3, [pc, #300]	; (8003af0 <I2C_DMAAbort+0x148>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	08db      	lsrs	r3, r3, #3
 80039c8:	4a4a      	ldr	r2, [pc, #296]	; (8003af4 <I2C_DMAAbort+0x14c>)
 80039ca:	fba2 2303 	umull	r2, r3, r2, r3
 80039ce:	0a1a      	lsrs	r2, r3, #8
 80039d0:	4613      	mov	r3, r2
 80039d2:	009b      	lsls	r3, r3, #2
 80039d4:	4413      	add	r3, r2
 80039d6:	00da      	lsls	r2, r3, #3
 80039d8:	1ad3      	subs	r3, r2, r3
 80039da:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d106      	bne.n	80039f0 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80039e2:	697b      	ldr	r3, [r7, #20]
 80039e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039e6:	f043 0220 	orr.w	r2, r3, #32
 80039ea:	697b      	ldr	r3, [r7, #20]
 80039ec:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80039ee:	e00a      	b.n	8003a06 <I2C_DMAAbort+0x5e>
    }
    count--;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	3b01      	subs	r3, #1
 80039f4:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80039f6:	697b      	ldr	r3, [r7, #20]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a04:	d0ea      	beq.n	80039dc <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8003a06:	697b      	ldr	r3, [r7, #20]
 8003a08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d003      	beq.n	8003a16 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8003a0e:	697b      	ldr	r3, [r7, #20]
 8003a10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a12:	2200      	movs	r2, #0
 8003a14:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8003a16:	697b      	ldr	r3, [r7, #20]
 8003a18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d003      	beq.n	8003a26 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8003a1e:	697b      	ldr	r3, [r7, #20]
 8003a20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a22:	2200      	movs	r2, #0
 8003a24:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a26:	697b      	ldr	r3, [r7, #20]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	681a      	ldr	r2, [r3, #0]
 8003a2c:	697b      	ldr	r3, [r7, #20]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a34:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8003a36:	697b      	ldr	r3, [r7, #20]
 8003a38:	2200      	movs	r2, #0
 8003a3a:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8003a3c:	697b      	ldr	r3, [r7, #20]
 8003a3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d003      	beq.n	8003a4c <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003a44:	697b      	ldr	r3, [r7, #20]
 8003a46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a48:	2200      	movs	r2, #0
 8003a4a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8003a4c:	697b      	ldr	r3, [r7, #20]
 8003a4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d003      	beq.n	8003a5c <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003a54:	697b      	ldr	r3, [r7, #20]
 8003a56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a58:	2200      	movs	r2, #0
 8003a5a:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8003a5c:	697b      	ldr	r3, [r7, #20]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	681a      	ldr	r2, [r3, #0]
 8003a62:	697b      	ldr	r3, [r7, #20]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f022 0201 	bic.w	r2, r2, #1
 8003a6a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003a6c:	697b      	ldr	r3, [r7, #20]
 8003a6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a72:	b2db      	uxtb	r3, r3
 8003a74:	2b60      	cmp	r3, #96	; 0x60
 8003a76:	d10e      	bne.n	8003a96 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8003a78:	697b      	ldr	r3, [r7, #20]
 8003a7a:	2220      	movs	r2, #32
 8003a7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003a80:	697b      	ldr	r3, [r7, #20]
 8003a82:	2200      	movs	r2, #0
 8003a84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8003a88:	697b      	ldr	r3, [r7, #20]
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003a8e:	6978      	ldr	r0, [r7, #20]
 8003a90:	f7fe fcb2 	bl	80023f8 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003a94:	e027      	b.n	8003ae6 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003a96:	7cfb      	ldrb	r3, [r7, #19]
 8003a98:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003a9c:	2b28      	cmp	r3, #40	; 0x28
 8003a9e:	d117      	bne.n	8003ad0 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8003aa0:	697b      	ldr	r3, [r7, #20]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	681a      	ldr	r2, [r3, #0]
 8003aa6:	697b      	ldr	r3, [r7, #20]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f042 0201 	orr.w	r2, r2, #1
 8003aae:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ab0:	697b      	ldr	r3, [r7, #20]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	681a      	ldr	r2, [r3, #0]
 8003ab6:	697b      	ldr	r3, [r7, #20]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003abe:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003ac0:	697b      	ldr	r3, [r7, #20]
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003ac6:	697b      	ldr	r3, [r7, #20]
 8003ac8:	2228      	movs	r2, #40	; 0x28
 8003aca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003ace:	e007      	b.n	8003ae0 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8003ad0:	697b      	ldr	r3, [r7, #20]
 8003ad2:	2220      	movs	r2, #32
 8003ad4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ad8:	697b      	ldr	r3, [r7, #20]
 8003ada:	2200      	movs	r2, #0
 8003adc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8003ae0:	6978      	ldr	r0, [r7, #20]
 8003ae2:	f7fe fc7f 	bl	80023e4 <HAL_I2C_ErrorCallback>
}
 8003ae6:	bf00      	nop
 8003ae8:	3718      	adds	r7, #24
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bd80      	pop	{r7, pc}
 8003aee:	bf00      	nop
 8003af0:	20000000 	.word	0x20000000
 8003af4:	14f8b589 	.word	0x14f8b589

08003af8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b084      	sub	sp, #16
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	60f8      	str	r0, [r7, #12]
 8003b00:	60b9      	str	r1, [r7, #8]
 8003b02:	603b      	str	r3, [r7, #0]
 8003b04:	4613      	mov	r3, r2
 8003b06:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003b08:	e025      	b.n	8003b56 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b10:	d021      	beq.n	8003b56 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b12:	f7fd fa3b 	bl	8000f8c <HAL_GetTick>
 8003b16:	4602      	mov	r2, r0
 8003b18:	69bb      	ldr	r3, [r7, #24]
 8003b1a:	1ad3      	subs	r3, r2, r3
 8003b1c:	683a      	ldr	r2, [r7, #0]
 8003b1e:	429a      	cmp	r2, r3
 8003b20:	d302      	bcc.n	8003b28 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d116      	bne.n	8003b56 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	2220      	movs	r2, #32
 8003b32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	2200      	movs	r2, #0
 8003b3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b42:	f043 0220 	orr.w	r2, r3, #32
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003b52:	2301      	movs	r3, #1
 8003b54:	e023      	b.n	8003b9e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003b56:	68bb      	ldr	r3, [r7, #8]
 8003b58:	0c1b      	lsrs	r3, r3, #16
 8003b5a:	b2db      	uxtb	r3, r3
 8003b5c:	2b01      	cmp	r3, #1
 8003b5e:	d10d      	bne.n	8003b7c <I2C_WaitOnFlagUntilTimeout+0x84>
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	695b      	ldr	r3, [r3, #20]
 8003b66:	43da      	mvns	r2, r3
 8003b68:	68bb      	ldr	r3, [r7, #8]
 8003b6a:	4013      	ands	r3, r2
 8003b6c:	b29b      	uxth	r3, r3
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	bf0c      	ite	eq
 8003b72:	2301      	moveq	r3, #1
 8003b74:	2300      	movne	r3, #0
 8003b76:	b2db      	uxtb	r3, r3
 8003b78:	461a      	mov	r2, r3
 8003b7a:	e00c      	b.n	8003b96 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	699b      	ldr	r3, [r3, #24]
 8003b82:	43da      	mvns	r2, r3
 8003b84:	68bb      	ldr	r3, [r7, #8]
 8003b86:	4013      	ands	r3, r2
 8003b88:	b29b      	uxth	r3, r3
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	bf0c      	ite	eq
 8003b8e:	2301      	moveq	r3, #1
 8003b90:	2300      	movne	r3, #0
 8003b92:	b2db      	uxtb	r3, r3
 8003b94:	461a      	mov	r2, r3
 8003b96:	79fb      	ldrb	r3, [r7, #7]
 8003b98:	429a      	cmp	r2, r3
 8003b9a:	d0b6      	beq.n	8003b0a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003b9c:	2300      	movs	r3, #0
}
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	3710      	adds	r7, #16
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	bd80      	pop	{r7, pc}

08003ba6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003ba6:	b580      	push	{r7, lr}
 8003ba8:	b084      	sub	sp, #16
 8003baa:	af00      	add	r7, sp, #0
 8003bac:	60f8      	str	r0, [r7, #12]
 8003bae:	60b9      	str	r1, [r7, #8]
 8003bb0:	607a      	str	r2, [r7, #4]
 8003bb2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003bb4:	e051      	b.n	8003c5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	695b      	ldr	r3, [r3, #20]
 8003bbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bc0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bc4:	d123      	bne.n	8003c0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	681a      	ldr	r2, [r3, #0]
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003bd4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003bde:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	2200      	movs	r2, #0
 8003be4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	2220      	movs	r2, #32
 8003bea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bfa:	f043 0204 	orr.w	r2, r3, #4
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	2200      	movs	r2, #0
 8003c06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	e046      	b.n	8003c9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c14:	d021      	beq.n	8003c5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c16:	f7fd f9b9 	bl	8000f8c <HAL_GetTick>
 8003c1a:	4602      	mov	r2, r0
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	1ad3      	subs	r3, r2, r3
 8003c20:	687a      	ldr	r2, [r7, #4]
 8003c22:	429a      	cmp	r2, r3
 8003c24:	d302      	bcc.n	8003c2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d116      	bne.n	8003c5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	2200      	movs	r2, #0
 8003c30:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	2220      	movs	r2, #32
 8003c36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c46:	f043 0220 	orr.w	r2, r3, #32
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	2200      	movs	r2, #0
 8003c52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003c56:	2301      	movs	r3, #1
 8003c58:	e020      	b.n	8003c9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003c5a:	68bb      	ldr	r3, [r7, #8]
 8003c5c:	0c1b      	lsrs	r3, r3, #16
 8003c5e:	b2db      	uxtb	r3, r3
 8003c60:	2b01      	cmp	r3, #1
 8003c62:	d10c      	bne.n	8003c7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	695b      	ldr	r3, [r3, #20]
 8003c6a:	43da      	mvns	r2, r3
 8003c6c:	68bb      	ldr	r3, [r7, #8]
 8003c6e:	4013      	ands	r3, r2
 8003c70:	b29b      	uxth	r3, r3
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	bf14      	ite	ne
 8003c76:	2301      	movne	r3, #1
 8003c78:	2300      	moveq	r3, #0
 8003c7a:	b2db      	uxtb	r3, r3
 8003c7c:	e00b      	b.n	8003c96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	699b      	ldr	r3, [r3, #24]
 8003c84:	43da      	mvns	r2, r3
 8003c86:	68bb      	ldr	r3, [r7, #8]
 8003c88:	4013      	ands	r3, r2
 8003c8a:	b29b      	uxth	r3, r3
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	bf14      	ite	ne
 8003c90:	2301      	movne	r3, #1
 8003c92:	2300      	moveq	r3, #0
 8003c94:	b2db      	uxtb	r3, r3
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d18d      	bne.n	8003bb6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003c9a:	2300      	movs	r3, #0
}
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	3710      	adds	r7, #16
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	bd80      	pop	{r7, pc}

08003ca4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b084      	sub	sp, #16
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	60f8      	str	r0, [r7, #12]
 8003cac:	60b9      	str	r1, [r7, #8]
 8003cae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003cb0:	e02d      	b.n	8003d0e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003cb2:	68f8      	ldr	r0, [r7, #12]
 8003cb4:	f000 f900 	bl	8003eb8 <I2C_IsAcknowledgeFailed>
 8003cb8:	4603      	mov	r3, r0
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d001      	beq.n	8003cc2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	e02d      	b.n	8003d1e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003cc2:	68bb      	ldr	r3, [r7, #8]
 8003cc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cc8:	d021      	beq.n	8003d0e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cca:	f7fd f95f 	bl	8000f8c <HAL_GetTick>
 8003cce:	4602      	mov	r2, r0
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	1ad3      	subs	r3, r2, r3
 8003cd4:	68ba      	ldr	r2, [r7, #8]
 8003cd6:	429a      	cmp	r2, r3
 8003cd8:	d302      	bcc.n	8003ce0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003cda:	68bb      	ldr	r3, [r7, #8]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d116      	bne.n	8003d0e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	2220      	movs	r2, #32
 8003cea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cfa:	f043 0220 	orr.w	r2, r3, #32
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	2200      	movs	r2, #0
 8003d06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	e007      	b.n	8003d1e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	695b      	ldr	r3, [r3, #20]
 8003d14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d18:	2b80      	cmp	r3, #128	; 0x80
 8003d1a:	d1ca      	bne.n	8003cb2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003d1c:	2300      	movs	r3, #0
}
 8003d1e:	4618      	mov	r0, r3
 8003d20:	3710      	adds	r7, #16
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bd80      	pop	{r7, pc}

08003d26 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003d26:	b580      	push	{r7, lr}
 8003d28:	b084      	sub	sp, #16
 8003d2a:	af00      	add	r7, sp, #0
 8003d2c:	60f8      	str	r0, [r7, #12]
 8003d2e:	60b9      	str	r1, [r7, #8]
 8003d30:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003d32:	e02d      	b.n	8003d90 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003d34:	68f8      	ldr	r0, [r7, #12]
 8003d36:	f000 f8bf 	bl	8003eb8 <I2C_IsAcknowledgeFailed>
 8003d3a:	4603      	mov	r3, r0
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d001      	beq.n	8003d44 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003d40:	2301      	movs	r3, #1
 8003d42:	e02d      	b.n	8003da0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d44:	68bb      	ldr	r3, [r7, #8]
 8003d46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d4a:	d021      	beq.n	8003d90 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d4c:	f7fd f91e 	bl	8000f8c <HAL_GetTick>
 8003d50:	4602      	mov	r2, r0
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	1ad3      	subs	r3, r2, r3
 8003d56:	68ba      	ldr	r2, [r7, #8]
 8003d58:	429a      	cmp	r2, r3
 8003d5a:	d302      	bcc.n	8003d62 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003d5c:	68bb      	ldr	r3, [r7, #8]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d116      	bne.n	8003d90 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	2200      	movs	r2, #0
 8003d66:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	2220      	movs	r2, #32
 8003d6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	2200      	movs	r2, #0
 8003d74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d7c:	f043 0220 	orr.w	r2, r3, #32
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	2200      	movs	r2, #0
 8003d88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	e007      	b.n	8003da0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	695b      	ldr	r3, [r3, #20]
 8003d96:	f003 0304 	and.w	r3, r3, #4
 8003d9a:	2b04      	cmp	r3, #4
 8003d9c:	d1ca      	bne.n	8003d34 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003d9e:	2300      	movs	r3, #0
}
 8003da0:	4618      	mov	r0, r3
 8003da2:	3710      	adds	r7, #16
 8003da4:	46bd      	mov	sp, r7
 8003da6:	bd80      	pop	{r7, pc}

08003da8 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8003da8:	b480      	push	{r7}
 8003daa:	b085      	sub	sp, #20
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003db0:	2300      	movs	r3, #0
 8003db2:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8003db4:	4b13      	ldr	r3, [pc, #76]	; (8003e04 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	08db      	lsrs	r3, r3, #3
 8003dba:	4a13      	ldr	r2, [pc, #76]	; (8003e08 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8003dbc:	fba2 2303 	umull	r2, r3, r2, r3
 8003dc0:	0a1a      	lsrs	r2, r3, #8
 8003dc2:	4613      	mov	r3, r2
 8003dc4:	009b      	lsls	r3, r3, #2
 8003dc6:	4413      	add	r3, r2
 8003dc8:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	3b01      	subs	r3, #1
 8003dce:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d107      	bne.n	8003de6 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dda:	f043 0220 	orr.w	r2, r3, #32
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003de2:	2301      	movs	r3, #1
 8003de4:	e008      	b.n	8003df8 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003df0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003df4:	d0e9      	beq.n	8003dca <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8003df6:	2300      	movs	r3, #0
}
 8003df8:	4618      	mov	r0, r3
 8003dfa:	3714      	adds	r7, #20
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e02:	4770      	bx	lr
 8003e04:	20000000 	.word	0x20000000
 8003e08:	14f8b589 	.word	0x14f8b589

08003e0c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b084      	sub	sp, #16
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	60f8      	str	r0, [r7, #12]
 8003e14:	60b9      	str	r1, [r7, #8]
 8003e16:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003e18:	e042      	b.n	8003ea0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	695b      	ldr	r3, [r3, #20]
 8003e20:	f003 0310 	and.w	r3, r3, #16
 8003e24:	2b10      	cmp	r3, #16
 8003e26:	d119      	bne.n	8003e5c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f06f 0210 	mvn.w	r2, #16
 8003e30:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	2200      	movs	r2, #0
 8003e36:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	2220      	movs	r2, #32
 8003e3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	2200      	movs	r2, #0
 8003e44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	2200      	movs	r2, #0
 8003e54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003e58:	2301      	movs	r3, #1
 8003e5a:	e029      	b.n	8003eb0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e5c:	f7fd f896 	bl	8000f8c <HAL_GetTick>
 8003e60:	4602      	mov	r2, r0
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	1ad3      	subs	r3, r2, r3
 8003e66:	68ba      	ldr	r2, [r7, #8]
 8003e68:	429a      	cmp	r2, r3
 8003e6a:	d302      	bcc.n	8003e72 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003e6c:	68bb      	ldr	r3, [r7, #8]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d116      	bne.n	8003ea0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	2200      	movs	r2, #0
 8003e76:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	2220      	movs	r2, #32
 8003e7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	2200      	movs	r2, #0
 8003e84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e8c:	f043 0220 	orr.w	r2, r3, #32
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	2200      	movs	r2, #0
 8003e98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	e007      	b.n	8003eb0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	695b      	ldr	r3, [r3, #20]
 8003ea6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003eaa:	2b40      	cmp	r3, #64	; 0x40
 8003eac:	d1b5      	bne.n	8003e1a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003eae:	2300      	movs	r3, #0
}
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	3710      	adds	r7, #16
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	bd80      	pop	{r7, pc}

08003eb8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003eb8:	b480      	push	{r7}
 8003eba:	b083      	sub	sp, #12
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	695b      	ldr	r3, [r3, #20]
 8003ec6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003eca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ece:	d11b      	bne.n	8003f08 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003ed8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2200      	movs	r2, #0
 8003ede:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2220      	movs	r2, #32
 8003ee4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2200      	movs	r2, #0
 8003eec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ef4:	f043 0204 	orr.w	r2, r3, #4
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2200      	movs	r2, #0
 8003f00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003f04:	2301      	movs	r3, #1
 8003f06:	e000      	b.n	8003f0a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003f08:	2300      	movs	r3, #0
}
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	370c      	adds	r7, #12
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f14:	4770      	bx	lr

08003f16 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8003f16:	b480      	push	{r7}
 8003f18:	b083      	sub	sp, #12
 8003f1a:	af00      	add	r7, sp, #0
 8003f1c:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f22:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003f26:	d103      	bne.n	8003f30 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2201      	movs	r2, #1
 8003f2c:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8003f2e:	e007      	b.n	8003f40 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f34:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003f38:	d102      	bne.n	8003f40 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2208      	movs	r2, #8
 8003f3e:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8003f40:	bf00      	nop
 8003f42:	370c      	adds	r7, #12
 8003f44:	46bd      	mov	sp, r7
 8003f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4a:	4770      	bx	lr

08003f4c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b086      	sub	sp, #24
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d101      	bne.n	8003f5e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	e267      	b.n	800442e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f003 0301 	and.w	r3, r3, #1
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d075      	beq.n	8004056 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003f6a:	4b88      	ldr	r3, [pc, #544]	; (800418c <HAL_RCC_OscConfig+0x240>)
 8003f6c:	689b      	ldr	r3, [r3, #8]
 8003f6e:	f003 030c 	and.w	r3, r3, #12
 8003f72:	2b04      	cmp	r3, #4
 8003f74:	d00c      	beq.n	8003f90 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f76:	4b85      	ldr	r3, [pc, #532]	; (800418c <HAL_RCC_OscConfig+0x240>)
 8003f78:	689b      	ldr	r3, [r3, #8]
 8003f7a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003f7e:	2b08      	cmp	r3, #8
 8003f80:	d112      	bne.n	8003fa8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f82:	4b82      	ldr	r3, [pc, #520]	; (800418c <HAL_RCC_OscConfig+0x240>)
 8003f84:	685b      	ldr	r3, [r3, #4]
 8003f86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f8a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f8e:	d10b      	bne.n	8003fa8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f90:	4b7e      	ldr	r3, [pc, #504]	; (800418c <HAL_RCC_OscConfig+0x240>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d05b      	beq.n	8004054 <HAL_RCC_OscConfig+0x108>
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d157      	bne.n	8004054 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	e242      	b.n	800442e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	685b      	ldr	r3, [r3, #4]
 8003fac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fb0:	d106      	bne.n	8003fc0 <HAL_RCC_OscConfig+0x74>
 8003fb2:	4b76      	ldr	r3, [pc, #472]	; (800418c <HAL_RCC_OscConfig+0x240>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	4a75      	ldr	r2, [pc, #468]	; (800418c <HAL_RCC_OscConfig+0x240>)
 8003fb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fbc:	6013      	str	r3, [r2, #0]
 8003fbe:	e01d      	b.n	8003ffc <HAL_RCC_OscConfig+0xb0>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	685b      	ldr	r3, [r3, #4]
 8003fc4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003fc8:	d10c      	bne.n	8003fe4 <HAL_RCC_OscConfig+0x98>
 8003fca:	4b70      	ldr	r3, [pc, #448]	; (800418c <HAL_RCC_OscConfig+0x240>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4a6f      	ldr	r2, [pc, #444]	; (800418c <HAL_RCC_OscConfig+0x240>)
 8003fd0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003fd4:	6013      	str	r3, [r2, #0]
 8003fd6:	4b6d      	ldr	r3, [pc, #436]	; (800418c <HAL_RCC_OscConfig+0x240>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4a6c      	ldr	r2, [pc, #432]	; (800418c <HAL_RCC_OscConfig+0x240>)
 8003fdc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fe0:	6013      	str	r3, [r2, #0]
 8003fe2:	e00b      	b.n	8003ffc <HAL_RCC_OscConfig+0xb0>
 8003fe4:	4b69      	ldr	r3, [pc, #420]	; (800418c <HAL_RCC_OscConfig+0x240>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4a68      	ldr	r2, [pc, #416]	; (800418c <HAL_RCC_OscConfig+0x240>)
 8003fea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003fee:	6013      	str	r3, [r2, #0]
 8003ff0:	4b66      	ldr	r3, [pc, #408]	; (800418c <HAL_RCC_OscConfig+0x240>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4a65      	ldr	r2, [pc, #404]	; (800418c <HAL_RCC_OscConfig+0x240>)
 8003ff6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ffa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	685b      	ldr	r3, [r3, #4]
 8004000:	2b00      	cmp	r3, #0
 8004002:	d013      	beq.n	800402c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004004:	f7fc ffc2 	bl	8000f8c <HAL_GetTick>
 8004008:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800400a:	e008      	b.n	800401e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800400c:	f7fc ffbe 	bl	8000f8c <HAL_GetTick>
 8004010:	4602      	mov	r2, r0
 8004012:	693b      	ldr	r3, [r7, #16]
 8004014:	1ad3      	subs	r3, r2, r3
 8004016:	2b64      	cmp	r3, #100	; 0x64
 8004018:	d901      	bls.n	800401e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800401a:	2303      	movs	r3, #3
 800401c:	e207      	b.n	800442e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800401e:	4b5b      	ldr	r3, [pc, #364]	; (800418c <HAL_RCC_OscConfig+0x240>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004026:	2b00      	cmp	r3, #0
 8004028:	d0f0      	beq.n	800400c <HAL_RCC_OscConfig+0xc0>
 800402a:	e014      	b.n	8004056 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800402c:	f7fc ffae 	bl	8000f8c <HAL_GetTick>
 8004030:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004032:	e008      	b.n	8004046 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004034:	f7fc ffaa 	bl	8000f8c <HAL_GetTick>
 8004038:	4602      	mov	r2, r0
 800403a:	693b      	ldr	r3, [r7, #16]
 800403c:	1ad3      	subs	r3, r2, r3
 800403e:	2b64      	cmp	r3, #100	; 0x64
 8004040:	d901      	bls.n	8004046 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004042:	2303      	movs	r3, #3
 8004044:	e1f3      	b.n	800442e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004046:	4b51      	ldr	r3, [pc, #324]	; (800418c <HAL_RCC_OscConfig+0x240>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800404e:	2b00      	cmp	r3, #0
 8004050:	d1f0      	bne.n	8004034 <HAL_RCC_OscConfig+0xe8>
 8004052:	e000      	b.n	8004056 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004054:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f003 0302 	and.w	r3, r3, #2
 800405e:	2b00      	cmp	r3, #0
 8004060:	d063      	beq.n	800412a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004062:	4b4a      	ldr	r3, [pc, #296]	; (800418c <HAL_RCC_OscConfig+0x240>)
 8004064:	689b      	ldr	r3, [r3, #8]
 8004066:	f003 030c 	and.w	r3, r3, #12
 800406a:	2b00      	cmp	r3, #0
 800406c:	d00b      	beq.n	8004086 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800406e:	4b47      	ldr	r3, [pc, #284]	; (800418c <HAL_RCC_OscConfig+0x240>)
 8004070:	689b      	ldr	r3, [r3, #8]
 8004072:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004076:	2b08      	cmp	r3, #8
 8004078:	d11c      	bne.n	80040b4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800407a:	4b44      	ldr	r3, [pc, #272]	; (800418c <HAL_RCC_OscConfig+0x240>)
 800407c:	685b      	ldr	r3, [r3, #4]
 800407e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004082:	2b00      	cmp	r3, #0
 8004084:	d116      	bne.n	80040b4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004086:	4b41      	ldr	r3, [pc, #260]	; (800418c <HAL_RCC_OscConfig+0x240>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f003 0302 	and.w	r3, r3, #2
 800408e:	2b00      	cmp	r3, #0
 8004090:	d005      	beq.n	800409e <HAL_RCC_OscConfig+0x152>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	68db      	ldr	r3, [r3, #12]
 8004096:	2b01      	cmp	r3, #1
 8004098:	d001      	beq.n	800409e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800409a:	2301      	movs	r3, #1
 800409c:	e1c7      	b.n	800442e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800409e:	4b3b      	ldr	r3, [pc, #236]	; (800418c <HAL_RCC_OscConfig+0x240>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	691b      	ldr	r3, [r3, #16]
 80040aa:	00db      	lsls	r3, r3, #3
 80040ac:	4937      	ldr	r1, [pc, #220]	; (800418c <HAL_RCC_OscConfig+0x240>)
 80040ae:	4313      	orrs	r3, r2
 80040b0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040b2:	e03a      	b.n	800412a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	68db      	ldr	r3, [r3, #12]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d020      	beq.n	80040fe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80040bc:	4b34      	ldr	r3, [pc, #208]	; (8004190 <HAL_RCC_OscConfig+0x244>)
 80040be:	2201      	movs	r2, #1
 80040c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040c2:	f7fc ff63 	bl	8000f8c <HAL_GetTick>
 80040c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040c8:	e008      	b.n	80040dc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80040ca:	f7fc ff5f 	bl	8000f8c <HAL_GetTick>
 80040ce:	4602      	mov	r2, r0
 80040d0:	693b      	ldr	r3, [r7, #16]
 80040d2:	1ad3      	subs	r3, r2, r3
 80040d4:	2b02      	cmp	r3, #2
 80040d6:	d901      	bls.n	80040dc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80040d8:	2303      	movs	r3, #3
 80040da:	e1a8      	b.n	800442e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040dc:	4b2b      	ldr	r3, [pc, #172]	; (800418c <HAL_RCC_OscConfig+0x240>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f003 0302 	and.w	r3, r3, #2
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d0f0      	beq.n	80040ca <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040e8:	4b28      	ldr	r3, [pc, #160]	; (800418c <HAL_RCC_OscConfig+0x240>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	691b      	ldr	r3, [r3, #16]
 80040f4:	00db      	lsls	r3, r3, #3
 80040f6:	4925      	ldr	r1, [pc, #148]	; (800418c <HAL_RCC_OscConfig+0x240>)
 80040f8:	4313      	orrs	r3, r2
 80040fa:	600b      	str	r3, [r1, #0]
 80040fc:	e015      	b.n	800412a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80040fe:	4b24      	ldr	r3, [pc, #144]	; (8004190 <HAL_RCC_OscConfig+0x244>)
 8004100:	2200      	movs	r2, #0
 8004102:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004104:	f7fc ff42 	bl	8000f8c <HAL_GetTick>
 8004108:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800410a:	e008      	b.n	800411e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800410c:	f7fc ff3e 	bl	8000f8c <HAL_GetTick>
 8004110:	4602      	mov	r2, r0
 8004112:	693b      	ldr	r3, [r7, #16]
 8004114:	1ad3      	subs	r3, r2, r3
 8004116:	2b02      	cmp	r3, #2
 8004118:	d901      	bls.n	800411e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800411a:	2303      	movs	r3, #3
 800411c:	e187      	b.n	800442e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800411e:	4b1b      	ldr	r3, [pc, #108]	; (800418c <HAL_RCC_OscConfig+0x240>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f003 0302 	and.w	r3, r3, #2
 8004126:	2b00      	cmp	r3, #0
 8004128:	d1f0      	bne.n	800410c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f003 0308 	and.w	r3, r3, #8
 8004132:	2b00      	cmp	r3, #0
 8004134:	d036      	beq.n	80041a4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	695b      	ldr	r3, [r3, #20]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d016      	beq.n	800416c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800413e:	4b15      	ldr	r3, [pc, #84]	; (8004194 <HAL_RCC_OscConfig+0x248>)
 8004140:	2201      	movs	r2, #1
 8004142:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004144:	f7fc ff22 	bl	8000f8c <HAL_GetTick>
 8004148:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800414a:	e008      	b.n	800415e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800414c:	f7fc ff1e 	bl	8000f8c <HAL_GetTick>
 8004150:	4602      	mov	r2, r0
 8004152:	693b      	ldr	r3, [r7, #16]
 8004154:	1ad3      	subs	r3, r2, r3
 8004156:	2b02      	cmp	r3, #2
 8004158:	d901      	bls.n	800415e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800415a:	2303      	movs	r3, #3
 800415c:	e167      	b.n	800442e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800415e:	4b0b      	ldr	r3, [pc, #44]	; (800418c <HAL_RCC_OscConfig+0x240>)
 8004160:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004162:	f003 0302 	and.w	r3, r3, #2
 8004166:	2b00      	cmp	r3, #0
 8004168:	d0f0      	beq.n	800414c <HAL_RCC_OscConfig+0x200>
 800416a:	e01b      	b.n	80041a4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800416c:	4b09      	ldr	r3, [pc, #36]	; (8004194 <HAL_RCC_OscConfig+0x248>)
 800416e:	2200      	movs	r2, #0
 8004170:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004172:	f7fc ff0b 	bl	8000f8c <HAL_GetTick>
 8004176:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004178:	e00e      	b.n	8004198 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800417a:	f7fc ff07 	bl	8000f8c <HAL_GetTick>
 800417e:	4602      	mov	r2, r0
 8004180:	693b      	ldr	r3, [r7, #16]
 8004182:	1ad3      	subs	r3, r2, r3
 8004184:	2b02      	cmp	r3, #2
 8004186:	d907      	bls.n	8004198 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004188:	2303      	movs	r3, #3
 800418a:	e150      	b.n	800442e <HAL_RCC_OscConfig+0x4e2>
 800418c:	40023800 	.word	0x40023800
 8004190:	42470000 	.word	0x42470000
 8004194:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004198:	4b88      	ldr	r3, [pc, #544]	; (80043bc <HAL_RCC_OscConfig+0x470>)
 800419a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800419c:	f003 0302 	and.w	r3, r3, #2
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d1ea      	bne.n	800417a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f003 0304 	and.w	r3, r3, #4
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	f000 8097 	beq.w	80042e0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80041b2:	2300      	movs	r3, #0
 80041b4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80041b6:	4b81      	ldr	r3, [pc, #516]	; (80043bc <HAL_RCC_OscConfig+0x470>)
 80041b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d10f      	bne.n	80041e2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80041c2:	2300      	movs	r3, #0
 80041c4:	60bb      	str	r3, [r7, #8]
 80041c6:	4b7d      	ldr	r3, [pc, #500]	; (80043bc <HAL_RCC_OscConfig+0x470>)
 80041c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ca:	4a7c      	ldr	r2, [pc, #496]	; (80043bc <HAL_RCC_OscConfig+0x470>)
 80041cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041d0:	6413      	str	r3, [r2, #64]	; 0x40
 80041d2:	4b7a      	ldr	r3, [pc, #488]	; (80043bc <HAL_RCC_OscConfig+0x470>)
 80041d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041da:	60bb      	str	r3, [r7, #8]
 80041dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80041de:	2301      	movs	r3, #1
 80041e0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041e2:	4b77      	ldr	r3, [pc, #476]	; (80043c0 <HAL_RCC_OscConfig+0x474>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d118      	bne.n	8004220 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80041ee:	4b74      	ldr	r3, [pc, #464]	; (80043c0 <HAL_RCC_OscConfig+0x474>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	4a73      	ldr	r2, [pc, #460]	; (80043c0 <HAL_RCC_OscConfig+0x474>)
 80041f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80041fa:	f7fc fec7 	bl	8000f8c <HAL_GetTick>
 80041fe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004200:	e008      	b.n	8004214 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004202:	f7fc fec3 	bl	8000f8c <HAL_GetTick>
 8004206:	4602      	mov	r2, r0
 8004208:	693b      	ldr	r3, [r7, #16]
 800420a:	1ad3      	subs	r3, r2, r3
 800420c:	2b02      	cmp	r3, #2
 800420e:	d901      	bls.n	8004214 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004210:	2303      	movs	r3, #3
 8004212:	e10c      	b.n	800442e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004214:	4b6a      	ldr	r3, [pc, #424]	; (80043c0 <HAL_RCC_OscConfig+0x474>)
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800421c:	2b00      	cmp	r3, #0
 800421e:	d0f0      	beq.n	8004202 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	689b      	ldr	r3, [r3, #8]
 8004224:	2b01      	cmp	r3, #1
 8004226:	d106      	bne.n	8004236 <HAL_RCC_OscConfig+0x2ea>
 8004228:	4b64      	ldr	r3, [pc, #400]	; (80043bc <HAL_RCC_OscConfig+0x470>)
 800422a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800422c:	4a63      	ldr	r2, [pc, #396]	; (80043bc <HAL_RCC_OscConfig+0x470>)
 800422e:	f043 0301 	orr.w	r3, r3, #1
 8004232:	6713      	str	r3, [r2, #112]	; 0x70
 8004234:	e01c      	b.n	8004270 <HAL_RCC_OscConfig+0x324>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	689b      	ldr	r3, [r3, #8]
 800423a:	2b05      	cmp	r3, #5
 800423c:	d10c      	bne.n	8004258 <HAL_RCC_OscConfig+0x30c>
 800423e:	4b5f      	ldr	r3, [pc, #380]	; (80043bc <HAL_RCC_OscConfig+0x470>)
 8004240:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004242:	4a5e      	ldr	r2, [pc, #376]	; (80043bc <HAL_RCC_OscConfig+0x470>)
 8004244:	f043 0304 	orr.w	r3, r3, #4
 8004248:	6713      	str	r3, [r2, #112]	; 0x70
 800424a:	4b5c      	ldr	r3, [pc, #368]	; (80043bc <HAL_RCC_OscConfig+0x470>)
 800424c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800424e:	4a5b      	ldr	r2, [pc, #364]	; (80043bc <HAL_RCC_OscConfig+0x470>)
 8004250:	f043 0301 	orr.w	r3, r3, #1
 8004254:	6713      	str	r3, [r2, #112]	; 0x70
 8004256:	e00b      	b.n	8004270 <HAL_RCC_OscConfig+0x324>
 8004258:	4b58      	ldr	r3, [pc, #352]	; (80043bc <HAL_RCC_OscConfig+0x470>)
 800425a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800425c:	4a57      	ldr	r2, [pc, #348]	; (80043bc <HAL_RCC_OscConfig+0x470>)
 800425e:	f023 0301 	bic.w	r3, r3, #1
 8004262:	6713      	str	r3, [r2, #112]	; 0x70
 8004264:	4b55      	ldr	r3, [pc, #340]	; (80043bc <HAL_RCC_OscConfig+0x470>)
 8004266:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004268:	4a54      	ldr	r2, [pc, #336]	; (80043bc <HAL_RCC_OscConfig+0x470>)
 800426a:	f023 0304 	bic.w	r3, r3, #4
 800426e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	689b      	ldr	r3, [r3, #8]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d015      	beq.n	80042a4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004278:	f7fc fe88 	bl	8000f8c <HAL_GetTick>
 800427c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800427e:	e00a      	b.n	8004296 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004280:	f7fc fe84 	bl	8000f8c <HAL_GetTick>
 8004284:	4602      	mov	r2, r0
 8004286:	693b      	ldr	r3, [r7, #16]
 8004288:	1ad3      	subs	r3, r2, r3
 800428a:	f241 3288 	movw	r2, #5000	; 0x1388
 800428e:	4293      	cmp	r3, r2
 8004290:	d901      	bls.n	8004296 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004292:	2303      	movs	r3, #3
 8004294:	e0cb      	b.n	800442e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004296:	4b49      	ldr	r3, [pc, #292]	; (80043bc <HAL_RCC_OscConfig+0x470>)
 8004298:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800429a:	f003 0302 	and.w	r3, r3, #2
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d0ee      	beq.n	8004280 <HAL_RCC_OscConfig+0x334>
 80042a2:	e014      	b.n	80042ce <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042a4:	f7fc fe72 	bl	8000f8c <HAL_GetTick>
 80042a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042aa:	e00a      	b.n	80042c2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042ac:	f7fc fe6e 	bl	8000f8c <HAL_GetTick>
 80042b0:	4602      	mov	r2, r0
 80042b2:	693b      	ldr	r3, [r7, #16]
 80042b4:	1ad3      	subs	r3, r2, r3
 80042b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d901      	bls.n	80042c2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80042be:	2303      	movs	r3, #3
 80042c0:	e0b5      	b.n	800442e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042c2:	4b3e      	ldr	r3, [pc, #248]	; (80043bc <HAL_RCC_OscConfig+0x470>)
 80042c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042c6:	f003 0302 	and.w	r3, r3, #2
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d1ee      	bne.n	80042ac <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80042ce:	7dfb      	ldrb	r3, [r7, #23]
 80042d0:	2b01      	cmp	r3, #1
 80042d2:	d105      	bne.n	80042e0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042d4:	4b39      	ldr	r3, [pc, #228]	; (80043bc <HAL_RCC_OscConfig+0x470>)
 80042d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042d8:	4a38      	ldr	r2, [pc, #224]	; (80043bc <HAL_RCC_OscConfig+0x470>)
 80042da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042de:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	699b      	ldr	r3, [r3, #24]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	f000 80a1 	beq.w	800442c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80042ea:	4b34      	ldr	r3, [pc, #208]	; (80043bc <HAL_RCC_OscConfig+0x470>)
 80042ec:	689b      	ldr	r3, [r3, #8]
 80042ee:	f003 030c 	and.w	r3, r3, #12
 80042f2:	2b08      	cmp	r3, #8
 80042f4:	d05c      	beq.n	80043b0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	699b      	ldr	r3, [r3, #24]
 80042fa:	2b02      	cmp	r3, #2
 80042fc:	d141      	bne.n	8004382 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042fe:	4b31      	ldr	r3, [pc, #196]	; (80043c4 <HAL_RCC_OscConfig+0x478>)
 8004300:	2200      	movs	r2, #0
 8004302:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004304:	f7fc fe42 	bl	8000f8c <HAL_GetTick>
 8004308:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800430a:	e008      	b.n	800431e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800430c:	f7fc fe3e 	bl	8000f8c <HAL_GetTick>
 8004310:	4602      	mov	r2, r0
 8004312:	693b      	ldr	r3, [r7, #16]
 8004314:	1ad3      	subs	r3, r2, r3
 8004316:	2b02      	cmp	r3, #2
 8004318:	d901      	bls.n	800431e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800431a:	2303      	movs	r3, #3
 800431c:	e087      	b.n	800442e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800431e:	4b27      	ldr	r3, [pc, #156]	; (80043bc <HAL_RCC_OscConfig+0x470>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004326:	2b00      	cmp	r3, #0
 8004328:	d1f0      	bne.n	800430c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	69da      	ldr	r2, [r3, #28]
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6a1b      	ldr	r3, [r3, #32]
 8004332:	431a      	orrs	r2, r3
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004338:	019b      	lsls	r3, r3, #6
 800433a:	431a      	orrs	r2, r3
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004340:	085b      	lsrs	r3, r3, #1
 8004342:	3b01      	subs	r3, #1
 8004344:	041b      	lsls	r3, r3, #16
 8004346:	431a      	orrs	r2, r3
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800434c:	061b      	lsls	r3, r3, #24
 800434e:	491b      	ldr	r1, [pc, #108]	; (80043bc <HAL_RCC_OscConfig+0x470>)
 8004350:	4313      	orrs	r3, r2
 8004352:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004354:	4b1b      	ldr	r3, [pc, #108]	; (80043c4 <HAL_RCC_OscConfig+0x478>)
 8004356:	2201      	movs	r2, #1
 8004358:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800435a:	f7fc fe17 	bl	8000f8c <HAL_GetTick>
 800435e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004360:	e008      	b.n	8004374 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004362:	f7fc fe13 	bl	8000f8c <HAL_GetTick>
 8004366:	4602      	mov	r2, r0
 8004368:	693b      	ldr	r3, [r7, #16]
 800436a:	1ad3      	subs	r3, r2, r3
 800436c:	2b02      	cmp	r3, #2
 800436e:	d901      	bls.n	8004374 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004370:	2303      	movs	r3, #3
 8004372:	e05c      	b.n	800442e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004374:	4b11      	ldr	r3, [pc, #68]	; (80043bc <HAL_RCC_OscConfig+0x470>)
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800437c:	2b00      	cmp	r3, #0
 800437e:	d0f0      	beq.n	8004362 <HAL_RCC_OscConfig+0x416>
 8004380:	e054      	b.n	800442c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004382:	4b10      	ldr	r3, [pc, #64]	; (80043c4 <HAL_RCC_OscConfig+0x478>)
 8004384:	2200      	movs	r2, #0
 8004386:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004388:	f7fc fe00 	bl	8000f8c <HAL_GetTick>
 800438c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800438e:	e008      	b.n	80043a2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004390:	f7fc fdfc 	bl	8000f8c <HAL_GetTick>
 8004394:	4602      	mov	r2, r0
 8004396:	693b      	ldr	r3, [r7, #16]
 8004398:	1ad3      	subs	r3, r2, r3
 800439a:	2b02      	cmp	r3, #2
 800439c:	d901      	bls.n	80043a2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800439e:	2303      	movs	r3, #3
 80043a0:	e045      	b.n	800442e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043a2:	4b06      	ldr	r3, [pc, #24]	; (80043bc <HAL_RCC_OscConfig+0x470>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d1f0      	bne.n	8004390 <HAL_RCC_OscConfig+0x444>
 80043ae:	e03d      	b.n	800442c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	699b      	ldr	r3, [r3, #24]
 80043b4:	2b01      	cmp	r3, #1
 80043b6:	d107      	bne.n	80043c8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80043b8:	2301      	movs	r3, #1
 80043ba:	e038      	b.n	800442e <HAL_RCC_OscConfig+0x4e2>
 80043bc:	40023800 	.word	0x40023800
 80043c0:	40007000 	.word	0x40007000
 80043c4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80043c8:	4b1b      	ldr	r3, [pc, #108]	; (8004438 <HAL_RCC_OscConfig+0x4ec>)
 80043ca:	685b      	ldr	r3, [r3, #4]
 80043cc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	699b      	ldr	r3, [r3, #24]
 80043d2:	2b01      	cmp	r3, #1
 80043d4:	d028      	beq.n	8004428 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80043e0:	429a      	cmp	r2, r3
 80043e2:	d121      	bne.n	8004428 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043ee:	429a      	cmp	r2, r3
 80043f0:	d11a      	bne.n	8004428 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80043f2:	68fa      	ldr	r2, [r7, #12]
 80043f4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80043f8:	4013      	ands	r3, r2
 80043fa:	687a      	ldr	r2, [r7, #4]
 80043fc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80043fe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004400:	4293      	cmp	r3, r2
 8004402:	d111      	bne.n	8004428 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800440e:	085b      	lsrs	r3, r3, #1
 8004410:	3b01      	subs	r3, #1
 8004412:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004414:	429a      	cmp	r2, r3
 8004416:	d107      	bne.n	8004428 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004422:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004424:	429a      	cmp	r2, r3
 8004426:	d001      	beq.n	800442c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004428:	2301      	movs	r3, #1
 800442a:	e000      	b.n	800442e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800442c:	2300      	movs	r3, #0
}
 800442e:	4618      	mov	r0, r3
 8004430:	3718      	adds	r7, #24
 8004432:	46bd      	mov	sp, r7
 8004434:	bd80      	pop	{r7, pc}
 8004436:	bf00      	nop
 8004438:	40023800 	.word	0x40023800

0800443c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b084      	sub	sp, #16
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
 8004444:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d101      	bne.n	8004450 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800444c:	2301      	movs	r3, #1
 800444e:	e0cc      	b.n	80045ea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004450:	4b68      	ldr	r3, [pc, #416]	; (80045f4 <HAL_RCC_ClockConfig+0x1b8>)
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f003 0307 	and.w	r3, r3, #7
 8004458:	683a      	ldr	r2, [r7, #0]
 800445a:	429a      	cmp	r2, r3
 800445c:	d90c      	bls.n	8004478 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800445e:	4b65      	ldr	r3, [pc, #404]	; (80045f4 <HAL_RCC_ClockConfig+0x1b8>)
 8004460:	683a      	ldr	r2, [r7, #0]
 8004462:	b2d2      	uxtb	r2, r2
 8004464:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004466:	4b63      	ldr	r3, [pc, #396]	; (80045f4 <HAL_RCC_ClockConfig+0x1b8>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f003 0307 	and.w	r3, r3, #7
 800446e:	683a      	ldr	r2, [r7, #0]
 8004470:	429a      	cmp	r2, r3
 8004472:	d001      	beq.n	8004478 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004474:	2301      	movs	r3, #1
 8004476:	e0b8      	b.n	80045ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f003 0302 	and.w	r3, r3, #2
 8004480:	2b00      	cmp	r3, #0
 8004482:	d020      	beq.n	80044c6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f003 0304 	and.w	r3, r3, #4
 800448c:	2b00      	cmp	r3, #0
 800448e:	d005      	beq.n	800449c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004490:	4b59      	ldr	r3, [pc, #356]	; (80045f8 <HAL_RCC_ClockConfig+0x1bc>)
 8004492:	689b      	ldr	r3, [r3, #8]
 8004494:	4a58      	ldr	r2, [pc, #352]	; (80045f8 <HAL_RCC_ClockConfig+0x1bc>)
 8004496:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800449a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f003 0308 	and.w	r3, r3, #8
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d005      	beq.n	80044b4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80044a8:	4b53      	ldr	r3, [pc, #332]	; (80045f8 <HAL_RCC_ClockConfig+0x1bc>)
 80044aa:	689b      	ldr	r3, [r3, #8]
 80044ac:	4a52      	ldr	r2, [pc, #328]	; (80045f8 <HAL_RCC_ClockConfig+0x1bc>)
 80044ae:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80044b2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80044b4:	4b50      	ldr	r3, [pc, #320]	; (80045f8 <HAL_RCC_ClockConfig+0x1bc>)
 80044b6:	689b      	ldr	r3, [r3, #8]
 80044b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	689b      	ldr	r3, [r3, #8]
 80044c0:	494d      	ldr	r1, [pc, #308]	; (80045f8 <HAL_RCC_ClockConfig+0x1bc>)
 80044c2:	4313      	orrs	r3, r2
 80044c4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f003 0301 	and.w	r3, r3, #1
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d044      	beq.n	800455c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	685b      	ldr	r3, [r3, #4]
 80044d6:	2b01      	cmp	r3, #1
 80044d8:	d107      	bne.n	80044ea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044da:	4b47      	ldr	r3, [pc, #284]	; (80045f8 <HAL_RCC_ClockConfig+0x1bc>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d119      	bne.n	800451a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044e6:	2301      	movs	r3, #1
 80044e8:	e07f      	b.n	80045ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	685b      	ldr	r3, [r3, #4]
 80044ee:	2b02      	cmp	r3, #2
 80044f0:	d003      	beq.n	80044fa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80044f6:	2b03      	cmp	r3, #3
 80044f8:	d107      	bne.n	800450a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044fa:	4b3f      	ldr	r3, [pc, #252]	; (80045f8 <HAL_RCC_ClockConfig+0x1bc>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004502:	2b00      	cmp	r3, #0
 8004504:	d109      	bne.n	800451a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004506:	2301      	movs	r3, #1
 8004508:	e06f      	b.n	80045ea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800450a:	4b3b      	ldr	r3, [pc, #236]	; (80045f8 <HAL_RCC_ClockConfig+0x1bc>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f003 0302 	and.w	r3, r3, #2
 8004512:	2b00      	cmp	r3, #0
 8004514:	d101      	bne.n	800451a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004516:	2301      	movs	r3, #1
 8004518:	e067      	b.n	80045ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800451a:	4b37      	ldr	r3, [pc, #220]	; (80045f8 <HAL_RCC_ClockConfig+0x1bc>)
 800451c:	689b      	ldr	r3, [r3, #8]
 800451e:	f023 0203 	bic.w	r2, r3, #3
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	685b      	ldr	r3, [r3, #4]
 8004526:	4934      	ldr	r1, [pc, #208]	; (80045f8 <HAL_RCC_ClockConfig+0x1bc>)
 8004528:	4313      	orrs	r3, r2
 800452a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800452c:	f7fc fd2e 	bl	8000f8c <HAL_GetTick>
 8004530:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004532:	e00a      	b.n	800454a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004534:	f7fc fd2a 	bl	8000f8c <HAL_GetTick>
 8004538:	4602      	mov	r2, r0
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	1ad3      	subs	r3, r2, r3
 800453e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004542:	4293      	cmp	r3, r2
 8004544:	d901      	bls.n	800454a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004546:	2303      	movs	r3, #3
 8004548:	e04f      	b.n	80045ea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800454a:	4b2b      	ldr	r3, [pc, #172]	; (80045f8 <HAL_RCC_ClockConfig+0x1bc>)
 800454c:	689b      	ldr	r3, [r3, #8]
 800454e:	f003 020c 	and.w	r2, r3, #12
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	685b      	ldr	r3, [r3, #4]
 8004556:	009b      	lsls	r3, r3, #2
 8004558:	429a      	cmp	r2, r3
 800455a:	d1eb      	bne.n	8004534 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800455c:	4b25      	ldr	r3, [pc, #148]	; (80045f4 <HAL_RCC_ClockConfig+0x1b8>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f003 0307 	and.w	r3, r3, #7
 8004564:	683a      	ldr	r2, [r7, #0]
 8004566:	429a      	cmp	r2, r3
 8004568:	d20c      	bcs.n	8004584 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800456a:	4b22      	ldr	r3, [pc, #136]	; (80045f4 <HAL_RCC_ClockConfig+0x1b8>)
 800456c:	683a      	ldr	r2, [r7, #0]
 800456e:	b2d2      	uxtb	r2, r2
 8004570:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004572:	4b20      	ldr	r3, [pc, #128]	; (80045f4 <HAL_RCC_ClockConfig+0x1b8>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f003 0307 	and.w	r3, r3, #7
 800457a:	683a      	ldr	r2, [r7, #0]
 800457c:	429a      	cmp	r2, r3
 800457e:	d001      	beq.n	8004584 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004580:	2301      	movs	r3, #1
 8004582:	e032      	b.n	80045ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f003 0304 	and.w	r3, r3, #4
 800458c:	2b00      	cmp	r3, #0
 800458e:	d008      	beq.n	80045a2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004590:	4b19      	ldr	r3, [pc, #100]	; (80045f8 <HAL_RCC_ClockConfig+0x1bc>)
 8004592:	689b      	ldr	r3, [r3, #8]
 8004594:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	68db      	ldr	r3, [r3, #12]
 800459c:	4916      	ldr	r1, [pc, #88]	; (80045f8 <HAL_RCC_ClockConfig+0x1bc>)
 800459e:	4313      	orrs	r3, r2
 80045a0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f003 0308 	and.w	r3, r3, #8
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d009      	beq.n	80045c2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80045ae:	4b12      	ldr	r3, [pc, #72]	; (80045f8 <HAL_RCC_ClockConfig+0x1bc>)
 80045b0:	689b      	ldr	r3, [r3, #8]
 80045b2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	691b      	ldr	r3, [r3, #16]
 80045ba:	00db      	lsls	r3, r3, #3
 80045bc:	490e      	ldr	r1, [pc, #56]	; (80045f8 <HAL_RCC_ClockConfig+0x1bc>)
 80045be:	4313      	orrs	r3, r2
 80045c0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80045c2:	f000 f821 	bl	8004608 <HAL_RCC_GetSysClockFreq>
 80045c6:	4602      	mov	r2, r0
 80045c8:	4b0b      	ldr	r3, [pc, #44]	; (80045f8 <HAL_RCC_ClockConfig+0x1bc>)
 80045ca:	689b      	ldr	r3, [r3, #8]
 80045cc:	091b      	lsrs	r3, r3, #4
 80045ce:	f003 030f 	and.w	r3, r3, #15
 80045d2:	490a      	ldr	r1, [pc, #40]	; (80045fc <HAL_RCC_ClockConfig+0x1c0>)
 80045d4:	5ccb      	ldrb	r3, [r1, r3]
 80045d6:	fa22 f303 	lsr.w	r3, r2, r3
 80045da:	4a09      	ldr	r2, [pc, #36]	; (8004600 <HAL_RCC_ClockConfig+0x1c4>)
 80045dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80045de:	4b09      	ldr	r3, [pc, #36]	; (8004604 <HAL_RCC_ClockConfig+0x1c8>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	4618      	mov	r0, r3
 80045e4:	f7fc fc8e 	bl	8000f04 <HAL_InitTick>

  return HAL_OK;
 80045e8:	2300      	movs	r3, #0
}
 80045ea:	4618      	mov	r0, r3
 80045ec:	3710      	adds	r7, #16
 80045ee:	46bd      	mov	sp, r7
 80045f0:	bd80      	pop	{r7, pc}
 80045f2:	bf00      	nop
 80045f4:	40023c00 	.word	0x40023c00
 80045f8:	40023800 	.word	0x40023800
 80045fc:	080067d4 	.word	0x080067d4
 8004600:	20000000 	.word	0x20000000
 8004604:	20000004 	.word	0x20000004

08004608 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004608:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800460c:	b090      	sub	sp, #64	; 0x40
 800460e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004610:	2300      	movs	r3, #0
 8004612:	637b      	str	r3, [r7, #52]	; 0x34
 8004614:	2300      	movs	r3, #0
 8004616:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004618:	2300      	movs	r3, #0
 800461a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 800461c:	2300      	movs	r3, #0
 800461e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004620:	4b59      	ldr	r3, [pc, #356]	; (8004788 <HAL_RCC_GetSysClockFreq+0x180>)
 8004622:	689b      	ldr	r3, [r3, #8]
 8004624:	f003 030c 	and.w	r3, r3, #12
 8004628:	2b08      	cmp	r3, #8
 800462a:	d00d      	beq.n	8004648 <HAL_RCC_GetSysClockFreq+0x40>
 800462c:	2b08      	cmp	r3, #8
 800462e:	f200 80a1 	bhi.w	8004774 <HAL_RCC_GetSysClockFreq+0x16c>
 8004632:	2b00      	cmp	r3, #0
 8004634:	d002      	beq.n	800463c <HAL_RCC_GetSysClockFreq+0x34>
 8004636:	2b04      	cmp	r3, #4
 8004638:	d003      	beq.n	8004642 <HAL_RCC_GetSysClockFreq+0x3a>
 800463a:	e09b      	b.n	8004774 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800463c:	4b53      	ldr	r3, [pc, #332]	; (800478c <HAL_RCC_GetSysClockFreq+0x184>)
 800463e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8004640:	e09b      	b.n	800477a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004642:	4b53      	ldr	r3, [pc, #332]	; (8004790 <HAL_RCC_GetSysClockFreq+0x188>)
 8004644:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004646:	e098      	b.n	800477a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004648:	4b4f      	ldr	r3, [pc, #316]	; (8004788 <HAL_RCC_GetSysClockFreq+0x180>)
 800464a:	685b      	ldr	r3, [r3, #4]
 800464c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004650:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004652:	4b4d      	ldr	r3, [pc, #308]	; (8004788 <HAL_RCC_GetSysClockFreq+0x180>)
 8004654:	685b      	ldr	r3, [r3, #4]
 8004656:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800465a:	2b00      	cmp	r3, #0
 800465c:	d028      	beq.n	80046b0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800465e:	4b4a      	ldr	r3, [pc, #296]	; (8004788 <HAL_RCC_GetSysClockFreq+0x180>)
 8004660:	685b      	ldr	r3, [r3, #4]
 8004662:	099b      	lsrs	r3, r3, #6
 8004664:	2200      	movs	r2, #0
 8004666:	623b      	str	r3, [r7, #32]
 8004668:	627a      	str	r2, [r7, #36]	; 0x24
 800466a:	6a3b      	ldr	r3, [r7, #32]
 800466c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004670:	2100      	movs	r1, #0
 8004672:	4b47      	ldr	r3, [pc, #284]	; (8004790 <HAL_RCC_GetSysClockFreq+0x188>)
 8004674:	fb03 f201 	mul.w	r2, r3, r1
 8004678:	2300      	movs	r3, #0
 800467a:	fb00 f303 	mul.w	r3, r0, r3
 800467e:	4413      	add	r3, r2
 8004680:	4a43      	ldr	r2, [pc, #268]	; (8004790 <HAL_RCC_GetSysClockFreq+0x188>)
 8004682:	fba0 1202 	umull	r1, r2, r0, r2
 8004686:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004688:	460a      	mov	r2, r1
 800468a:	62ba      	str	r2, [r7, #40]	; 0x28
 800468c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800468e:	4413      	add	r3, r2
 8004690:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004692:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004694:	2200      	movs	r2, #0
 8004696:	61bb      	str	r3, [r7, #24]
 8004698:	61fa      	str	r2, [r7, #28]
 800469a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800469e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80046a2:	f7fb fde5 	bl	8000270 <__aeabi_uldivmod>
 80046a6:	4602      	mov	r2, r0
 80046a8:	460b      	mov	r3, r1
 80046aa:	4613      	mov	r3, r2
 80046ac:	63fb      	str	r3, [r7, #60]	; 0x3c
 80046ae:	e053      	b.n	8004758 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80046b0:	4b35      	ldr	r3, [pc, #212]	; (8004788 <HAL_RCC_GetSysClockFreq+0x180>)
 80046b2:	685b      	ldr	r3, [r3, #4]
 80046b4:	099b      	lsrs	r3, r3, #6
 80046b6:	2200      	movs	r2, #0
 80046b8:	613b      	str	r3, [r7, #16]
 80046ba:	617a      	str	r2, [r7, #20]
 80046bc:	693b      	ldr	r3, [r7, #16]
 80046be:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80046c2:	f04f 0b00 	mov.w	fp, #0
 80046c6:	4652      	mov	r2, sl
 80046c8:	465b      	mov	r3, fp
 80046ca:	f04f 0000 	mov.w	r0, #0
 80046ce:	f04f 0100 	mov.w	r1, #0
 80046d2:	0159      	lsls	r1, r3, #5
 80046d4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80046d8:	0150      	lsls	r0, r2, #5
 80046da:	4602      	mov	r2, r0
 80046dc:	460b      	mov	r3, r1
 80046de:	ebb2 080a 	subs.w	r8, r2, sl
 80046e2:	eb63 090b 	sbc.w	r9, r3, fp
 80046e6:	f04f 0200 	mov.w	r2, #0
 80046ea:	f04f 0300 	mov.w	r3, #0
 80046ee:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80046f2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80046f6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80046fa:	ebb2 0408 	subs.w	r4, r2, r8
 80046fe:	eb63 0509 	sbc.w	r5, r3, r9
 8004702:	f04f 0200 	mov.w	r2, #0
 8004706:	f04f 0300 	mov.w	r3, #0
 800470a:	00eb      	lsls	r3, r5, #3
 800470c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004710:	00e2      	lsls	r2, r4, #3
 8004712:	4614      	mov	r4, r2
 8004714:	461d      	mov	r5, r3
 8004716:	eb14 030a 	adds.w	r3, r4, sl
 800471a:	603b      	str	r3, [r7, #0]
 800471c:	eb45 030b 	adc.w	r3, r5, fp
 8004720:	607b      	str	r3, [r7, #4]
 8004722:	f04f 0200 	mov.w	r2, #0
 8004726:	f04f 0300 	mov.w	r3, #0
 800472a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800472e:	4629      	mov	r1, r5
 8004730:	028b      	lsls	r3, r1, #10
 8004732:	4621      	mov	r1, r4
 8004734:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004738:	4621      	mov	r1, r4
 800473a:	028a      	lsls	r2, r1, #10
 800473c:	4610      	mov	r0, r2
 800473e:	4619      	mov	r1, r3
 8004740:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004742:	2200      	movs	r2, #0
 8004744:	60bb      	str	r3, [r7, #8]
 8004746:	60fa      	str	r2, [r7, #12]
 8004748:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800474c:	f7fb fd90 	bl	8000270 <__aeabi_uldivmod>
 8004750:	4602      	mov	r2, r0
 8004752:	460b      	mov	r3, r1
 8004754:	4613      	mov	r3, r2
 8004756:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004758:	4b0b      	ldr	r3, [pc, #44]	; (8004788 <HAL_RCC_GetSysClockFreq+0x180>)
 800475a:	685b      	ldr	r3, [r3, #4]
 800475c:	0c1b      	lsrs	r3, r3, #16
 800475e:	f003 0303 	and.w	r3, r3, #3
 8004762:	3301      	adds	r3, #1
 8004764:	005b      	lsls	r3, r3, #1
 8004766:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8004768:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800476a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800476c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004770:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004772:	e002      	b.n	800477a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004774:	4b05      	ldr	r3, [pc, #20]	; (800478c <HAL_RCC_GetSysClockFreq+0x184>)
 8004776:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004778:	bf00      	nop
    }
  }
  return sysclockfreq;
 800477a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800477c:	4618      	mov	r0, r3
 800477e:	3740      	adds	r7, #64	; 0x40
 8004780:	46bd      	mov	sp, r7
 8004782:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004786:	bf00      	nop
 8004788:	40023800 	.word	0x40023800
 800478c:	00f42400 	.word	0x00f42400
 8004790:	017d7840 	.word	0x017d7840

08004794 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004794:	b480      	push	{r7}
 8004796:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004798:	4b03      	ldr	r3, [pc, #12]	; (80047a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800479a:	681b      	ldr	r3, [r3, #0]
}
 800479c:	4618      	mov	r0, r3
 800479e:	46bd      	mov	sp, r7
 80047a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a4:	4770      	bx	lr
 80047a6:	bf00      	nop
 80047a8:	20000000 	.word	0x20000000

080047ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80047b0:	f7ff fff0 	bl	8004794 <HAL_RCC_GetHCLKFreq>
 80047b4:	4602      	mov	r2, r0
 80047b6:	4b05      	ldr	r3, [pc, #20]	; (80047cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80047b8:	689b      	ldr	r3, [r3, #8]
 80047ba:	0a9b      	lsrs	r3, r3, #10
 80047bc:	f003 0307 	and.w	r3, r3, #7
 80047c0:	4903      	ldr	r1, [pc, #12]	; (80047d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80047c2:	5ccb      	ldrb	r3, [r1, r3]
 80047c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80047c8:	4618      	mov	r0, r3
 80047ca:	bd80      	pop	{r7, pc}
 80047cc:	40023800 	.word	0x40023800
 80047d0:	080067e4 	.word	0x080067e4

080047d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80047d8:	f7ff ffdc 	bl	8004794 <HAL_RCC_GetHCLKFreq>
 80047dc:	4602      	mov	r2, r0
 80047de:	4b05      	ldr	r3, [pc, #20]	; (80047f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80047e0:	689b      	ldr	r3, [r3, #8]
 80047e2:	0b5b      	lsrs	r3, r3, #13
 80047e4:	f003 0307 	and.w	r3, r3, #7
 80047e8:	4903      	ldr	r1, [pc, #12]	; (80047f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80047ea:	5ccb      	ldrb	r3, [r1, r3]
 80047ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80047f0:	4618      	mov	r0, r3
 80047f2:	bd80      	pop	{r7, pc}
 80047f4:	40023800 	.word	0x40023800
 80047f8:	080067e4 	.word	0x080067e4

080047fc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b082      	sub	sp, #8
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d101      	bne.n	800480e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800480a:	2301      	movs	r3, #1
 800480c:	e03f      	b.n	800488e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004814:	b2db      	uxtb	r3, r3
 8004816:	2b00      	cmp	r3, #0
 8004818:	d106      	bne.n	8004828 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2200      	movs	r2, #0
 800481e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004822:	6878      	ldr	r0, [r7, #4]
 8004824:	f7fc f9d4 	bl	8000bd0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2224      	movs	r2, #36	; 0x24
 800482c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	68da      	ldr	r2, [r3, #12]
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800483e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004840:	6878      	ldr	r0, [r7, #4]
 8004842:	f000 fd7b 	bl	800533c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	691a      	ldr	r2, [r3, #16]
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004854:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	695a      	ldr	r2, [r3, #20]
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004864:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	68da      	ldr	r2, [r3, #12]
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004874:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2200      	movs	r2, #0
 800487a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2220      	movs	r2, #32
 8004880:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2220      	movs	r2, #32
 8004888:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800488c:	2300      	movs	r3, #0
}
 800488e:	4618      	mov	r0, r3
 8004890:	3708      	adds	r7, #8
 8004892:	46bd      	mov	sp, r7
 8004894:	bd80      	pop	{r7, pc}

08004896 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004896:	b580      	push	{r7, lr}
 8004898:	b08a      	sub	sp, #40	; 0x28
 800489a:	af02      	add	r7, sp, #8
 800489c:	60f8      	str	r0, [r7, #12]
 800489e:	60b9      	str	r1, [r7, #8]
 80048a0:	603b      	str	r3, [r7, #0]
 80048a2:	4613      	mov	r3, r2
 80048a4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80048a6:	2300      	movs	r3, #0
 80048a8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048b0:	b2db      	uxtb	r3, r3
 80048b2:	2b20      	cmp	r3, #32
 80048b4:	d17c      	bne.n	80049b0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80048b6:	68bb      	ldr	r3, [r7, #8]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d002      	beq.n	80048c2 <HAL_UART_Transmit+0x2c>
 80048bc:	88fb      	ldrh	r3, [r7, #6]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d101      	bne.n	80048c6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80048c2:	2301      	movs	r3, #1
 80048c4:	e075      	b.n	80049b2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048cc:	2b01      	cmp	r3, #1
 80048ce:	d101      	bne.n	80048d4 <HAL_UART_Transmit+0x3e>
 80048d0:	2302      	movs	r3, #2
 80048d2:	e06e      	b.n	80049b2 <HAL_UART_Transmit+0x11c>
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	2201      	movs	r2, #1
 80048d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	2200      	movs	r2, #0
 80048e0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	2221      	movs	r2, #33	; 0x21
 80048e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80048ea:	f7fc fb4f 	bl	8000f8c <HAL_GetTick>
 80048ee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	88fa      	ldrh	r2, [r7, #6]
 80048f4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	88fa      	ldrh	r2, [r7, #6]
 80048fa:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	689b      	ldr	r3, [r3, #8]
 8004900:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004904:	d108      	bne.n	8004918 <HAL_UART_Transmit+0x82>
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	691b      	ldr	r3, [r3, #16]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d104      	bne.n	8004918 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800490e:	2300      	movs	r3, #0
 8004910:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004912:	68bb      	ldr	r3, [r7, #8]
 8004914:	61bb      	str	r3, [r7, #24]
 8004916:	e003      	b.n	8004920 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004918:	68bb      	ldr	r3, [r7, #8]
 800491a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800491c:	2300      	movs	r3, #0
 800491e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	2200      	movs	r2, #0
 8004924:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004928:	e02a      	b.n	8004980 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	9300      	str	r3, [sp, #0]
 800492e:	697b      	ldr	r3, [r7, #20]
 8004930:	2200      	movs	r2, #0
 8004932:	2180      	movs	r1, #128	; 0x80
 8004934:	68f8      	ldr	r0, [r7, #12]
 8004936:	f000 faf9 	bl	8004f2c <UART_WaitOnFlagUntilTimeout>
 800493a:	4603      	mov	r3, r0
 800493c:	2b00      	cmp	r3, #0
 800493e:	d001      	beq.n	8004944 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004940:	2303      	movs	r3, #3
 8004942:	e036      	b.n	80049b2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004944:	69fb      	ldr	r3, [r7, #28]
 8004946:	2b00      	cmp	r3, #0
 8004948:	d10b      	bne.n	8004962 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800494a:	69bb      	ldr	r3, [r7, #24]
 800494c:	881b      	ldrh	r3, [r3, #0]
 800494e:	461a      	mov	r2, r3
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004958:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800495a:	69bb      	ldr	r3, [r7, #24]
 800495c:	3302      	adds	r3, #2
 800495e:	61bb      	str	r3, [r7, #24]
 8004960:	e007      	b.n	8004972 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004962:	69fb      	ldr	r3, [r7, #28]
 8004964:	781a      	ldrb	r2, [r3, #0]
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800496c:	69fb      	ldr	r3, [r7, #28]
 800496e:	3301      	adds	r3, #1
 8004970:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004976:	b29b      	uxth	r3, r3
 8004978:	3b01      	subs	r3, #1
 800497a:	b29a      	uxth	r2, r3
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004984:	b29b      	uxth	r3, r3
 8004986:	2b00      	cmp	r3, #0
 8004988:	d1cf      	bne.n	800492a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	9300      	str	r3, [sp, #0]
 800498e:	697b      	ldr	r3, [r7, #20]
 8004990:	2200      	movs	r2, #0
 8004992:	2140      	movs	r1, #64	; 0x40
 8004994:	68f8      	ldr	r0, [r7, #12]
 8004996:	f000 fac9 	bl	8004f2c <UART_WaitOnFlagUntilTimeout>
 800499a:	4603      	mov	r3, r0
 800499c:	2b00      	cmp	r3, #0
 800499e:	d001      	beq.n	80049a4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80049a0:	2303      	movs	r3, #3
 80049a2:	e006      	b.n	80049b2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	2220      	movs	r2, #32
 80049a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80049ac:	2300      	movs	r3, #0
 80049ae:	e000      	b.n	80049b2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80049b0:	2302      	movs	r3, #2
  }
}
 80049b2:	4618      	mov	r0, r3
 80049b4:	3720      	adds	r7, #32
 80049b6:	46bd      	mov	sp, r7
 80049b8:	bd80      	pop	{r7, pc}
	...

080049bc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	b0ba      	sub	sp, #232	; 0xe8
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	68db      	ldr	r3, [r3, #12]
 80049d4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	695b      	ldr	r3, [r3, #20]
 80049de:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80049e2:	2300      	movs	r3, #0
 80049e4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80049e8:	2300      	movs	r3, #0
 80049ea:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80049ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049f2:	f003 030f 	and.w	r3, r3, #15
 80049f6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80049fa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d10f      	bne.n	8004a22 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004a02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a06:	f003 0320 	and.w	r3, r3, #32
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d009      	beq.n	8004a22 <HAL_UART_IRQHandler+0x66>
 8004a0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a12:	f003 0320 	and.w	r3, r3, #32
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d003      	beq.n	8004a22 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004a1a:	6878      	ldr	r0, [r7, #4]
 8004a1c:	f000 fbd3 	bl	80051c6 <UART_Receive_IT>
      return;
 8004a20:	e256      	b.n	8004ed0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004a22:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	f000 80de 	beq.w	8004be8 <HAL_UART_IRQHandler+0x22c>
 8004a2c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004a30:	f003 0301 	and.w	r3, r3, #1
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d106      	bne.n	8004a46 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004a38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a3c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	f000 80d1 	beq.w	8004be8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004a46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a4a:	f003 0301 	and.w	r3, r3, #1
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d00b      	beq.n	8004a6a <HAL_UART_IRQHandler+0xae>
 8004a52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d005      	beq.n	8004a6a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a62:	f043 0201 	orr.w	r2, r3, #1
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004a6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a6e:	f003 0304 	and.w	r3, r3, #4
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d00b      	beq.n	8004a8e <HAL_UART_IRQHandler+0xd2>
 8004a76:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004a7a:	f003 0301 	and.w	r3, r3, #1
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d005      	beq.n	8004a8e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a86:	f043 0202 	orr.w	r2, r3, #2
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004a8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a92:	f003 0302 	and.w	r3, r3, #2
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d00b      	beq.n	8004ab2 <HAL_UART_IRQHandler+0xf6>
 8004a9a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004a9e:	f003 0301 	and.w	r3, r3, #1
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d005      	beq.n	8004ab2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aaa:	f043 0204 	orr.w	r2, r3, #4
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004ab2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ab6:	f003 0308 	and.w	r3, r3, #8
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d011      	beq.n	8004ae2 <HAL_UART_IRQHandler+0x126>
 8004abe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ac2:	f003 0320 	and.w	r3, r3, #32
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d105      	bne.n	8004ad6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004aca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004ace:	f003 0301 	and.w	r3, r3, #1
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d005      	beq.n	8004ae2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ada:	f043 0208 	orr.w	r2, r3, #8
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	f000 81ed 	beq.w	8004ec6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004aec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004af0:	f003 0320 	and.w	r3, r3, #32
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d008      	beq.n	8004b0a <HAL_UART_IRQHandler+0x14e>
 8004af8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004afc:	f003 0320 	and.w	r3, r3, #32
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d002      	beq.n	8004b0a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004b04:	6878      	ldr	r0, [r7, #4]
 8004b06:	f000 fb5e 	bl	80051c6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	695b      	ldr	r3, [r3, #20]
 8004b10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b14:	2b40      	cmp	r3, #64	; 0x40
 8004b16:	bf0c      	ite	eq
 8004b18:	2301      	moveq	r3, #1
 8004b1a:	2300      	movne	r3, #0
 8004b1c:	b2db      	uxtb	r3, r3
 8004b1e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b26:	f003 0308 	and.w	r3, r3, #8
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d103      	bne.n	8004b36 <HAL_UART_IRQHandler+0x17a>
 8004b2e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d04f      	beq.n	8004bd6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004b36:	6878      	ldr	r0, [r7, #4]
 8004b38:	f000 fa66 	bl	8005008 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	695b      	ldr	r3, [r3, #20]
 8004b42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b46:	2b40      	cmp	r3, #64	; 0x40
 8004b48:	d141      	bne.n	8004bce <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	3314      	adds	r3, #20
 8004b50:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b54:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004b58:	e853 3f00 	ldrex	r3, [r3]
 8004b5c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004b60:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004b64:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b68:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	3314      	adds	r3, #20
 8004b72:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004b76:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004b7a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b7e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004b82:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004b86:	e841 2300 	strex	r3, r2, [r1]
 8004b8a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004b8e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d1d9      	bne.n	8004b4a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d013      	beq.n	8004bc6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ba2:	4a7d      	ldr	r2, [pc, #500]	; (8004d98 <HAL_UART_IRQHandler+0x3dc>)
 8004ba4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004baa:	4618      	mov	r0, r3
 8004bac:	f7fc fb9f 	bl	80012ee <HAL_DMA_Abort_IT>
 8004bb0:	4603      	mov	r3, r0
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d016      	beq.n	8004be4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bbc:	687a      	ldr	r2, [r7, #4]
 8004bbe:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004bc0:	4610      	mov	r0, r2
 8004bc2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004bc4:	e00e      	b.n	8004be4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004bc6:	6878      	ldr	r0, [r7, #4]
 8004bc8:	f000 f99a 	bl	8004f00 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004bcc:	e00a      	b.n	8004be4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004bce:	6878      	ldr	r0, [r7, #4]
 8004bd0:	f000 f996 	bl	8004f00 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004bd4:	e006      	b.n	8004be4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004bd6:	6878      	ldr	r0, [r7, #4]
 8004bd8:	f000 f992 	bl	8004f00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2200      	movs	r2, #0
 8004be0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004be2:	e170      	b.n	8004ec6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004be4:	bf00      	nop
    return;
 8004be6:	e16e      	b.n	8004ec6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bec:	2b01      	cmp	r3, #1
 8004bee:	f040 814a 	bne.w	8004e86 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004bf2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004bf6:	f003 0310 	and.w	r3, r3, #16
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	f000 8143 	beq.w	8004e86 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004c00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c04:	f003 0310 	and.w	r3, r3, #16
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	f000 813c 	beq.w	8004e86 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004c0e:	2300      	movs	r3, #0
 8004c10:	60bb      	str	r3, [r7, #8]
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	60bb      	str	r3, [r7, #8]
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	685b      	ldr	r3, [r3, #4]
 8004c20:	60bb      	str	r3, [r7, #8]
 8004c22:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	695b      	ldr	r3, [r3, #20]
 8004c2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c2e:	2b40      	cmp	r3, #64	; 0x40
 8004c30:	f040 80b4 	bne.w	8004d9c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	685b      	ldr	r3, [r3, #4]
 8004c3c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004c40:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	f000 8140 	beq.w	8004eca <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004c4e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004c52:	429a      	cmp	r2, r3
 8004c54:	f080 8139 	bcs.w	8004eca <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004c5e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c64:	69db      	ldr	r3, [r3, #28]
 8004c66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c6a:	f000 8088 	beq.w	8004d7e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	330c      	adds	r3, #12
 8004c74:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c78:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004c7c:	e853 3f00 	ldrex	r3, [r3]
 8004c80:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004c84:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004c88:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c8c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	330c      	adds	r3, #12
 8004c96:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004c9a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004c9e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ca2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004ca6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004caa:	e841 2300 	strex	r3, r2, [r1]
 8004cae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004cb2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d1d9      	bne.n	8004c6e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	3314      	adds	r3, #20
 8004cc0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cc2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004cc4:	e853 3f00 	ldrex	r3, [r3]
 8004cc8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004cca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004ccc:	f023 0301 	bic.w	r3, r3, #1
 8004cd0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	3314      	adds	r3, #20
 8004cda:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004cde:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004ce2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ce4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004ce6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004cea:	e841 2300 	strex	r3, r2, [r1]
 8004cee:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004cf0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d1e1      	bne.n	8004cba <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	3314      	adds	r3, #20
 8004cfc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cfe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004d00:	e853 3f00 	ldrex	r3, [r3]
 8004d04:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004d06:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d08:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d0c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	3314      	adds	r3, #20
 8004d16:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004d1a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004d1c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d1e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004d20:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004d22:	e841 2300 	strex	r3, r2, [r1]
 8004d26:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004d28:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d1e3      	bne.n	8004cf6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2220      	movs	r2, #32
 8004d32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2200      	movs	r2, #0
 8004d3a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	330c      	adds	r3, #12
 8004d42:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d46:	e853 3f00 	ldrex	r3, [r3]
 8004d4a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004d4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d4e:	f023 0310 	bic.w	r3, r3, #16
 8004d52:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	330c      	adds	r3, #12
 8004d5c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004d60:	65ba      	str	r2, [r7, #88]	; 0x58
 8004d62:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d64:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004d66:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004d68:	e841 2300 	strex	r3, r2, [r1]
 8004d6c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004d6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d1e3      	bne.n	8004d3c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d78:	4618      	mov	r0, r3
 8004d7a:	f7fc fa48 	bl	800120e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004d86:	b29b      	uxth	r3, r3
 8004d88:	1ad3      	subs	r3, r2, r3
 8004d8a:	b29b      	uxth	r3, r3
 8004d8c:	4619      	mov	r1, r3
 8004d8e:	6878      	ldr	r0, [r7, #4]
 8004d90:	f000 f8c0 	bl	8004f14 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004d94:	e099      	b.n	8004eca <HAL_UART_IRQHandler+0x50e>
 8004d96:	bf00      	nop
 8004d98:	080050cf 	.word	0x080050cf
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004da4:	b29b      	uxth	r3, r3
 8004da6:	1ad3      	subs	r3, r2, r3
 8004da8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004db0:	b29b      	uxth	r3, r3
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	f000 808b 	beq.w	8004ece <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004db8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	f000 8086 	beq.w	8004ece <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	330c      	adds	r3, #12
 8004dc8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dcc:	e853 3f00 	ldrex	r3, [r3]
 8004dd0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004dd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004dd4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004dd8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	330c      	adds	r3, #12
 8004de2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004de6:	647a      	str	r2, [r7, #68]	; 0x44
 8004de8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dea:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004dec:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004dee:	e841 2300 	strex	r3, r2, [r1]
 8004df2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004df4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d1e3      	bne.n	8004dc2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	3314      	adds	r3, #20
 8004e00:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e04:	e853 3f00 	ldrex	r3, [r3]
 8004e08:	623b      	str	r3, [r7, #32]
   return(result);
 8004e0a:	6a3b      	ldr	r3, [r7, #32]
 8004e0c:	f023 0301 	bic.w	r3, r3, #1
 8004e10:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	3314      	adds	r3, #20
 8004e1a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004e1e:	633a      	str	r2, [r7, #48]	; 0x30
 8004e20:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e22:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004e24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e26:	e841 2300 	strex	r3, r2, [r1]
 8004e2a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004e2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d1e3      	bne.n	8004dfa <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2220      	movs	r2, #32
 8004e36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	330c      	adds	r3, #12
 8004e46:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e48:	693b      	ldr	r3, [r7, #16]
 8004e4a:	e853 3f00 	ldrex	r3, [r3]
 8004e4e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	f023 0310 	bic.w	r3, r3, #16
 8004e56:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	330c      	adds	r3, #12
 8004e60:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004e64:	61fa      	str	r2, [r7, #28]
 8004e66:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e68:	69b9      	ldr	r1, [r7, #24]
 8004e6a:	69fa      	ldr	r2, [r7, #28]
 8004e6c:	e841 2300 	strex	r3, r2, [r1]
 8004e70:	617b      	str	r3, [r7, #20]
   return(result);
 8004e72:	697b      	ldr	r3, [r7, #20]
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d1e3      	bne.n	8004e40 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004e78:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004e7c:	4619      	mov	r1, r3
 8004e7e:	6878      	ldr	r0, [r7, #4]
 8004e80:	f000 f848 	bl	8004f14 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004e84:	e023      	b.n	8004ece <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004e86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d009      	beq.n	8004ea6 <HAL_UART_IRQHandler+0x4ea>
 8004e92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d003      	beq.n	8004ea6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004e9e:	6878      	ldr	r0, [r7, #4]
 8004ea0:	f000 f929 	bl	80050f6 <UART_Transmit_IT>
    return;
 8004ea4:	e014      	b.n	8004ed0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004ea6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004eaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d00e      	beq.n	8004ed0 <HAL_UART_IRQHandler+0x514>
 8004eb2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004eb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d008      	beq.n	8004ed0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004ebe:	6878      	ldr	r0, [r7, #4]
 8004ec0:	f000 f969 	bl	8005196 <UART_EndTransmit_IT>
    return;
 8004ec4:	e004      	b.n	8004ed0 <HAL_UART_IRQHandler+0x514>
    return;
 8004ec6:	bf00      	nop
 8004ec8:	e002      	b.n	8004ed0 <HAL_UART_IRQHandler+0x514>
      return;
 8004eca:	bf00      	nop
 8004ecc:	e000      	b.n	8004ed0 <HAL_UART_IRQHandler+0x514>
      return;
 8004ece:	bf00      	nop
  }
}
 8004ed0:	37e8      	adds	r7, #232	; 0xe8
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	bd80      	pop	{r7, pc}
 8004ed6:	bf00      	nop

08004ed8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004ed8:	b480      	push	{r7}
 8004eda:	b083      	sub	sp, #12
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004ee0:	bf00      	nop
 8004ee2:	370c      	adds	r7, #12
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eea:	4770      	bx	lr

08004eec <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004eec:	b480      	push	{r7}
 8004eee:	b083      	sub	sp, #12
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004ef4:	bf00      	nop
 8004ef6:	370c      	adds	r7, #12
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efe:	4770      	bx	lr

08004f00 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004f00:	b480      	push	{r7}
 8004f02:	b083      	sub	sp, #12
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004f08:	bf00      	nop
 8004f0a:	370c      	adds	r7, #12
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f12:	4770      	bx	lr

08004f14 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004f14:	b480      	push	{r7}
 8004f16:	b083      	sub	sp, #12
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
 8004f1c:	460b      	mov	r3, r1
 8004f1e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004f20:	bf00      	nop
 8004f22:	370c      	adds	r7, #12
 8004f24:	46bd      	mov	sp, r7
 8004f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2a:	4770      	bx	lr

08004f2c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b090      	sub	sp, #64	; 0x40
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	60f8      	str	r0, [r7, #12]
 8004f34:	60b9      	str	r1, [r7, #8]
 8004f36:	603b      	str	r3, [r7, #0]
 8004f38:	4613      	mov	r3, r2
 8004f3a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f3c:	e050      	b.n	8004fe0 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f44:	d04c      	beq.n	8004fe0 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004f46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d007      	beq.n	8004f5c <UART_WaitOnFlagUntilTimeout+0x30>
 8004f4c:	f7fc f81e 	bl	8000f8c <HAL_GetTick>
 8004f50:	4602      	mov	r2, r0
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	1ad3      	subs	r3, r2, r3
 8004f56:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004f58:	429a      	cmp	r2, r3
 8004f5a:	d241      	bcs.n	8004fe0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	330c      	adds	r3, #12
 8004f62:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f66:	e853 3f00 	ldrex	r3, [r3]
 8004f6a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f6e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004f72:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	330c      	adds	r3, #12
 8004f7a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004f7c:	637a      	str	r2, [r7, #52]	; 0x34
 8004f7e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f80:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004f82:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004f84:	e841 2300 	strex	r3, r2, [r1]
 8004f88:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004f8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d1e5      	bne.n	8004f5c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	3314      	adds	r3, #20
 8004f96:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f98:	697b      	ldr	r3, [r7, #20]
 8004f9a:	e853 3f00 	ldrex	r3, [r3]
 8004f9e:	613b      	str	r3, [r7, #16]
   return(result);
 8004fa0:	693b      	ldr	r3, [r7, #16]
 8004fa2:	f023 0301 	bic.w	r3, r3, #1
 8004fa6:	63bb      	str	r3, [r7, #56]	; 0x38
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	3314      	adds	r3, #20
 8004fae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004fb0:	623a      	str	r2, [r7, #32]
 8004fb2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fb4:	69f9      	ldr	r1, [r7, #28]
 8004fb6:	6a3a      	ldr	r2, [r7, #32]
 8004fb8:	e841 2300 	strex	r3, r2, [r1]
 8004fbc:	61bb      	str	r3, [r7, #24]
   return(result);
 8004fbe:	69bb      	ldr	r3, [r7, #24]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d1e5      	bne.n	8004f90 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	2220      	movs	r2, #32
 8004fc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	2220      	movs	r2, #32
 8004fd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004fdc:	2303      	movs	r3, #3
 8004fde:	e00f      	b.n	8005000 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	681a      	ldr	r2, [r3, #0]
 8004fe6:	68bb      	ldr	r3, [r7, #8]
 8004fe8:	4013      	ands	r3, r2
 8004fea:	68ba      	ldr	r2, [r7, #8]
 8004fec:	429a      	cmp	r2, r3
 8004fee:	bf0c      	ite	eq
 8004ff0:	2301      	moveq	r3, #1
 8004ff2:	2300      	movne	r3, #0
 8004ff4:	b2db      	uxtb	r3, r3
 8004ff6:	461a      	mov	r2, r3
 8004ff8:	79fb      	ldrb	r3, [r7, #7]
 8004ffa:	429a      	cmp	r2, r3
 8004ffc:	d09f      	beq.n	8004f3e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004ffe:	2300      	movs	r3, #0
}
 8005000:	4618      	mov	r0, r3
 8005002:	3740      	adds	r7, #64	; 0x40
 8005004:	46bd      	mov	sp, r7
 8005006:	bd80      	pop	{r7, pc}

08005008 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005008:	b480      	push	{r7}
 800500a:	b095      	sub	sp, #84	; 0x54
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	330c      	adds	r3, #12
 8005016:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005018:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800501a:	e853 3f00 	ldrex	r3, [r3]
 800501e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005020:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005022:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005026:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	330c      	adds	r3, #12
 800502e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005030:	643a      	str	r2, [r7, #64]	; 0x40
 8005032:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005034:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005036:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005038:	e841 2300 	strex	r3, r2, [r1]
 800503c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800503e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005040:	2b00      	cmp	r3, #0
 8005042:	d1e5      	bne.n	8005010 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	3314      	adds	r3, #20
 800504a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800504c:	6a3b      	ldr	r3, [r7, #32]
 800504e:	e853 3f00 	ldrex	r3, [r3]
 8005052:	61fb      	str	r3, [r7, #28]
   return(result);
 8005054:	69fb      	ldr	r3, [r7, #28]
 8005056:	f023 0301 	bic.w	r3, r3, #1
 800505a:	64bb      	str	r3, [r7, #72]	; 0x48
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	3314      	adds	r3, #20
 8005062:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005064:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005066:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005068:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800506a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800506c:	e841 2300 	strex	r3, r2, [r1]
 8005070:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005074:	2b00      	cmp	r3, #0
 8005076:	d1e5      	bne.n	8005044 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800507c:	2b01      	cmp	r3, #1
 800507e:	d119      	bne.n	80050b4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	330c      	adds	r3, #12
 8005086:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	e853 3f00 	ldrex	r3, [r3]
 800508e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005090:	68bb      	ldr	r3, [r7, #8]
 8005092:	f023 0310 	bic.w	r3, r3, #16
 8005096:	647b      	str	r3, [r7, #68]	; 0x44
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	330c      	adds	r3, #12
 800509e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80050a0:	61ba      	str	r2, [r7, #24]
 80050a2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050a4:	6979      	ldr	r1, [r7, #20]
 80050a6:	69ba      	ldr	r2, [r7, #24]
 80050a8:	e841 2300 	strex	r3, r2, [r1]
 80050ac:	613b      	str	r3, [r7, #16]
   return(result);
 80050ae:	693b      	ldr	r3, [r7, #16]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d1e5      	bne.n	8005080 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2220      	movs	r2, #32
 80050b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2200      	movs	r2, #0
 80050c0:	631a      	str	r2, [r3, #48]	; 0x30
}
 80050c2:	bf00      	nop
 80050c4:	3754      	adds	r7, #84	; 0x54
 80050c6:	46bd      	mov	sp, r7
 80050c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050cc:	4770      	bx	lr

080050ce <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80050ce:	b580      	push	{r7, lr}
 80050d0:	b084      	sub	sp, #16
 80050d2:	af00      	add	r7, sp, #0
 80050d4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050da:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	2200      	movs	r2, #0
 80050e0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	2200      	movs	r2, #0
 80050e6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80050e8:	68f8      	ldr	r0, [r7, #12]
 80050ea:	f7ff ff09 	bl	8004f00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80050ee:	bf00      	nop
 80050f0:	3710      	adds	r7, #16
 80050f2:	46bd      	mov	sp, r7
 80050f4:	bd80      	pop	{r7, pc}

080050f6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80050f6:	b480      	push	{r7}
 80050f8:	b085      	sub	sp, #20
 80050fa:	af00      	add	r7, sp, #0
 80050fc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005104:	b2db      	uxtb	r3, r3
 8005106:	2b21      	cmp	r3, #33	; 0x21
 8005108:	d13e      	bne.n	8005188 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	689b      	ldr	r3, [r3, #8]
 800510e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005112:	d114      	bne.n	800513e <UART_Transmit_IT+0x48>
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	691b      	ldr	r3, [r3, #16]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d110      	bne.n	800513e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	6a1b      	ldr	r3, [r3, #32]
 8005120:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	881b      	ldrh	r3, [r3, #0]
 8005126:	461a      	mov	r2, r3
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005130:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6a1b      	ldr	r3, [r3, #32]
 8005136:	1c9a      	adds	r2, r3, #2
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	621a      	str	r2, [r3, #32]
 800513c:	e008      	b.n	8005150 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6a1b      	ldr	r3, [r3, #32]
 8005142:	1c59      	adds	r1, r3, #1
 8005144:	687a      	ldr	r2, [r7, #4]
 8005146:	6211      	str	r1, [r2, #32]
 8005148:	781a      	ldrb	r2, [r3, #0]
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005154:	b29b      	uxth	r3, r3
 8005156:	3b01      	subs	r3, #1
 8005158:	b29b      	uxth	r3, r3
 800515a:	687a      	ldr	r2, [r7, #4]
 800515c:	4619      	mov	r1, r3
 800515e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005160:	2b00      	cmp	r3, #0
 8005162:	d10f      	bne.n	8005184 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	68da      	ldr	r2, [r3, #12]
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005172:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	68da      	ldr	r2, [r3, #12]
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005182:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005184:	2300      	movs	r3, #0
 8005186:	e000      	b.n	800518a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005188:	2302      	movs	r3, #2
  }
}
 800518a:	4618      	mov	r0, r3
 800518c:	3714      	adds	r7, #20
 800518e:	46bd      	mov	sp, r7
 8005190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005194:	4770      	bx	lr

08005196 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005196:	b580      	push	{r7, lr}
 8005198:	b082      	sub	sp, #8
 800519a:	af00      	add	r7, sp, #0
 800519c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	68da      	ldr	r2, [r3, #12]
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80051ac:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	2220      	movs	r2, #32
 80051b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80051b6:	6878      	ldr	r0, [r7, #4]
 80051b8:	f7ff fe8e 	bl	8004ed8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80051bc:	2300      	movs	r3, #0
}
 80051be:	4618      	mov	r0, r3
 80051c0:	3708      	adds	r7, #8
 80051c2:	46bd      	mov	sp, r7
 80051c4:	bd80      	pop	{r7, pc}

080051c6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80051c6:	b580      	push	{r7, lr}
 80051c8:	b08c      	sub	sp, #48	; 0x30
 80051ca:	af00      	add	r7, sp, #0
 80051cc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80051d4:	b2db      	uxtb	r3, r3
 80051d6:	2b22      	cmp	r3, #34	; 0x22
 80051d8:	f040 80ab 	bne.w	8005332 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	689b      	ldr	r3, [r3, #8]
 80051e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051e4:	d117      	bne.n	8005216 <UART_Receive_IT+0x50>
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	691b      	ldr	r3, [r3, #16]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d113      	bne.n	8005216 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80051ee:	2300      	movs	r3, #0
 80051f0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051f6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	685b      	ldr	r3, [r3, #4]
 80051fe:	b29b      	uxth	r3, r3
 8005200:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005204:	b29a      	uxth	r2, r3
 8005206:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005208:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800520e:	1c9a      	adds	r2, r3, #2
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	629a      	str	r2, [r3, #40]	; 0x28
 8005214:	e026      	b.n	8005264 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800521a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800521c:	2300      	movs	r3, #0
 800521e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	689b      	ldr	r3, [r3, #8]
 8005224:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005228:	d007      	beq.n	800523a <UART_Receive_IT+0x74>
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	689b      	ldr	r3, [r3, #8]
 800522e:	2b00      	cmp	r3, #0
 8005230:	d10a      	bne.n	8005248 <UART_Receive_IT+0x82>
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	691b      	ldr	r3, [r3, #16]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d106      	bne.n	8005248 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	685b      	ldr	r3, [r3, #4]
 8005240:	b2da      	uxtb	r2, r3
 8005242:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005244:	701a      	strb	r2, [r3, #0]
 8005246:	e008      	b.n	800525a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	685b      	ldr	r3, [r3, #4]
 800524e:	b2db      	uxtb	r3, r3
 8005250:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005254:	b2da      	uxtb	r2, r3
 8005256:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005258:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800525e:	1c5a      	adds	r2, r3, #1
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005268:	b29b      	uxth	r3, r3
 800526a:	3b01      	subs	r3, #1
 800526c:	b29b      	uxth	r3, r3
 800526e:	687a      	ldr	r2, [r7, #4]
 8005270:	4619      	mov	r1, r3
 8005272:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005274:	2b00      	cmp	r3, #0
 8005276:	d15a      	bne.n	800532e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	68da      	ldr	r2, [r3, #12]
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f022 0220 	bic.w	r2, r2, #32
 8005286:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	68da      	ldr	r2, [r3, #12]
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005296:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	695a      	ldr	r2, [r3, #20]
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f022 0201 	bic.w	r2, r2, #1
 80052a6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2220      	movs	r2, #32
 80052ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052b4:	2b01      	cmp	r3, #1
 80052b6:	d135      	bne.n	8005324 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2200      	movs	r2, #0
 80052bc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	330c      	adds	r3, #12
 80052c4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052c6:	697b      	ldr	r3, [r7, #20]
 80052c8:	e853 3f00 	ldrex	r3, [r3]
 80052cc:	613b      	str	r3, [r7, #16]
   return(result);
 80052ce:	693b      	ldr	r3, [r7, #16]
 80052d0:	f023 0310 	bic.w	r3, r3, #16
 80052d4:	627b      	str	r3, [r7, #36]	; 0x24
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	330c      	adds	r3, #12
 80052dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052de:	623a      	str	r2, [r7, #32]
 80052e0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052e2:	69f9      	ldr	r1, [r7, #28]
 80052e4:	6a3a      	ldr	r2, [r7, #32]
 80052e6:	e841 2300 	strex	r3, r2, [r1]
 80052ea:	61bb      	str	r3, [r7, #24]
   return(result);
 80052ec:	69bb      	ldr	r3, [r7, #24]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d1e5      	bne.n	80052be <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f003 0310 	and.w	r3, r3, #16
 80052fc:	2b10      	cmp	r3, #16
 80052fe:	d10a      	bne.n	8005316 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005300:	2300      	movs	r3, #0
 8005302:	60fb      	str	r3, [r7, #12]
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	60fb      	str	r3, [r7, #12]
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	685b      	ldr	r3, [r3, #4]
 8005312:	60fb      	str	r3, [r7, #12]
 8005314:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800531a:	4619      	mov	r1, r3
 800531c:	6878      	ldr	r0, [r7, #4]
 800531e:	f7ff fdf9 	bl	8004f14 <HAL_UARTEx_RxEventCallback>
 8005322:	e002      	b.n	800532a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005324:	6878      	ldr	r0, [r7, #4]
 8005326:	f7ff fde1 	bl	8004eec <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800532a:	2300      	movs	r3, #0
 800532c:	e002      	b.n	8005334 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800532e:	2300      	movs	r3, #0
 8005330:	e000      	b.n	8005334 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005332:	2302      	movs	r3, #2
  }
}
 8005334:	4618      	mov	r0, r3
 8005336:	3730      	adds	r7, #48	; 0x30
 8005338:	46bd      	mov	sp, r7
 800533a:	bd80      	pop	{r7, pc}

0800533c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800533c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005340:	b0c0      	sub	sp, #256	; 0x100
 8005342:	af00      	add	r7, sp, #0
 8005344:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005348:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	691b      	ldr	r3, [r3, #16]
 8005350:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005354:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005358:	68d9      	ldr	r1, [r3, #12]
 800535a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800535e:	681a      	ldr	r2, [r3, #0]
 8005360:	ea40 0301 	orr.w	r3, r0, r1
 8005364:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005366:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800536a:	689a      	ldr	r2, [r3, #8]
 800536c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005370:	691b      	ldr	r3, [r3, #16]
 8005372:	431a      	orrs	r2, r3
 8005374:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005378:	695b      	ldr	r3, [r3, #20]
 800537a:	431a      	orrs	r2, r3
 800537c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005380:	69db      	ldr	r3, [r3, #28]
 8005382:	4313      	orrs	r3, r2
 8005384:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005388:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	68db      	ldr	r3, [r3, #12]
 8005390:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005394:	f021 010c 	bic.w	r1, r1, #12
 8005398:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800539c:	681a      	ldr	r2, [r3, #0]
 800539e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80053a2:	430b      	orrs	r3, r1
 80053a4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80053a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	695b      	ldr	r3, [r3, #20]
 80053ae:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80053b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053b6:	6999      	ldr	r1, [r3, #24]
 80053b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053bc:	681a      	ldr	r2, [r3, #0]
 80053be:	ea40 0301 	orr.w	r3, r0, r1
 80053c2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80053c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053c8:	681a      	ldr	r2, [r3, #0]
 80053ca:	4b8f      	ldr	r3, [pc, #572]	; (8005608 <UART_SetConfig+0x2cc>)
 80053cc:	429a      	cmp	r2, r3
 80053ce:	d005      	beq.n	80053dc <UART_SetConfig+0xa0>
 80053d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053d4:	681a      	ldr	r2, [r3, #0]
 80053d6:	4b8d      	ldr	r3, [pc, #564]	; (800560c <UART_SetConfig+0x2d0>)
 80053d8:	429a      	cmp	r2, r3
 80053da:	d104      	bne.n	80053e6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80053dc:	f7ff f9fa 	bl	80047d4 <HAL_RCC_GetPCLK2Freq>
 80053e0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80053e4:	e003      	b.n	80053ee <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80053e6:	f7ff f9e1 	bl	80047ac <HAL_RCC_GetPCLK1Freq>
 80053ea:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80053ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053f2:	69db      	ldr	r3, [r3, #28]
 80053f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80053f8:	f040 810c 	bne.w	8005614 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80053fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005400:	2200      	movs	r2, #0
 8005402:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005406:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800540a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800540e:	4622      	mov	r2, r4
 8005410:	462b      	mov	r3, r5
 8005412:	1891      	adds	r1, r2, r2
 8005414:	65b9      	str	r1, [r7, #88]	; 0x58
 8005416:	415b      	adcs	r3, r3
 8005418:	65fb      	str	r3, [r7, #92]	; 0x5c
 800541a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800541e:	4621      	mov	r1, r4
 8005420:	eb12 0801 	adds.w	r8, r2, r1
 8005424:	4629      	mov	r1, r5
 8005426:	eb43 0901 	adc.w	r9, r3, r1
 800542a:	f04f 0200 	mov.w	r2, #0
 800542e:	f04f 0300 	mov.w	r3, #0
 8005432:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005436:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800543a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800543e:	4690      	mov	r8, r2
 8005440:	4699      	mov	r9, r3
 8005442:	4623      	mov	r3, r4
 8005444:	eb18 0303 	adds.w	r3, r8, r3
 8005448:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800544c:	462b      	mov	r3, r5
 800544e:	eb49 0303 	adc.w	r3, r9, r3
 8005452:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005456:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800545a:	685b      	ldr	r3, [r3, #4]
 800545c:	2200      	movs	r2, #0
 800545e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005462:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005466:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800546a:	460b      	mov	r3, r1
 800546c:	18db      	adds	r3, r3, r3
 800546e:	653b      	str	r3, [r7, #80]	; 0x50
 8005470:	4613      	mov	r3, r2
 8005472:	eb42 0303 	adc.w	r3, r2, r3
 8005476:	657b      	str	r3, [r7, #84]	; 0x54
 8005478:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800547c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005480:	f7fa fef6 	bl	8000270 <__aeabi_uldivmod>
 8005484:	4602      	mov	r2, r0
 8005486:	460b      	mov	r3, r1
 8005488:	4b61      	ldr	r3, [pc, #388]	; (8005610 <UART_SetConfig+0x2d4>)
 800548a:	fba3 2302 	umull	r2, r3, r3, r2
 800548e:	095b      	lsrs	r3, r3, #5
 8005490:	011c      	lsls	r4, r3, #4
 8005492:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005496:	2200      	movs	r2, #0
 8005498:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800549c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80054a0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80054a4:	4642      	mov	r2, r8
 80054a6:	464b      	mov	r3, r9
 80054a8:	1891      	adds	r1, r2, r2
 80054aa:	64b9      	str	r1, [r7, #72]	; 0x48
 80054ac:	415b      	adcs	r3, r3
 80054ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80054b0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80054b4:	4641      	mov	r1, r8
 80054b6:	eb12 0a01 	adds.w	sl, r2, r1
 80054ba:	4649      	mov	r1, r9
 80054bc:	eb43 0b01 	adc.w	fp, r3, r1
 80054c0:	f04f 0200 	mov.w	r2, #0
 80054c4:	f04f 0300 	mov.w	r3, #0
 80054c8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80054cc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80054d0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80054d4:	4692      	mov	sl, r2
 80054d6:	469b      	mov	fp, r3
 80054d8:	4643      	mov	r3, r8
 80054da:	eb1a 0303 	adds.w	r3, sl, r3
 80054de:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80054e2:	464b      	mov	r3, r9
 80054e4:	eb4b 0303 	adc.w	r3, fp, r3
 80054e8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80054ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054f0:	685b      	ldr	r3, [r3, #4]
 80054f2:	2200      	movs	r2, #0
 80054f4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80054f8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80054fc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005500:	460b      	mov	r3, r1
 8005502:	18db      	adds	r3, r3, r3
 8005504:	643b      	str	r3, [r7, #64]	; 0x40
 8005506:	4613      	mov	r3, r2
 8005508:	eb42 0303 	adc.w	r3, r2, r3
 800550c:	647b      	str	r3, [r7, #68]	; 0x44
 800550e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005512:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005516:	f7fa feab 	bl	8000270 <__aeabi_uldivmod>
 800551a:	4602      	mov	r2, r0
 800551c:	460b      	mov	r3, r1
 800551e:	4611      	mov	r1, r2
 8005520:	4b3b      	ldr	r3, [pc, #236]	; (8005610 <UART_SetConfig+0x2d4>)
 8005522:	fba3 2301 	umull	r2, r3, r3, r1
 8005526:	095b      	lsrs	r3, r3, #5
 8005528:	2264      	movs	r2, #100	; 0x64
 800552a:	fb02 f303 	mul.w	r3, r2, r3
 800552e:	1acb      	subs	r3, r1, r3
 8005530:	00db      	lsls	r3, r3, #3
 8005532:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005536:	4b36      	ldr	r3, [pc, #216]	; (8005610 <UART_SetConfig+0x2d4>)
 8005538:	fba3 2302 	umull	r2, r3, r3, r2
 800553c:	095b      	lsrs	r3, r3, #5
 800553e:	005b      	lsls	r3, r3, #1
 8005540:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005544:	441c      	add	r4, r3
 8005546:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800554a:	2200      	movs	r2, #0
 800554c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005550:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005554:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005558:	4642      	mov	r2, r8
 800555a:	464b      	mov	r3, r9
 800555c:	1891      	adds	r1, r2, r2
 800555e:	63b9      	str	r1, [r7, #56]	; 0x38
 8005560:	415b      	adcs	r3, r3
 8005562:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005564:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005568:	4641      	mov	r1, r8
 800556a:	1851      	adds	r1, r2, r1
 800556c:	6339      	str	r1, [r7, #48]	; 0x30
 800556e:	4649      	mov	r1, r9
 8005570:	414b      	adcs	r3, r1
 8005572:	637b      	str	r3, [r7, #52]	; 0x34
 8005574:	f04f 0200 	mov.w	r2, #0
 8005578:	f04f 0300 	mov.w	r3, #0
 800557c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005580:	4659      	mov	r1, fp
 8005582:	00cb      	lsls	r3, r1, #3
 8005584:	4651      	mov	r1, sl
 8005586:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800558a:	4651      	mov	r1, sl
 800558c:	00ca      	lsls	r2, r1, #3
 800558e:	4610      	mov	r0, r2
 8005590:	4619      	mov	r1, r3
 8005592:	4603      	mov	r3, r0
 8005594:	4642      	mov	r2, r8
 8005596:	189b      	adds	r3, r3, r2
 8005598:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800559c:	464b      	mov	r3, r9
 800559e:	460a      	mov	r2, r1
 80055a0:	eb42 0303 	adc.w	r3, r2, r3
 80055a4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80055a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055ac:	685b      	ldr	r3, [r3, #4]
 80055ae:	2200      	movs	r2, #0
 80055b0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80055b4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80055b8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80055bc:	460b      	mov	r3, r1
 80055be:	18db      	adds	r3, r3, r3
 80055c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80055c2:	4613      	mov	r3, r2
 80055c4:	eb42 0303 	adc.w	r3, r2, r3
 80055c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80055ca:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80055ce:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80055d2:	f7fa fe4d 	bl	8000270 <__aeabi_uldivmod>
 80055d6:	4602      	mov	r2, r0
 80055d8:	460b      	mov	r3, r1
 80055da:	4b0d      	ldr	r3, [pc, #52]	; (8005610 <UART_SetConfig+0x2d4>)
 80055dc:	fba3 1302 	umull	r1, r3, r3, r2
 80055e0:	095b      	lsrs	r3, r3, #5
 80055e2:	2164      	movs	r1, #100	; 0x64
 80055e4:	fb01 f303 	mul.w	r3, r1, r3
 80055e8:	1ad3      	subs	r3, r2, r3
 80055ea:	00db      	lsls	r3, r3, #3
 80055ec:	3332      	adds	r3, #50	; 0x32
 80055ee:	4a08      	ldr	r2, [pc, #32]	; (8005610 <UART_SetConfig+0x2d4>)
 80055f0:	fba2 2303 	umull	r2, r3, r2, r3
 80055f4:	095b      	lsrs	r3, r3, #5
 80055f6:	f003 0207 	and.w	r2, r3, #7
 80055fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	4422      	add	r2, r4
 8005602:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005604:	e106      	b.n	8005814 <UART_SetConfig+0x4d8>
 8005606:	bf00      	nop
 8005608:	40011000 	.word	0x40011000
 800560c:	40011400 	.word	0x40011400
 8005610:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005614:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005618:	2200      	movs	r2, #0
 800561a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800561e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005622:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005626:	4642      	mov	r2, r8
 8005628:	464b      	mov	r3, r9
 800562a:	1891      	adds	r1, r2, r2
 800562c:	6239      	str	r1, [r7, #32]
 800562e:	415b      	adcs	r3, r3
 8005630:	627b      	str	r3, [r7, #36]	; 0x24
 8005632:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005636:	4641      	mov	r1, r8
 8005638:	1854      	adds	r4, r2, r1
 800563a:	4649      	mov	r1, r9
 800563c:	eb43 0501 	adc.w	r5, r3, r1
 8005640:	f04f 0200 	mov.w	r2, #0
 8005644:	f04f 0300 	mov.w	r3, #0
 8005648:	00eb      	lsls	r3, r5, #3
 800564a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800564e:	00e2      	lsls	r2, r4, #3
 8005650:	4614      	mov	r4, r2
 8005652:	461d      	mov	r5, r3
 8005654:	4643      	mov	r3, r8
 8005656:	18e3      	adds	r3, r4, r3
 8005658:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800565c:	464b      	mov	r3, r9
 800565e:	eb45 0303 	adc.w	r3, r5, r3
 8005662:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005666:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800566a:	685b      	ldr	r3, [r3, #4]
 800566c:	2200      	movs	r2, #0
 800566e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005672:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005676:	f04f 0200 	mov.w	r2, #0
 800567a:	f04f 0300 	mov.w	r3, #0
 800567e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005682:	4629      	mov	r1, r5
 8005684:	008b      	lsls	r3, r1, #2
 8005686:	4621      	mov	r1, r4
 8005688:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800568c:	4621      	mov	r1, r4
 800568e:	008a      	lsls	r2, r1, #2
 8005690:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005694:	f7fa fdec 	bl	8000270 <__aeabi_uldivmod>
 8005698:	4602      	mov	r2, r0
 800569a:	460b      	mov	r3, r1
 800569c:	4b60      	ldr	r3, [pc, #384]	; (8005820 <UART_SetConfig+0x4e4>)
 800569e:	fba3 2302 	umull	r2, r3, r3, r2
 80056a2:	095b      	lsrs	r3, r3, #5
 80056a4:	011c      	lsls	r4, r3, #4
 80056a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80056aa:	2200      	movs	r2, #0
 80056ac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80056b0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80056b4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80056b8:	4642      	mov	r2, r8
 80056ba:	464b      	mov	r3, r9
 80056bc:	1891      	adds	r1, r2, r2
 80056be:	61b9      	str	r1, [r7, #24]
 80056c0:	415b      	adcs	r3, r3
 80056c2:	61fb      	str	r3, [r7, #28]
 80056c4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80056c8:	4641      	mov	r1, r8
 80056ca:	1851      	adds	r1, r2, r1
 80056cc:	6139      	str	r1, [r7, #16]
 80056ce:	4649      	mov	r1, r9
 80056d0:	414b      	adcs	r3, r1
 80056d2:	617b      	str	r3, [r7, #20]
 80056d4:	f04f 0200 	mov.w	r2, #0
 80056d8:	f04f 0300 	mov.w	r3, #0
 80056dc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80056e0:	4659      	mov	r1, fp
 80056e2:	00cb      	lsls	r3, r1, #3
 80056e4:	4651      	mov	r1, sl
 80056e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80056ea:	4651      	mov	r1, sl
 80056ec:	00ca      	lsls	r2, r1, #3
 80056ee:	4610      	mov	r0, r2
 80056f0:	4619      	mov	r1, r3
 80056f2:	4603      	mov	r3, r0
 80056f4:	4642      	mov	r2, r8
 80056f6:	189b      	adds	r3, r3, r2
 80056f8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80056fc:	464b      	mov	r3, r9
 80056fe:	460a      	mov	r2, r1
 8005700:	eb42 0303 	adc.w	r3, r2, r3
 8005704:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005708:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800570c:	685b      	ldr	r3, [r3, #4]
 800570e:	2200      	movs	r2, #0
 8005710:	67bb      	str	r3, [r7, #120]	; 0x78
 8005712:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005714:	f04f 0200 	mov.w	r2, #0
 8005718:	f04f 0300 	mov.w	r3, #0
 800571c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005720:	4649      	mov	r1, r9
 8005722:	008b      	lsls	r3, r1, #2
 8005724:	4641      	mov	r1, r8
 8005726:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800572a:	4641      	mov	r1, r8
 800572c:	008a      	lsls	r2, r1, #2
 800572e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005732:	f7fa fd9d 	bl	8000270 <__aeabi_uldivmod>
 8005736:	4602      	mov	r2, r0
 8005738:	460b      	mov	r3, r1
 800573a:	4611      	mov	r1, r2
 800573c:	4b38      	ldr	r3, [pc, #224]	; (8005820 <UART_SetConfig+0x4e4>)
 800573e:	fba3 2301 	umull	r2, r3, r3, r1
 8005742:	095b      	lsrs	r3, r3, #5
 8005744:	2264      	movs	r2, #100	; 0x64
 8005746:	fb02 f303 	mul.w	r3, r2, r3
 800574a:	1acb      	subs	r3, r1, r3
 800574c:	011b      	lsls	r3, r3, #4
 800574e:	3332      	adds	r3, #50	; 0x32
 8005750:	4a33      	ldr	r2, [pc, #204]	; (8005820 <UART_SetConfig+0x4e4>)
 8005752:	fba2 2303 	umull	r2, r3, r2, r3
 8005756:	095b      	lsrs	r3, r3, #5
 8005758:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800575c:	441c      	add	r4, r3
 800575e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005762:	2200      	movs	r2, #0
 8005764:	673b      	str	r3, [r7, #112]	; 0x70
 8005766:	677a      	str	r2, [r7, #116]	; 0x74
 8005768:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800576c:	4642      	mov	r2, r8
 800576e:	464b      	mov	r3, r9
 8005770:	1891      	adds	r1, r2, r2
 8005772:	60b9      	str	r1, [r7, #8]
 8005774:	415b      	adcs	r3, r3
 8005776:	60fb      	str	r3, [r7, #12]
 8005778:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800577c:	4641      	mov	r1, r8
 800577e:	1851      	adds	r1, r2, r1
 8005780:	6039      	str	r1, [r7, #0]
 8005782:	4649      	mov	r1, r9
 8005784:	414b      	adcs	r3, r1
 8005786:	607b      	str	r3, [r7, #4]
 8005788:	f04f 0200 	mov.w	r2, #0
 800578c:	f04f 0300 	mov.w	r3, #0
 8005790:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005794:	4659      	mov	r1, fp
 8005796:	00cb      	lsls	r3, r1, #3
 8005798:	4651      	mov	r1, sl
 800579a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800579e:	4651      	mov	r1, sl
 80057a0:	00ca      	lsls	r2, r1, #3
 80057a2:	4610      	mov	r0, r2
 80057a4:	4619      	mov	r1, r3
 80057a6:	4603      	mov	r3, r0
 80057a8:	4642      	mov	r2, r8
 80057aa:	189b      	adds	r3, r3, r2
 80057ac:	66bb      	str	r3, [r7, #104]	; 0x68
 80057ae:	464b      	mov	r3, r9
 80057b0:	460a      	mov	r2, r1
 80057b2:	eb42 0303 	adc.w	r3, r2, r3
 80057b6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80057b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057bc:	685b      	ldr	r3, [r3, #4]
 80057be:	2200      	movs	r2, #0
 80057c0:	663b      	str	r3, [r7, #96]	; 0x60
 80057c2:	667a      	str	r2, [r7, #100]	; 0x64
 80057c4:	f04f 0200 	mov.w	r2, #0
 80057c8:	f04f 0300 	mov.w	r3, #0
 80057cc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80057d0:	4649      	mov	r1, r9
 80057d2:	008b      	lsls	r3, r1, #2
 80057d4:	4641      	mov	r1, r8
 80057d6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80057da:	4641      	mov	r1, r8
 80057dc:	008a      	lsls	r2, r1, #2
 80057de:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80057e2:	f7fa fd45 	bl	8000270 <__aeabi_uldivmod>
 80057e6:	4602      	mov	r2, r0
 80057e8:	460b      	mov	r3, r1
 80057ea:	4b0d      	ldr	r3, [pc, #52]	; (8005820 <UART_SetConfig+0x4e4>)
 80057ec:	fba3 1302 	umull	r1, r3, r3, r2
 80057f0:	095b      	lsrs	r3, r3, #5
 80057f2:	2164      	movs	r1, #100	; 0x64
 80057f4:	fb01 f303 	mul.w	r3, r1, r3
 80057f8:	1ad3      	subs	r3, r2, r3
 80057fa:	011b      	lsls	r3, r3, #4
 80057fc:	3332      	adds	r3, #50	; 0x32
 80057fe:	4a08      	ldr	r2, [pc, #32]	; (8005820 <UART_SetConfig+0x4e4>)
 8005800:	fba2 2303 	umull	r2, r3, r2, r3
 8005804:	095b      	lsrs	r3, r3, #5
 8005806:	f003 020f 	and.w	r2, r3, #15
 800580a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	4422      	add	r2, r4
 8005812:	609a      	str	r2, [r3, #8]
}
 8005814:	bf00      	nop
 8005816:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800581a:	46bd      	mov	sp, r7
 800581c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005820:	51eb851f 	.word	0x51eb851f

08005824 <std>:
 8005824:	2300      	movs	r3, #0
 8005826:	b510      	push	{r4, lr}
 8005828:	4604      	mov	r4, r0
 800582a:	e9c0 3300 	strd	r3, r3, [r0]
 800582e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005832:	6083      	str	r3, [r0, #8]
 8005834:	8181      	strh	r1, [r0, #12]
 8005836:	6643      	str	r3, [r0, #100]	; 0x64
 8005838:	81c2      	strh	r2, [r0, #14]
 800583a:	6183      	str	r3, [r0, #24]
 800583c:	4619      	mov	r1, r3
 800583e:	2208      	movs	r2, #8
 8005840:	305c      	adds	r0, #92	; 0x5c
 8005842:	f000 f9f7 	bl	8005c34 <memset>
 8005846:	4b0d      	ldr	r3, [pc, #52]	; (800587c <std+0x58>)
 8005848:	6263      	str	r3, [r4, #36]	; 0x24
 800584a:	4b0d      	ldr	r3, [pc, #52]	; (8005880 <std+0x5c>)
 800584c:	62a3      	str	r3, [r4, #40]	; 0x28
 800584e:	4b0d      	ldr	r3, [pc, #52]	; (8005884 <std+0x60>)
 8005850:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005852:	4b0d      	ldr	r3, [pc, #52]	; (8005888 <std+0x64>)
 8005854:	6323      	str	r3, [r4, #48]	; 0x30
 8005856:	4b0d      	ldr	r3, [pc, #52]	; (800588c <std+0x68>)
 8005858:	6224      	str	r4, [r4, #32]
 800585a:	429c      	cmp	r4, r3
 800585c:	d006      	beq.n	800586c <std+0x48>
 800585e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8005862:	4294      	cmp	r4, r2
 8005864:	d002      	beq.n	800586c <std+0x48>
 8005866:	33d0      	adds	r3, #208	; 0xd0
 8005868:	429c      	cmp	r4, r3
 800586a:	d105      	bne.n	8005878 <std+0x54>
 800586c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005870:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005874:	f000 ba56 	b.w	8005d24 <__retarget_lock_init_recursive>
 8005878:	bd10      	pop	{r4, pc}
 800587a:	bf00      	nop
 800587c:	08005a85 	.word	0x08005a85
 8005880:	08005aa7 	.word	0x08005aa7
 8005884:	08005adf 	.word	0x08005adf
 8005888:	08005b03 	.word	0x08005b03
 800588c:	20000134 	.word	0x20000134

08005890 <stdio_exit_handler>:
 8005890:	4a02      	ldr	r2, [pc, #8]	; (800589c <stdio_exit_handler+0xc>)
 8005892:	4903      	ldr	r1, [pc, #12]	; (80058a0 <stdio_exit_handler+0x10>)
 8005894:	4803      	ldr	r0, [pc, #12]	; (80058a4 <stdio_exit_handler+0x14>)
 8005896:	f000 b869 	b.w	800596c <_fwalk_sglue>
 800589a:	bf00      	nop
 800589c:	2000000c 	.word	0x2000000c
 80058a0:	080065ed 	.word	0x080065ed
 80058a4:	20000018 	.word	0x20000018

080058a8 <cleanup_stdio>:
 80058a8:	6841      	ldr	r1, [r0, #4]
 80058aa:	4b0c      	ldr	r3, [pc, #48]	; (80058dc <cleanup_stdio+0x34>)
 80058ac:	4299      	cmp	r1, r3
 80058ae:	b510      	push	{r4, lr}
 80058b0:	4604      	mov	r4, r0
 80058b2:	d001      	beq.n	80058b8 <cleanup_stdio+0x10>
 80058b4:	f000 fe9a 	bl	80065ec <_fflush_r>
 80058b8:	68a1      	ldr	r1, [r4, #8]
 80058ba:	4b09      	ldr	r3, [pc, #36]	; (80058e0 <cleanup_stdio+0x38>)
 80058bc:	4299      	cmp	r1, r3
 80058be:	d002      	beq.n	80058c6 <cleanup_stdio+0x1e>
 80058c0:	4620      	mov	r0, r4
 80058c2:	f000 fe93 	bl	80065ec <_fflush_r>
 80058c6:	68e1      	ldr	r1, [r4, #12]
 80058c8:	4b06      	ldr	r3, [pc, #24]	; (80058e4 <cleanup_stdio+0x3c>)
 80058ca:	4299      	cmp	r1, r3
 80058cc:	d004      	beq.n	80058d8 <cleanup_stdio+0x30>
 80058ce:	4620      	mov	r0, r4
 80058d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80058d4:	f000 be8a 	b.w	80065ec <_fflush_r>
 80058d8:	bd10      	pop	{r4, pc}
 80058da:	bf00      	nop
 80058dc:	20000134 	.word	0x20000134
 80058e0:	2000019c 	.word	0x2000019c
 80058e4:	20000204 	.word	0x20000204

080058e8 <global_stdio_init.part.0>:
 80058e8:	b510      	push	{r4, lr}
 80058ea:	4b0b      	ldr	r3, [pc, #44]	; (8005918 <global_stdio_init.part.0+0x30>)
 80058ec:	4c0b      	ldr	r4, [pc, #44]	; (800591c <global_stdio_init.part.0+0x34>)
 80058ee:	4a0c      	ldr	r2, [pc, #48]	; (8005920 <global_stdio_init.part.0+0x38>)
 80058f0:	601a      	str	r2, [r3, #0]
 80058f2:	4620      	mov	r0, r4
 80058f4:	2200      	movs	r2, #0
 80058f6:	2104      	movs	r1, #4
 80058f8:	f7ff ff94 	bl	8005824 <std>
 80058fc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005900:	2201      	movs	r2, #1
 8005902:	2109      	movs	r1, #9
 8005904:	f7ff ff8e 	bl	8005824 <std>
 8005908:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800590c:	2202      	movs	r2, #2
 800590e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005912:	2112      	movs	r1, #18
 8005914:	f7ff bf86 	b.w	8005824 <std>
 8005918:	2000026c 	.word	0x2000026c
 800591c:	20000134 	.word	0x20000134
 8005920:	08005891 	.word	0x08005891

08005924 <__sfp_lock_acquire>:
 8005924:	4801      	ldr	r0, [pc, #4]	; (800592c <__sfp_lock_acquire+0x8>)
 8005926:	f000 b9fe 	b.w	8005d26 <__retarget_lock_acquire_recursive>
 800592a:	bf00      	nop
 800592c:	20000275 	.word	0x20000275

08005930 <__sfp_lock_release>:
 8005930:	4801      	ldr	r0, [pc, #4]	; (8005938 <__sfp_lock_release+0x8>)
 8005932:	f000 b9f9 	b.w	8005d28 <__retarget_lock_release_recursive>
 8005936:	bf00      	nop
 8005938:	20000275 	.word	0x20000275

0800593c <__sinit>:
 800593c:	b510      	push	{r4, lr}
 800593e:	4604      	mov	r4, r0
 8005940:	f7ff fff0 	bl	8005924 <__sfp_lock_acquire>
 8005944:	6a23      	ldr	r3, [r4, #32]
 8005946:	b11b      	cbz	r3, 8005950 <__sinit+0x14>
 8005948:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800594c:	f7ff bff0 	b.w	8005930 <__sfp_lock_release>
 8005950:	4b04      	ldr	r3, [pc, #16]	; (8005964 <__sinit+0x28>)
 8005952:	6223      	str	r3, [r4, #32]
 8005954:	4b04      	ldr	r3, [pc, #16]	; (8005968 <__sinit+0x2c>)
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d1f5      	bne.n	8005948 <__sinit+0xc>
 800595c:	f7ff ffc4 	bl	80058e8 <global_stdio_init.part.0>
 8005960:	e7f2      	b.n	8005948 <__sinit+0xc>
 8005962:	bf00      	nop
 8005964:	080058a9 	.word	0x080058a9
 8005968:	2000026c 	.word	0x2000026c

0800596c <_fwalk_sglue>:
 800596c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005970:	4607      	mov	r7, r0
 8005972:	4688      	mov	r8, r1
 8005974:	4614      	mov	r4, r2
 8005976:	2600      	movs	r6, #0
 8005978:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800597c:	f1b9 0901 	subs.w	r9, r9, #1
 8005980:	d505      	bpl.n	800598e <_fwalk_sglue+0x22>
 8005982:	6824      	ldr	r4, [r4, #0]
 8005984:	2c00      	cmp	r4, #0
 8005986:	d1f7      	bne.n	8005978 <_fwalk_sglue+0xc>
 8005988:	4630      	mov	r0, r6
 800598a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800598e:	89ab      	ldrh	r3, [r5, #12]
 8005990:	2b01      	cmp	r3, #1
 8005992:	d907      	bls.n	80059a4 <_fwalk_sglue+0x38>
 8005994:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005998:	3301      	adds	r3, #1
 800599a:	d003      	beq.n	80059a4 <_fwalk_sglue+0x38>
 800599c:	4629      	mov	r1, r5
 800599e:	4638      	mov	r0, r7
 80059a0:	47c0      	blx	r8
 80059a2:	4306      	orrs	r6, r0
 80059a4:	3568      	adds	r5, #104	; 0x68
 80059a6:	e7e9      	b.n	800597c <_fwalk_sglue+0x10>

080059a8 <iprintf>:
 80059a8:	b40f      	push	{r0, r1, r2, r3}
 80059aa:	b507      	push	{r0, r1, r2, lr}
 80059ac:	4906      	ldr	r1, [pc, #24]	; (80059c8 <iprintf+0x20>)
 80059ae:	ab04      	add	r3, sp, #16
 80059b0:	6808      	ldr	r0, [r1, #0]
 80059b2:	f853 2b04 	ldr.w	r2, [r3], #4
 80059b6:	6881      	ldr	r1, [r0, #8]
 80059b8:	9301      	str	r3, [sp, #4]
 80059ba:	f000 fae7 	bl	8005f8c <_vfiprintf_r>
 80059be:	b003      	add	sp, #12
 80059c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80059c4:	b004      	add	sp, #16
 80059c6:	4770      	bx	lr
 80059c8:	20000064 	.word	0x20000064

080059cc <_puts_r>:
 80059cc:	6a03      	ldr	r3, [r0, #32]
 80059ce:	b570      	push	{r4, r5, r6, lr}
 80059d0:	6884      	ldr	r4, [r0, #8]
 80059d2:	4605      	mov	r5, r0
 80059d4:	460e      	mov	r6, r1
 80059d6:	b90b      	cbnz	r3, 80059dc <_puts_r+0x10>
 80059d8:	f7ff ffb0 	bl	800593c <__sinit>
 80059dc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80059de:	07db      	lsls	r3, r3, #31
 80059e0:	d405      	bmi.n	80059ee <_puts_r+0x22>
 80059e2:	89a3      	ldrh	r3, [r4, #12]
 80059e4:	0598      	lsls	r0, r3, #22
 80059e6:	d402      	bmi.n	80059ee <_puts_r+0x22>
 80059e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80059ea:	f000 f99c 	bl	8005d26 <__retarget_lock_acquire_recursive>
 80059ee:	89a3      	ldrh	r3, [r4, #12]
 80059f0:	0719      	lsls	r1, r3, #28
 80059f2:	d513      	bpl.n	8005a1c <_puts_r+0x50>
 80059f4:	6923      	ldr	r3, [r4, #16]
 80059f6:	b18b      	cbz	r3, 8005a1c <_puts_r+0x50>
 80059f8:	3e01      	subs	r6, #1
 80059fa:	68a3      	ldr	r3, [r4, #8]
 80059fc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005a00:	3b01      	subs	r3, #1
 8005a02:	60a3      	str	r3, [r4, #8]
 8005a04:	b9e9      	cbnz	r1, 8005a42 <_puts_r+0x76>
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	da2e      	bge.n	8005a68 <_puts_r+0x9c>
 8005a0a:	4622      	mov	r2, r4
 8005a0c:	210a      	movs	r1, #10
 8005a0e:	4628      	mov	r0, r5
 8005a10:	f000 f87b 	bl	8005b0a <__swbuf_r>
 8005a14:	3001      	adds	r0, #1
 8005a16:	d007      	beq.n	8005a28 <_puts_r+0x5c>
 8005a18:	250a      	movs	r5, #10
 8005a1a:	e007      	b.n	8005a2c <_puts_r+0x60>
 8005a1c:	4621      	mov	r1, r4
 8005a1e:	4628      	mov	r0, r5
 8005a20:	f000 f8b0 	bl	8005b84 <__swsetup_r>
 8005a24:	2800      	cmp	r0, #0
 8005a26:	d0e7      	beq.n	80059f8 <_puts_r+0x2c>
 8005a28:	f04f 35ff 	mov.w	r5, #4294967295
 8005a2c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005a2e:	07da      	lsls	r2, r3, #31
 8005a30:	d405      	bmi.n	8005a3e <_puts_r+0x72>
 8005a32:	89a3      	ldrh	r3, [r4, #12]
 8005a34:	059b      	lsls	r3, r3, #22
 8005a36:	d402      	bmi.n	8005a3e <_puts_r+0x72>
 8005a38:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005a3a:	f000 f975 	bl	8005d28 <__retarget_lock_release_recursive>
 8005a3e:	4628      	mov	r0, r5
 8005a40:	bd70      	pop	{r4, r5, r6, pc}
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	da04      	bge.n	8005a50 <_puts_r+0x84>
 8005a46:	69a2      	ldr	r2, [r4, #24]
 8005a48:	429a      	cmp	r2, r3
 8005a4a:	dc06      	bgt.n	8005a5a <_puts_r+0x8e>
 8005a4c:	290a      	cmp	r1, #10
 8005a4e:	d004      	beq.n	8005a5a <_puts_r+0x8e>
 8005a50:	6823      	ldr	r3, [r4, #0]
 8005a52:	1c5a      	adds	r2, r3, #1
 8005a54:	6022      	str	r2, [r4, #0]
 8005a56:	7019      	strb	r1, [r3, #0]
 8005a58:	e7cf      	b.n	80059fa <_puts_r+0x2e>
 8005a5a:	4622      	mov	r2, r4
 8005a5c:	4628      	mov	r0, r5
 8005a5e:	f000 f854 	bl	8005b0a <__swbuf_r>
 8005a62:	3001      	adds	r0, #1
 8005a64:	d1c9      	bne.n	80059fa <_puts_r+0x2e>
 8005a66:	e7df      	b.n	8005a28 <_puts_r+0x5c>
 8005a68:	6823      	ldr	r3, [r4, #0]
 8005a6a:	250a      	movs	r5, #10
 8005a6c:	1c5a      	adds	r2, r3, #1
 8005a6e:	6022      	str	r2, [r4, #0]
 8005a70:	701d      	strb	r5, [r3, #0]
 8005a72:	e7db      	b.n	8005a2c <_puts_r+0x60>

08005a74 <puts>:
 8005a74:	4b02      	ldr	r3, [pc, #8]	; (8005a80 <puts+0xc>)
 8005a76:	4601      	mov	r1, r0
 8005a78:	6818      	ldr	r0, [r3, #0]
 8005a7a:	f7ff bfa7 	b.w	80059cc <_puts_r>
 8005a7e:	bf00      	nop
 8005a80:	20000064 	.word	0x20000064

08005a84 <__sread>:
 8005a84:	b510      	push	{r4, lr}
 8005a86:	460c      	mov	r4, r1
 8005a88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a8c:	f000 f8fc 	bl	8005c88 <_read_r>
 8005a90:	2800      	cmp	r0, #0
 8005a92:	bfab      	itete	ge
 8005a94:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005a96:	89a3      	ldrhlt	r3, [r4, #12]
 8005a98:	181b      	addge	r3, r3, r0
 8005a9a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005a9e:	bfac      	ite	ge
 8005aa0:	6563      	strge	r3, [r4, #84]	; 0x54
 8005aa2:	81a3      	strhlt	r3, [r4, #12]
 8005aa4:	bd10      	pop	{r4, pc}

08005aa6 <__swrite>:
 8005aa6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005aaa:	461f      	mov	r7, r3
 8005aac:	898b      	ldrh	r3, [r1, #12]
 8005aae:	05db      	lsls	r3, r3, #23
 8005ab0:	4605      	mov	r5, r0
 8005ab2:	460c      	mov	r4, r1
 8005ab4:	4616      	mov	r6, r2
 8005ab6:	d505      	bpl.n	8005ac4 <__swrite+0x1e>
 8005ab8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005abc:	2302      	movs	r3, #2
 8005abe:	2200      	movs	r2, #0
 8005ac0:	f000 f8d0 	bl	8005c64 <_lseek_r>
 8005ac4:	89a3      	ldrh	r3, [r4, #12]
 8005ac6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005aca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005ace:	81a3      	strh	r3, [r4, #12]
 8005ad0:	4632      	mov	r2, r6
 8005ad2:	463b      	mov	r3, r7
 8005ad4:	4628      	mov	r0, r5
 8005ad6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005ada:	f000 b8e7 	b.w	8005cac <_write_r>

08005ade <__sseek>:
 8005ade:	b510      	push	{r4, lr}
 8005ae0:	460c      	mov	r4, r1
 8005ae2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ae6:	f000 f8bd 	bl	8005c64 <_lseek_r>
 8005aea:	1c43      	adds	r3, r0, #1
 8005aec:	89a3      	ldrh	r3, [r4, #12]
 8005aee:	bf15      	itete	ne
 8005af0:	6560      	strne	r0, [r4, #84]	; 0x54
 8005af2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005af6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005afa:	81a3      	strheq	r3, [r4, #12]
 8005afc:	bf18      	it	ne
 8005afe:	81a3      	strhne	r3, [r4, #12]
 8005b00:	bd10      	pop	{r4, pc}

08005b02 <__sclose>:
 8005b02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b06:	f000 b89d 	b.w	8005c44 <_close_r>

08005b0a <__swbuf_r>:
 8005b0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b0c:	460e      	mov	r6, r1
 8005b0e:	4614      	mov	r4, r2
 8005b10:	4605      	mov	r5, r0
 8005b12:	b118      	cbz	r0, 8005b1c <__swbuf_r+0x12>
 8005b14:	6a03      	ldr	r3, [r0, #32]
 8005b16:	b90b      	cbnz	r3, 8005b1c <__swbuf_r+0x12>
 8005b18:	f7ff ff10 	bl	800593c <__sinit>
 8005b1c:	69a3      	ldr	r3, [r4, #24]
 8005b1e:	60a3      	str	r3, [r4, #8]
 8005b20:	89a3      	ldrh	r3, [r4, #12]
 8005b22:	071a      	lsls	r2, r3, #28
 8005b24:	d525      	bpl.n	8005b72 <__swbuf_r+0x68>
 8005b26:	6923      	ldr	r3, [r4, #16]
 8005b28:	b31b      	cbz	r3, 8005b72 <__swbuf_r+0x68>
 8005b2a:	6823      	ldr	r3, [r4, #0]
 8005b2c:	6922      	ldr	r2, [r4, #16]
 8005b2e:	1a98      	subs	r0, r3, r2
 8005b30:	6963      	ldr	r3, [r4, #20]
 8005b32:	b2f6      	uxtb	r6, r6
 8005b34:	4283      	cmp	r3, r0
 8005b36:	4637      	mov	r7, r6
 8005b38:	dc04      	bgt.n	8005b44 <__swbuf_r+0x3a>
 8005b3a:	4621      	mov	r1, r4
 8005b3c:	4628      	mov	r0, r5
 8005b3e:	f000 fd55 	bl	80065ec <_fflush_r>
 8005b42:	b9e0      	cbnz	r0, 8005b7e <__swbuf_r+0x74>
 8005b44:	68a3      	ldr	r3, [r4, #8]
 8005b46:	3b01      	subs	r3, #1
 8005b48:	60a3      	str	r3, [r4, #8]
 8005b4a:	6823      	ldr	r3, [r4, #0]
 8005b4c:	1c5a      	adds	r2, r3, #1
 8005b4e:	6022      	str	r2, [r4, #0]
 8005b50:	701e      	strb	r6, [r3, #0]
 8005b52:	6962      	ldr	r2, [r4, #20]
 8005b54:	1c43      	adds	r3, r0, #1
 8005b56:	429a      	cmp	r2, r3
 8005b58:	d004      	beq.n	8005b64 <__swbuf_r+0x5a>
 8005b5a:	89a3      	ldrh	r3, [r4, #12]
 8005b5c:	07db      	lsls	r3, r3, #31
 8005b5e:	d506      	bpl.n	8005b6e <__swbuf_r+0x64>
 8005b60:	2e0a      	cmp	r6, #10
 8005b62:	d104      	bne.n	8005b6e <__swbuf_r+0x64>
 8005b64:	4621      	mov	r1, r4
 8005b66:	4628      	mov	r0, r5
 8005b68:	f000 fd40 	bl	80065ec <_fflush_r>
 8005b6c:	b938      	cbnz	r0, 8005b7e <__swbuf_r+0x74>
 8005b6e:	4638      	mov	r0, r7
 8005b70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005b72:	4621      	mov	r1, r4
 8005b74:	4628      	mov	r0, r5
 8005b76:	f000 f805 	bl	8005b84 <__swsetup_r>
 8005b7a:	2800      	cmp	r0, #0
 8005b7c:	d0d5      	beq.n	8005b2a <__swbuf_r+0x20>
 8005b7e:	f04f 37ff 	mov.w	r7, #4294967295
 8005b82:	e7f4      	b.n	8005b6e <__swbuf_r+0x64>

08005b84 <__swsetup_r>:
 8005b84:	b538      	push	{r3, r4, r5, lr}
 8005b86:	4b2a      	ldr	r3, [pc, #168]	; (8005c30 <__swsetup_r+0xac>)
 8005b88:	4605      	mov	r5, r0
 8005b8a:	6818      	ldr	r0, [r3, #0]
 8005b8c:	460c      	mov	r4, r1
 8005b8e:	b118      	cbz	r0, 8005b98 <__swsetup_r+0x14>
 8005b90:	6a03      	ldr	r3, [r0, #32]
 8005b92:	b90b      	cbnz	r3, 8005b98 <__swsetup_r+0x14>
 8005b94:	f7ff fed2 	bl	800593c <__sinit>
 8005b98:	89a3      	ldrh	r3, [r4, #12]
 8005b9a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005b9e:	0718      	lsls	r0, r3, #28
 8005ba0:	d422      	bmi.n	8005be8 <__swsetup_r+0x64>
 8005ba2:	06d9      	lsls	r1, r3, #27
 8005ba4:	d407      	bmi.n	8005bb6 <__swsetup_r+0x32>
 8005ba6:	2309      	movs	r3, #9
 8005ba8:	602b      	str	r3, [r5, #0]
 8005baa:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005bae:	81a3      	strh	r3, [r4, #12]
 8005bb0:	f04f 30ff 	mov.w	r0, #4294967295
 8005bb4:	e034      	b.n	8005c20 <__swsetup_r+0x9c>
 8005bb6:	0758      	lsls	r0, r3, #29
 8005bb8:	d512      	bpl.n	8005be0 <__swsetup_r+0x5c>
 8005bba:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005bbc:	b141      	cbz	r1, 8005bd0 <__swsetup_r+0x4c>
 8005bbe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005bc2:	4299      	cmp	r1, r3
 8005bc4:	d002      	beq.n	8005bcc <__swsetup_r+0x48>
 8005bc6:	4628      	mov	r0, r5
 8005bc8:	f000 f8be 	bl	8005d48 <_free_r>
 8005bcc:	2300      	movs	r3, #0
 8005bce:	6363      	str	r3, [r4, #52]	; 0x34
 8005bd0:	89a3      	ldrh	r3, [r4, #12]
 8005bd2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005bd6:	81a3      	strh	r3, [r4, #12]
 8005bd8:	2300      	movs	r3, #0
 8005bda:	6063      	str	r3, [r4, #4]
 8005bdc:	6923      	ldr	r3, [r4, #16]
 8005bde:	6023      	str	r3, [r4, #0]
 8005be0:	89a3      	ldrh	r3, [r4, #12]
 8005be2:	f043 0308 	orr.w	r3, r3, #8
 8005be6:	81a3      	strh	r3, [r4, #12]
 8005be8:	6923      	ldr	r3, [r4, #16]
 8005bea:	b94b      	cbnz	r3, 8005c00 <__swsetup_r+0x7c>
 8005bec:	89a3      	ldrh	r3, [r4, #12]
 8005bee:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005bf2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005bf6:	d003      	beq.n	8005c00 <__swsetup_r+0x7c>
 8005bf8:	4621      	mov	r1, r4
 8005bfa:	4628      	mov	r0, r5
 8005bfc:	f000 fd44 	bl	8006688 <__smakebuf_r>
 8005c00:	89a0      	ldrh	r0, [r4, #12]
 8005c02:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005c06:	f010 0301 	ands.w	r3, r0, #1
 8005c0a:	d00a      	beq.n	8005c22 <__swsetup_r+0x9e>
 8005c0c:	2300      	movs	r3, #0
 8005c0e:	60a3      	str	r3, [r4, #8]
 8005c10:	6963      	ldr	r3, [r4, #20]
 8005c12:	425b      	negs	r3, r3
 8005c14:	61a3      	str	r3, [r4, #24]
 8005c16:	6923      	ldr	r3, [r4, #16]
 8005c18:	b943      	cbnz	r3, 8005c2c <__swsetup_r+0xa8>
 8005c1a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005c1e:	d1c4      	bne.n	8005baa <__swsetup_r+0x26>
 8005c20:	bd38      	pop	{r3, r4, r5, pc}
 8005c22:	0781      	lsls	r1, r0, #30
 8005c24:	bf58      	it	pl
 8005c26:	6963      	ldrpl	r3, [r4, #20]
 8005c28:	60a3      	str	r3, [r4, #8]
 8005c2a:	e7f4      	b.n	8005c16 <__swsetup_r+0x92>
 8005c2c:	2000      	movs	r0, #0
 8005c2e:	e7f7      	b.n	8005c20 <__swsetup_r+0x9c>
 8005c30:	20000064 	.word	0x20000064

08005c34 <memset>:
 8005c34:	4402      	add	r2, r0
 8005c36:	4603      	mov	r3, r0
 8005c38:	4293      	cmp	r3, r2
 8005c3a:	d100      	bne.n	8005c3e <memset+0xa>
 8005c3c:	4770      	bx	lr
 8005c3e:	f803 1b01 	strb.w	r1, [r3], #1
 8005c42:	e7f9      	b.n	8005c38 <memset+0x4>

08005c44 <_close_r>:
 8005c44:	b538      	push	{r3, r4, r5, lr}
 8005c46:	4d06      	ldr	r5, [pc, #24]	; (8005c60 <_close_r+0x1c>)
 8005c48:	2300      	movs	r3, #0
 8005c4a:	4604      	mov	r4, r0
 8005c4c:	4608      	mov	r0, r1
 8005c4e:	602b      	str	r3, [r5, #0]
 8005c50:	f7fb f88f 	bl	8000d72 <_close>
 8005c54:	1c43      	adds	r3, r0, #1
 8005c56:	d102      	bne.n	8005c5e <_close_r+0x1a>
 8005c58:	682b      	ldr	r3, [r5, #0]
 8005c5a:	b103      	cbz	r3, 8005c5e <_close_r+0x1a>
 8005c5c:	6023      	str	r3, [r4, #0]
 8005c5e:	bd38      	pop	{r3, r4, r5, pc}
 8005c60:	20000270 	.word	0x20000270

08005c64 <_lseek_r>:
 8005c64:	b538      	push	{r3, r4, r5, lr}
 8005c66:	4d07      	ldr	r5, [pc, #28]	; (8005c84 <_lseek_r+0x20>)
 8005c68:	4604      	mov	r4, r0
 8005c6a:	4608      	mov	r0, r1
 8005c6c:	4611      	mov	r1, r2
 8005c6e:	2200      	movs	r2, #0
 8005c70:	602a      	str	r2, [r5, #0]
 8005c72:	461a      	mov	r2, r3
 8005c74:	f7fb f8a4 	bl	8000dc0 <_lseek>
 8005c78:	1c43      	adds	r3, r0, #1
 8005c7a:	d102      	bne.n	8005c82 <_lseek_r+0x1e>
 8005c7c:	682b      	ldr	r3, [r5, #0]
 8005c7e:	b103      	cbz	r3, 8005c82 <_lseek_r+0x1e>
 8005c80:	6023      	str	r3, [r4, #0]
 8005c82:	bd38      	pop	{r3, r4, r5, pc}
 8005c84:	20000270 	.word	0x20000270

08005c88 <_read_r>:
 8005c88:	b538      	push	{r3, r4, r5, lr}
 8005c8a:	4d07      	ldr	r5, [pc, #28]	; (8005ca8 <_read_r+0x20>)
 8005c8c:	4604      	mov	r4, r0
 8005c8e:	4608      	mov	r0, r1
 8005c90:	4611      	mov	r1, r2
 8005c92:	2200      	movs	r2, #0
 8005c94:	602a      	str	r2, [r5, #0]
 8005c96:	461a      	mov	r2, r3
 8005c98:	f7fb f832 	bl	8000d00 <_read>
 8005c9c:	1c43      	adds	r3, r0, #1
 8005c9e:	d102      	bne.n	8005ca6 <_read_r+0x1e>
 8005ca0:	682b      	ldr	r3, [r5, #0]
 8005ca2:	b103      	cbz	r3, 8005ca6 <_read_r+0x1e>
 8005ca4:	6023      	str	r3, [r4, #0]
 8005ca6:	bd38      	pop	{r3, r4, r5, pc}
 8005ca8:	20000270 	.word	0x20000270

08005cac <_write_r>:
 8005cac:	b538      	push	{r3, r4, r5, lr}
 8005cae:	4d07      	ldr	r5, [pc, #28]	; (8005ccc <_write_r+0x20>)
 8005cb0:	4604      	mov	r4, r0
 8005cb2:	4608      	mov	r0, r1
 8005cb4:	4611      	mov	r1, r2
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	602a      	str	r2, [r5, #0]
 8005cba:	461a      	mov	r2, r3
 8005cbc:	f7fb f83d 	bl	8000d3a <_write>
 8005cc0:	1c43      	adds	r3, r0, #1
 8005cc2:	d102      	bne.n	8005cca <_write_r+0x1e>
 8005cc4:	682b      	ldr	r3, [r5, #0]
 8005cc6:	b103      	cbz	r3, 8005cca <_write_r+0x1e>
 8005cc8:	6023      	str	r3, [r4, #0]
 8005cca:	bd38      	pop	{r3, r4, r5, pc}
 8005ccc:	20000270 	.word	0x20000270

08005cd0 <__errno>:
 8005cd0:	4b01      	ldr	r3, [pc, #4]	; (8005cd8 <__errno+0x8>)
 8005cd2:	6818      	ldr	r0, [r3, #0]
 8005cd4:	4770      	bx	lr
 8005cd6:	bf00      	nop
 8005cd8:	20000064 	.word	0x20000064

08005cdc <__libc_init_array>:
 8005cdc:	b570      	push	{r4, r5, r6, lr}
 8005cde:	4d0d      	ldr	r5, [pc, #52]	; (8005d14 <__libc_init_array+0x38>)
 8005ce0:	4c0d      	ldr	r4, [pc, #52]	; (8005d18 <__libc_init_array+0x3c>)
 8005ce2:	1b64      	subs	r4, r4, r5
 8005ce4:	10a4      	asrs	r4, r4, #2
 8005ce6:	2600      	movs	r6, #0
 8005ce8:	42a6      	cmp	r6, r4
 8005cea:	d109      	bne.n	8005d00 <__libc_init_array+0x24>
 8005cec:	4d0b      	ldr	r5, [pc, #44]	; (8005d1c <__libc_init_array+0x40>)
 8005cee:	4c0c      	ldr	r4, [pc, #48]	; (8005d20 <__libc_init_array+0x44>)
 8005cf0:	f000 fd38 	bl	8006764 <_init>
 8005cf4:	1b64      	subs	r4, r4, r5
 8005cf6:	10a4      	asrs	r4, r4, #2
 8005cf8:	2600      	movs	r6, #0
 8005cfa:	42a6      	cmp	r6, r4
 8005cfc:	d105      	bne.n	8005d0a <__libc_init_array+0x2e>
 8005cfe:	bd70      	pop	{r4, r5, r6, pc}
 8005d00:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d04:	4798      	blx	r3
 8005d06:	3601      	adds	r6, #1
 8005d08:	e7ee      	b.n	8005ce8 <__libc_init_array+0xc>
 8005d0a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d0e:	4798      	blx	r3
 8005d10:	3601      	adds	r6, #1
 8005d12:	e7f2      	b.n	8005cfa <__libc_init_array+0x1e>
 8005d14:	08006828 	.word	0x08006828
 8005d18:	08006828 	.word	0x08006828
 8005d1c:	08006828 	.word	0x08006828
 8005d20:	0800682c 	.word	0x0800682c

08005d24 <__retarget_lock_init_recursive>:
 8005d24:	4770      	bx	lr

08005d26 <__retarget_lock_acquire_recursive>:
 8005d26:	4770      	bx	lr

08005d28 <__retarget_lock_release_recursive>:
 8005d28:	4770      	bx	lr

08005d2a <memcpy>:
 8005d2a:	440a      	add	r2, r1
 8005d2c:	4291      	cmp	r1, r2
 8005d2e:	f100 33ff 	add.w	r3, r0, #4294967295
 8005d32:	d100      	bne.n	8005d36 <memcpy+0xc>
 8005d34:	4770      	bx	lr
 8005d36:	b510      	push	{r4, lr}
 8005d38:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005d3c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005d40:	4291      	cmp	r1, r2
 8005d42:	d1f9      	bne.n	8005d38 <memcpy+0xe>
 8005d44:	bd10      	pop	{r4, pc}
	...

08005d48 <_free_r>:
 8005d48:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005d4a:	2900      	cmp	r1, #0
 8005d4c:	d044      	beq.n	8005dd8 <_free_r+0x90>
 8005d4e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005d52:	9001      	str	r0, [sp, #4]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	f1a1 0404 	sub.w	r4, r1, #4
 8005d5a:	bfb8      	it	lt
 8005d5c:	18e4      	addlt	r4, r4, r3
 8005d5e:	f000 f8df 	bl	8005f20 <__malloc_lock>
 8005d62:	4a1e      	ldr	r2, [pc, #120]	; (8005ddc <_free_r+0x94>)
 8005d64:	9801      	ldr	r0, [sp, #4]
 8005d66:	6813      	ldr	r3, [r2, #0]
 8005d68:	b933      	cbnz	r3, 8005d78 <_free_r+0x30>
 8005d6a:	6063      	str	r3, [r4, #4]
 8005d6c:	6014      	str	r4, [r2, #0]
 8005d6e:	b003      	add	sp, #12
 8005d70:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005d74:	f000 b8da 	b.w	8005f2c <__malloc_unlock>
 8005d78:	42a3      	cmp	r3, r4
 8005d7a:	d908      	bls.n	8005d8e <_free_r+0x46>
 8005d7c:	6825      	ldr	r5, [r4, #0]
 8005d7e:	1961      	adds	r1, r4, r5
 8005d80:	428b      	cmp	r3, r1
 8005d82:	bf01      	itttt	eq
 8005d84:	6819      	ldreq	r1, [r3, #0]
 8005d86:	685b      	ldreq	r3, [r3, #4]
 8005d88:	1949      	addeq	r1, r1, r5
 8005d8a:	6021      	streq	r1, [r4, #0]
 8005d8c:	e7ed      	b.n	8005d6a <_free_r+0x22>
 8005d8e:	461a      	mov	r2, r3
 8005d90:	685b      	ldr	r3, [r3, #4]
 8005d92:	b10b      	cbz	r3, 8005d98 <_free_r+0x50>
 8005d94:	42a3      	cmp	r3, r4
 8005d96:	d9fa      	bls.n	8005d8e <_free_r+0x46>
 8005d98:	6811      	ldr	r1, [r2, #0]
 8005d9a:	1855      	adds	r5, r2, r1
 8005d9c:	42a5      	cmp	r5, r4
 8005d9e:	d10b      	bne.n	8005db8 <_free_r+0x70>
 8005da0:	6824      	ldr	r4, [r4, #0]
 8005da2:	4421      	add	r1, r4
 8005da4:	1854      	adds	r4, r2, r1
 8005da6:	42a3      	cmp	r3, r4
 8005da8:	6011      	str	r1, [r2, #0]
 8005daa:	d1e0      	bne.n	8005d6e <_free_r+0x26>
 8005dac:	681c      	ldr	r4, [r3, #0]
 8005dae:	685b      	ldr	r3, [r3, #4]
 8005db0:	6053      	str	r3, [r2, #4]
 8005db2:	440c      	add	r4, r1
 8005db4:	6014      	str	r4, [r2, #0]
 8005db6:	e7da      	b.n	8005d6e <_free_r+0x26>
 8005db8:	d902      	bls.n	8005dc0 <_free_r+0x78>
 8005dba:	230c      	movs	r3, #12
 8005dbc:	6003      	str	r3, [r0, #0]
 8005dbe:	e7d6      	b.n	8005d6e <_free_r+0x26>
 8005dc0:	6825      	ldr	r5, [r4, #0]
 8005dc2:	1961      	adds	r1, r4, r5
 8005dc4:	428b      	cmp	r3, r1
 8005dc6:	bf04      	itt	eq
 8005dc8:	6819      	ldreq	r1, [r3, #0]
 8005dca:	685b      	ldreq	r3, [r3, #4]
 8005dcc:	6063      	str	r3, [r4, #4]
 8005dce:	bf04      	itt	eq
 8005dd0:	1949      	addeq	r1, r1, r5
 8005dd2:	6021      	streq	r1, [r4, #0]
 8005dd4:	6054      	str	r4, [r2, #4]
 8005dd6:	e7ca      	b.n	8005d6e <_free_r+0x26>
 8005dd8:	b003      	add	sp, #12
 8005dda:	bd30      	pop	{r4, r5, pc}
 8005ddc:	20000278 	.word	0x20000278

08005de0 <sbrk_aligned>:
 8005de0:	b570      	push	{r4, r5, r6, lr}
 8005de2:	4e0e      	ldr	r6, [pc, #56]	; (8005e1c <sbrk_aligned+0x3c>)
 8005de4:	460c      	mov	r4, r1
 8005de6:	6831      	ldr	r1, [r6, #0]
 8005de8:	4605      	mov	r5, r0
 8005dea:	b911      	cbnz	r1, 8005df2 <sbrk_aligned+0x12>
 8005dec:	f000 fcaa 	bl	8006744 <_sbrk_r>
 8005df0:	6030      	str	r0, [r6, #0]
 8005df2:	4621      	mov	r1, r4
 8005df4:	4628      	mov	r0, r5
 8005df6:	f000 fca5 	bl	8006744 <_sbrk_r>
 8005dfa:	1c43      	adds	r3, r0, #1
 8005dfc:	d00a      	beq.n	8005e14 <sbrk_aligned+0x34>
 8005dfe:	1cc4      	adds	r4, r0, #3
 8005e00:	f024 0403 	bic.w	r4, r4, #3
 8005e04:	42a0      	cmp	r0, r4
 8005e06:	d007      	beq.n	8005e18 <sbrk_aligned+0x38>
 8005e08:	1a21      	subs	r1, r4, r0
 8005e0a:	4628      	mov	r0, r5
 8005e0c:	f000 fc9a 	bl	8006744 <_sbrk_r>
 8005e10:	3001      	adds	r0, #1
 8005e12:	d101      	bne.n	8005e18 <sbrk_aligned+0x38>
 8005e14:	f04f 34ff 	mov.w	r4, #4294967295
 8005e18:	4620      	mov	r0, r4
 8005e1a:	bd70      	pop	{r4, r5, r6, pc}
 8005e1c:	2000027c 	.word	0x2000027c

08005e20 <_malloc_r>:
 8005e20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005e24:	1ccd      	adds	r5, r1, #3
 8005e26:	f025 0503 	bic.w	r5, r5, #3
 8005e2a:	3508      	adds	r5, #8
 8005e2c:	2d0c      	cmp	r5, #12
 8005e2e:	bf38      	it	cc
 8005e30:	250c      	movcc	r5, #12
 8005e32:	2d00      	cmp	r5, #0
 8005e34:	4607      	mov	r7, r0
 8005e36:	db01      	blt.n	8005e3c <_malloc_r+0x1c>
 8005e38:	42a9      	cmp	r1, r5
 8005e3a:	d905      	bls.n	8005e48 <_malloc_r+0x28>
 8005e3c:	230c      	movs	r3, #12
 8005e3e:	603b      	str	r3, [r7, #0]
 8005e40:	2600      	movs	r6, #0
 8005e42:	4630      	mov	r0, r6
 8005e44:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005e48:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005f1c <_malloc_r+0xfc>
 8005e4c:	f000 f868 	bl	8005f20 <__malloc_lock>
 8005e50:	f8d8 3000 	ldr.w	r3, [r8]
 8005e54:	461c      	mov	r4, r3
 8005e56:	bb5c      	cbnz	r4, 8005eb0 <_malloc_r+0x90>
 8005e58:	4629      	mov	r1, r5
 8005e5a:	4638      	mov	r0, r7
 8005e5c:	f7ff ffc0 	bl	8005de0 <sbrk_aligned>
 8005e60:	1c43      	adds	r3, r0, #1
 8005e62:	4604      	mov	r4, r0
 8005e64:	d155      	bne.n	8005f12 <_malloc_r+0xf2>
 8005e66:	f8d8 4000 	ldr.w	r4, [r8]
 8005e6a:	4626      	mov	r6, r4
 8005e6c:	2e00      	cmp	r6, #0
 8005e6e:	d145      	bne.n	8005efc <_malloc_r+0xdc>
 8005e70:	2c00      	cmp	r4, #0
 8005e72:	d048      	beq.n	8005f06 <_malloc_r+0xe6>
 8005e74:	6823      	ldr	r3, [r4, #0]
 8005e76:	4631      	mov	r1, r6
 8005e78:	4638      	mov	r0, r7
 8005e7a:	eb04 0903 	add.w	r9, r4, r3
 8005e7e:	f000 fc61 	bl	8006744 <_sbrk_r>
 8005e82:	4581      	cmp	r9, r0
 8005e84:	d13f      	bne.n	8005f06 <_malloc_r+0xe6>
 8005e86:	6821      	ldr	r1, [r4, #0]
 8005e88:	1a6d      	subs	r5, r5, r1
 8005e8a:	4629      	mov	r1, r5
 8005e8c:	4638      	mov	r0, r7
 8005e8e:	f7ff ffa7 	bl	8005de0 <sbrk_aligned>
 8005e92:	3001      	adds	r0, #1
 8005e94:	d037      	beq.n	8005f06 <_malloc_r+0xe6>
 8005e96:	6823      	ldr	r3, [r4, #0]
 8005e98:	442b      	add	r3, r5
 8005e9a:	6023      	str	r3, [r4, #0]
 8005e9c:	f8d8 3000 	ldr.w	r3, [r8]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d038      	beq.n	8005f16 <_malloc_r+0xf6>
 8005ea4:	685a      	ldr	r2, [r3, #4]
 8005ea6:	42a2      	cmp	r2, r4
 8005ea8:	d12b      	bne.n	8005f02 <_malloc_r+0xe2>
 8005eaa:	2200      	movs	r2, #0
 8005eac:	605a      	str	r2, [r3, #4]
 8005eae:	e00f      	b.n	8005ed0 <_malloc_r+0xb0>
 8005eb0:	6822      	ldr	r2, [r4, #0]
 8005eb2:	1b52      	subs	r2, r2, r5
 8005eb4:	d41f      	bmi.n	8005ef6 <_malloc_r+0xd6>
 8005eb6:	2a0b      	cmp	r2, #11
 8005eb8:	d917      	bls.n	8005eea <_malloc_r+0xca>
 8005eba:	1961      	adds	r1, r4, r5
 8005ebc:	42a3      	cmp	r3, r4
 8005ebe:	6025      	str	r5, [r4, #0]
 8005ec0:	bf18      	it	ne
 8005ec2:	6059      	strne	r1, [r3, #4]
 8005ec4:	6863      	ldr	r3, [r4, #4]
 8005ec6:	bf08      	it	eq
 8005ec8:	f8c8 1000 	streq.w	r1, [r8]
 8005ecc:	5162      	str	r2, [r4, r5]
 8005ece:	604b      	str	r3, [r1, #4]
 8005ed0:	4638      	mov	r0, r7
 8005ed2:	f104 060b 	add.w	r6, r4, #11
 8005ed6:	f000 f829 	bl	8005f2c <__malloc_unlock>
 8005eda:	f026 0607 	bic.w	r6, r6, #7
 8005ede:	1d23      	adds	r3, r4, #4
 8005ee0:	1af2      	subs	r2, r6, r3
 8005ee2:	d0ae      	beq.n	8005e42 <_malloc_r+0x22>
 8005ee4:	1b9b      	subs	r3, r3, r6
 8005ee6:	50a3      	str	r3, [r4, r2]
 8005ee8:	e7ab      	b.n	8005e42 <_malloc_r+0x22>
 8005eea:	42a3      	cmp	r3, r4
 8005eec:	6862      	ldr	r2, [r4, #4]
 8005eee:	d1dd      	bne.n	8005eac <_malloc_r+0x8c>
 8005ef0:	f8c8 2000 	str.w	r2, [r8]
 8005ef4:	e7ec      	b.n	8005ed0 <_malloc_r+0xb0>
 8005ef6:	4623      	mov	r3, r4
 8005ef8:	6864      	ldr	r4, [r4, #4]
 8005efa:	e7ac      	b.n	8005e56 <_malloc_r+0x36>
 8005efc:	4634      	mov	r4, r6
 8005efe:	6876      	ldr	r6, [r6, #4]
 8005f00:	e7b4      	b.n	8005e6c <_malloc_r+0x4c>
 8005f02:	4613      	mov	r3, r2
 8005f04:	e7cc      	b.n	8005ea0 <_malloc_r+0x80>
 8005f06:	230c      	movs	r3, #12
 8005f08:	603b      	str	r3, [r7, #0]
 8005f0a:	4638      	mov	r0, r7
 8005f0c:	f000 f80e 	bl	8005f2c <__malloc_unlock>
 8005f10:	e797      	b.n	8005e42 <_malloc_r+0x22>
 8005f12:	6025      	str	r5, [r4, #0]
 8005f14:	e7dc      	b.n	8005ed0 <_malloc_r+0xb0>
 8005f16:	605b      	str	r3, [r3, #4]
 8005f18:	deff      	udf	#255	; 0xff
 8005f1a:	bf00      	nop
 8005f1c:	20000278 	.word	0x20000278

08005f20 <__malloc_lock>:
 8005f20:	4801      	ldr	r0, [pc, #4]	; (8005f28 <__malloc_lock+0x8>)
 8005f22:	f7ff bf00 	b.w	8005d26 <__retarget_lock_acquire_recursive>
 8005f26:	bf00      	nop
 8005f28:	20000274 	.word	0x20000274

08005f2c <__malloc_unlock>:
 8005f2c:	4801      	ldr	r0, [pc, #4]	; (8005f34 <__malloc_unlock+0x8>)
 8005f2e:	f7ff befb 	b.w	8005d28 <__retarget_lock_release_recursive>
 8005f32:	bf00      	nop
 8005f34:	20000274 	.word	0x20000274

08005f38 <__sfputc_r>:
 8005f38:	6893      	ldr	r3, [r2, #8]
 8005f3a:	3b01      	subs	r3, #1
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	b410      	push	{r4}
 8005f40:	6093      	str	r3, [r2, #8]
 8005f42:	da08      	bge.n	8005f56 <__sfputc_r+0x1e>
 8005f44:	6994      	ldr	r4, [r2, #24]
 8005f46:	42a3      	cmp	r3, r4
 8005f48:	db01      	blt.n	8005f4e <__sfputc_r+0x16>
 8005f4a:	290a      	cmp	r1, #10
 8005f4c:	d103      	bne.n	8005f56 <__sfputc_r+0x1e>
 8005f4e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005f52:	f7ff bdda 	b.w	8005b0a <__swbuf_r>
 8005f56:	6813      	ldr	r3, [r2, #0]
 8005f58:	1c58      	adds	r0, r3, #1
 8005f5a:	6010      	str	r0, [r2, #0]
 8005f5c:	7019      	strb	r1, [r3, #0]
 8005f5e:	4608      	mov	r0, r1
 8005f60:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005f64:	4770      	bx	lr

08005f66 <__sfputs_r>:
 8005f66:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f68:	4606      	mov	r6, r0
 8005f6a:	460f      	mov	r7, r1
 8005f6c:	4614      	mov	r4, r2
 8005f6e:	18d5      	adds	r5, r2, r3
 8005f70:	42ac      	cmp	r4, r5
 8005f72:	d101      	bne.n	8005f78 <__sfputs_r+0x12>
 8005f74:	2000      	movs	r0, #0
 8005f76:	e007      	b.n	8005f88 <__sfputs_r+0x22>
 8005f78:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f7c:	463a      	mov	r2, r7
 8005f7e:	4630      	mov	r0, r6
 8005f80:	f7ff ffda 	bl	8005f38 <__sfputc_r>
 8005f84:	1c43      	adds	r3, r0, #1
 8005f86:	d1f3      	bne.n	8005f70 <__sfputs_r+0xa>
 8005f88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005f8c <_vfiprintf_r>:
 8005f8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f90:	460d      	mov	r5, r1
 8005f92:	b09d      	sub	sp, #116	; 0x74
 8005f94:	4614      	mov	r4, r2
 8005f96:	4698      	mov	r8, r3
 8005f98:	4606      	mov	r6, r0
 8005f9a:	b118      	cbz	r0, 8005fa4 <_vfiprintf_r+0x18>
 8005f9c:	6a03      	ldr	r3, [r0, #32]
 8005f9e:	b90b      	cbnz	r3, 8005fa4 <_vfiprintf_r+0x18>
 8005fa0:	f7ff fccc 	bl	800593c <__sinit>
 8005fa4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005fa6:	07d9      	lsls	r1, r3, #31
 8005fa8:	d405      	bmi.n	8005fb6 <_vfiprintf_r+0x2a>
 8005faa:	89ab      	ldrh	r3, [r5, #12]
 8005fac:	059a      	lsls	r2, r3, #22
 8005fae:	d402      	bmi.n	8005fb6 <_vfiprintf_r+0x2a>
 8005fb0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005fb2:	f7ff feb8 	bl	8005d26 <__retarget_lock_acquire_recursive>
 8005fb6:	89ab      	ldrh	r3, [r5, #12]
 8005fb8:	071b      	lsls	r3, r3, #28
 8005fba:	d501      	bpl.n	8005fc0 <_vfiprintf_r+0x34>
 8005fbc:	692b      	ldr	r3, [r5, #16]
 8005fbe:	b99b      	cbnz	r3, 8005fe8 <_vfiprintf_r+0x5c>
 8005fc0:	4629      	mov	r1, r5
 8005fc2:	4630      	mov	r0, r6
 8005fc4:	f7ff fdde 	bl	8005b84 <__swsetup_r>
 8005fc8:	b170      	cbz	r0, 8005fe8 <_vfiprintf_r+0x5c>
 8005fca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005fcc:	07dc      	lsls	r4, r3, #31
 8005fce:	d504      	bpl.n	8005fda <_vfiprintf_r+0x4e>
 8005fd0:	f04f 30ff 	mov.w	r0, #4294967295
 8005fd4:	b01d      	add	sp, #116	; 0x74
 8005fd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005fda:	89ab      	ldrh	r3, [r5, #12]
 8005fdc:	0598      	lsls	r0, r3, #22
 8005fde:	d4f7      	bmi.n	8005fd0 <_vfiprintf_r+0x44>
 8005fe0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005fe2:	f7ff fea1 	bl	8005d28 <__retarget_lock_release_recursive>
 8005fe6:	e7f3      	b.n	8005fd0 <_vfiprintf_r+0x44>
 8005fe8:	2300      	movs	r3, #0
 8005fea:	9309      	str	r3, [sp, #36]	; 0x24
 8005fec:	2320      	movs	r3, #32
 8005fee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005ff2:	f8cd 800c 	str.w	r8, [sp, #12]
 8005ff6:	2330      	movs	r3, #48	; 0x30
 8005ff8:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80061ac <_vfiprintf_r+0x220>
 8005ffc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006000:	f04f 0901 	mov.w	r9, #1
 8006004:	4623      	mov	r3, r4
 8006006:	469a      	mov	sl, r3
 8006008:	f813 2b01 	ldrb.w	r2, [r3], #1
 800600c:	b10a      	cbz	r2, 8006012 <_vfiprintf_r+0x86>
 800600e:	2a25      	cmp	r2, #37	; 0x25
 8006010:	d1f9      	bne.n	8006006 <_vfiprintf_r+0x7a>
 8006012:	ebba 0b04 	subs.w	fp, sl, r4
 8006016:	d00b      	beq.n	8006030 <_vfiprintf_r+0xa4>
 8006018:	465b      	mov	r3, fp
 800601a:	4622      	mov	r2, r4
 800601c:	4629      	mov	r1, r5
 800601e:	4630      	mov	r0, r6
 8006020:	f7ff ffa1 	bl	8005f66 <__sfputs_r>
 8006024:	3001      	adds	r0, #1
 8006026:	f000 80a9 	beq.w	800617c <_vfiprintf_r+0x1f0>
 800602a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800602c:	445a      	add	r2, fp
 800602e:	9209      	str	r2, [sp, #36]	; 0x24
 8006030:	f89a 3000 	ldrb.w	r3, [sl]
 8006034:	2b00      	cmp	r3, #0
 8006036:	f000 80a1 	beq.w	800617c <_vfiprintf_r+0x1f0>
 800603a:	2300      	movs	r3, #0
 800603c:	f04f 32ff 	mov.w	r2, #4294967295
 8006040:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006044:	f10a 0a01 	add.w	sl, sl, #1
 8006048:	9304      	str	r3, [sp, #16]
 800604a:	9307      	str	r3, [sp, #28]
 800604c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006050:	931a      	str	r3, [sp, #104]	; 0x68
 8006052:	4654      	mov	r4, sl
 8006054:	2205      	movs	r2, #5
 8006056:	f814 1b01 	ldrb.w	r1, [r4], #1
 800605a:	4854      	ldr	r0, [pc, #336]	; (80061ac <_vfiprintf_r+0x220>)
 800605c:	f7fa f8b8 	bl	80001d0 <memchr>
 8006060:	9a04      	ldr	r2, [sp, #16]
 8006062:	b9d8      	cbnz	r0, 800609c <_vfiprintf_r+0x110>
 8006064:	06d1      	lsls	r1, r2, #27
 8006066:	bf44      	itt	mi
 8006068:	2320      	movmi	r3, #32
 800606a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800606e:	0713      	lsls	r3, r2, #28
 8006070:	bf44      	itt	mi
 8006072:	232b      	movmi	r3, #43	; 0x2b
 8006074:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006078:	f89a 3000 	ldrb.w	r3, [sl]
 800607c:	2b2a      	cmp	r3, #42	; 0x2a
 800607e:	d015      	beq.n	80060ac <_vfiprintf_r+0x120>
 8006080:	9a07      	ldr	r2, [sp, #28]
 8006082:	4654      	mov	r4, sl
 8006084:	2000      	movs	r0, #0
 8006086:	f04f 0c0a 	mov.w	ip, #10
 800608a:	4621      	mov	r1, r4
 800608c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006090:	3b30      	subs	r3, #48	; 0x30
 8006092:	2b09      	cmp	r3, #9
 8006094:	d94d      	bls.n	8006132 <_vfiprintf_r+0x1a6>
 8006096:	b1b0      	cbz	r0, 80060c6 <_vfiprintf_r+0x13a>
 8006098:	9207      	str	r2, [sp, #28]
 800609a:	e014      	b.n	80060c6 <_vfiprintf_r+0x13a>
 800609c:	eba0 0308 	sub.w	r3, r0, r8
 80060a0:	fa09 f303 	lsl.w	r3, r9, r3
 80060a4:	4313      	orrs	r3, r2
 80060a6:	9304      	str	r3, [sp, #16]
 80060a8:	46a2      	mov	sl, r4
 80060aa:	e7d2      	b.n	8006052 <_vfiprintf_r+0xc6>
 80060ac:	9b03      	ldr	r3, [sp, #12]
 80060ae:	1d19      	adds	r1, r3, #4
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	9103      	str	r1, [sp, #12]
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	bfbb      	ittet	lt
 80060b8:	425b      	neglt	r3, r3
 80060ba:	f042 0202 	orrlt.w	r2, r2, #2
 80060be:	9307      	strge	r3, [sp, #28]
 80060c0:	9307      	strlt	r3, [sp, #28]
 80060c2:	bfb8      	it	lt
 80060c4:	9204      	strlt	r2, [sp, #16]
 80060c6:	7823      	ldrb	r3, [r4, #0]
 80060c8:	2b2e      	cmp	r3, #46	; 0x2e
 80060ca:	d10c      	bne.n	80060e6 <_vfiprintf_r+0x15a>
 80060cc:	7863      	ldrb	r3, [r4, #1]
 80060ce:	2b2a      	cmp	r3, #42	; 0x2a
 80060d0:	d134      	bne.n	800613c <_vfiprintf_r+0x1b0>
 80060d2:	9b03      	ldr	r3, [sp, #12]
 80060d4:	1d1a      	adds	r2, r3, #4
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	9203      	str	r2, [sp, #12]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	bfb8      	it	lt
 80060de:	f04f 33ff 	movlt.w	r3, #4294967295
 80060e2:	3402      	adds	r4, #2
 80060e4:	9305      	str	r3, [sp, #20]
 80060e6:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80061bc <_vfiprintf_r+0x230>
 80060ea:	7821      	ldrb	r1, [r4, #0]
 80060ec:	2203      	movs	r2, #3
 80060ee:	4650      	mov	r0, sl
 80060f0:	f7fa f86e 	bl	80001d0 <memchr>
 80060f4:	b138      	cbz	r0, 8006106 <_vfiprintf_r+0x17a>
 80060f6:	9b04      	ldr	r3, [sp, #16]
 80060f8:	eba0 000a 	sub.w	r0, r0, sl
 80060fc:	2240      	movs	r2, #64	; 0x40
 80060fe:	4082      	lsls	r2, r0
 8006100:	4313      	orrs	r3, r2
 8006102:	3401      	adds	r4, #1
 8006104:	9304      	str	r3, [sp, #16]
 8006106:	f814 1b01 	ldrb.w	r1, [r4], #1
 800610a:	4829      	ldr	r0, [pc, #164]	; (80061b0 <_vfiprintf_r+0x224>)
 800610c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006110:	2206      	movs	r2, #6
 8006112:	f7fa f85d 	bl	80001d0 <memchr>
 8006116:	2800      	cmp	r0, #0
 8006118:	d03f      	beq.n	800619a <_vfiprintf_r+0x20e>
 800611a:	4b26      	ldr	r3, [pc, #152]	; (80061b4 <_vfiprintf_r+0x228>)
 800611c:	bb1b      	cbnz	r3, 8006166 <_vfiprintf_r+0x1da>
 800611e:	9b03      	ldr	r3, [sp, #12]
 8006120:	3307      	adds	r3, #7
 8006122:	f023 0307 	bic.w	r3, r3, #7
 8006126:	3308      	adds	r3, #8
 8006128:	9303      	str	r3, [sp, #12]
 800612a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800612c:	443b      	add	r3, r7
 800612e:	9309      	str	r3, [sp, #36]	; 0x24
 8006130:	e768      	b.n	8006004 <_vfiprintf_r+0x78>
 8006132:	fb0c 3202 	mla	r2, ip, r2, r3
 8006136:	460c      	mov	r4, r1
 8006138:	2001      	movs	r0, #1
 800613a:	e7a6      	b.n	800608a <_vfiprintf_r+0xfe>
 800613c:	2300      	movs	r3, #0
 800613e:	3401      	adds	r4, #1
 8006140:	9305      	str	r3, [sp, #20]
 8006142:	4619      	mov	r1, r3
 8006144:	f04f 0c0a 	mov.w	ip, #10
 8006148:	4620      	mov	r0, r4
 800614a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800614e:	3a30      	subs	r2, #48	; 0x30
 8006150:	2a09      	cmp	r2, #9
 8006152:	d903      	bls.n	800615c <_vfiprintf_r+0x1d0>
 8006154:	2b00      	cmp	r3, #0
 8006156:	d0c6      	beq.n	80060e6 <_vfiprintf_r+0x15a>
 8006158:	9105      	str	r1, [sp, #20]
 800615a:	e7c4      	b.n	80060e6 <_vfiprintf_r+0x15a>
 800615c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006160:	4604      	mov	r4, r0
 8006162:	2301      	movs	r3, #1
 8006164:	e7f0      	b.n	8006148 <_vfiprintf_r+0x1bc>
 8006166:	ab03      	add	r3, sp, #12
 8006168:	9300      	str	r3, [sp, #0]
 800616a:	462a      	mov	r2, r5
 800616c:	4b12      	ldr	r3, [pc, #72]	; (80061b8 <_vfiprintf_r+0x22c>)
 800616e:	a904      	add	r1, sp, #16
 8006170:	4630      	mov	r0, r6
 8006172:	f3af 8000 	nop.w
 8006176:	4607      	mov	r7, r0
 8006178:	1c78      	adds	r0, r7, #1
 800617a:	d1d6      	bne.n	800612a <_vfiprintf_r+0x19e>
 800617c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800617e:	07d9      	lsls	r1, r3, #31
 8006180:	d405      	bmi.n	800618e <_vfiprintf_r+0x202>
 8006182:	89ab      	ldrh	r3, [r5, #12]
 8006184:	059a      	lsls	r2, r3, #22
 8006186:	d402      	bmi.n	800618e <_vfiprintf_r+0x202>
 8006188:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800618a:	f7ff fdcd 	bl	8005d28 <__retarget_lock_release_recursive>
 800618e:	89ab      	ldrh	r3, [r5, #12]
 8006190:	065b      	lsls	r3, r3, #25
 8006192:	f53f af1d 	bmi.w	8005fd0 <_vfiprintf_r+0x44>
 8006196:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006198:	e71c      	b.n	8005fd4 <_vfiprintf_r+0x48>
 800619a:	ab03      	add	r3, sp, #12
 800619c:	9300      	str	r3, [sp, #0]
 800619e:	462a      	mov	r2, r5
 80061a0:	4b05      	ldr	r3, [pc, #20]	; (80061b8 <_vfiprintf_r+0x22c>)
 80061a2:	a904      	add	r1, sp, #16
 80061a4:	4630      	mov	r0, r6
 80061a6:	f000 f879 	bl	800629c <_printf_i>
 80061aa:	e7e4      	b.n	8006176 <_vfiprintf_r+0x1ea>
 80061ac:	080067ec 	.word	0x080067ec
 80061b0:	080067f6 	.word	0x080067f6
 80061b4:	00000000 	.word	0x00000000
 80061b8:	08005f67 	.word	0x08005f67
 80061bc:	080067f2 	.word	0x080067f2

080061c0 <_printf_common>:
 80061c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80061c4:	4616      	mov	r6, r2
 80061c6:	4699      	mov	r9, r3
 80061c8:	688a      	ldr	r2, [r1, #8]
 80061ca:	690b      	ldr	r3, [r1, #16]
 80061cc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80061d0:	4293      	cmp	r3, r2
 80061d2:	bfb8      	it	lt
 80061d4:	4613      	movlt	r3, r2
 80061d6:	6033      	str	r3, [r6, #0]
 80061d8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80061dc:	4607      	mov	r7, r0
 80061de:	460c      	mov	r4, r1
 80061e0:	b10a      	cbz	r2, 80061e6 <_printf_common+0x26>
 80061e2:	3301      	adds	r3, #1
 80061e4:	6033      	str	r3, [r6, #0]
 80061e6:	6823      	ldr	r3, [r4, #0]
 80061e8:	0699      	lsls	r1, r3, #26
 80061ea:	bf42      	ittt	mi
 80061ec:	6833      	ldrmi	r3, [r6, #0]
 80061ee:	3302      	addmi	r3, #2
 80061f0:	6033      	strmi	r3, [r6, #0]
 80061f2:	6825      	ldr	r5, [r4, #0]
 80061f4:	f015 0506 	ands.w	r5, r5, #6
 80061f8:	d106      	bne.n	8006208 <_printf_common+0x48>
 80061fa:	f104 0a19 	add.w	sl, r4, #25
 80061fe:	68e3      	ldr	r3, [r4, #12]
 8006200:	6832      	ldr	r2, [r6, #0]
 8006202:	1a9b      	subs	r3, r3, r2
 8006204:	42ab      	cmp	r3, r5
 8006206:	dc26      	bgt.n	8006256 <_printf_common+0x96>
 8006208:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800620c:	1e13      	subs	r3, r2, #0
 800620e:	6822      	ldr	r2, [r4, #0]
 8006210:	bf18      	it	ne
 8006212:	2301      	movne	r3, #1
 8006214:	0692      	lsls	r2, r2, #26
 8006216:	d42b      	bmi.n	8006270 <_printf_common+0xb0>
 8006218:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800621c:	4649      	mov	r1, r9
 800621e:	4638      	mov	r0, r7
 8006220:	47c0      	blx	r8
 8006222:	3001      	adds	r0, #1
 8006224:	d01e      	beq.n	8006264 <_printf_common+0xa4>
 8006226:	6823      	ldr	r3, [r4, #0]
 8006228:	6922      	ldr	r2, [r4, #16]
 800622a:	f003 0306 	and.w	r3, r3, #6
 800622e:	2b04      	cmp	r3, #4
 8006230:	bf02      	ittt	eq
 8006232:	68e5      	ldreq	r5, [r4, #12]
 8006234:	6833      	ldreq	r3, [r6, #0]
 8006236:	1aed      	subeq	r5, r5, r3
 8006238:	68a3      	ldr	r3, [r4, #8]
 800623a:	bf0c      	ite	eq
 800623c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006240:	2500      	movne	r5, #0
 8006242:	4293      	cmp	r3, r2
 8006244:	bfc4      	itt	gt
 8006246:	1a9b      	subgt	r3, r3, r2
 8006248:	18ed      	addgt	r5, r5, r3
 800624a:	2600      	movs	r6, #0
 800624c:	341a      	adds	r4, #26
 800624e:	42b5      	cmp	r5, r6
 8006250:	d11a      	bne.n	8006288 <_printf_common+0xc8>
 8006252:	2000      	movs	r0, #0
 8006254:	e008      	b.n	8006268 <_printf_common+0xa8>
 8006256:	2301      	movs	r3, #1
 8006258:	4652      	mov	r2, sl
 800625a:	4649      	mov	r1, r9
 800625c:	4638      	mov	r0, r7
 800625e:	47c0      	blx	r8
 8006260:	3001      	adds	r0, #1
 8006262:	d103      	bne.n	800626c <_printf_common+0xac>
 8006264:	f04f 30ff 	mov.w	r0, #4294967295
 8006268:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800626c:	3501      	adds	r5, #1
 800626e:	e7c6      	b.n	80061fe <_printf_common+0x3e>
 8006270:	18e1      	adds	r1, r4, r3
 8006272:	1c5a      	adds	r2, r3, #1
 8006274:	2030      	movs	r0, #48	; 0x30
 8006276:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800627a:	4422      	add	r2, r4
 800627c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006280:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006284:	3302      	adds	r3, #2
 8006286:	e7c7      	b.n	8006218 <_printf_common+0x58>
 8006288:	2301      	movs	r3, #1
 800628a:	4622      	mov	r2, r4
 800628c:	4649      	mov	r1, r9
 800628e:	4638      	mov	r0, r7
 8006290:	47c0      	blx	r8
 8006292:	3001      	adds	r0, #1
 8006294:	d0e6      	beq.n	8006264 <_printf_common+0xa4>
 8006296:	3601      	adds	r6, #1
 8006298:	e7d9      	b.n	800624e <_printf_common+0x8e>
	...

0800629c <_printf_i>:
 800629c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80062a0:	7e0f      	ldrb	r7, [r1, #24]
 80062a2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80062a4:	2f78      	cmp	r7, #120	; 0x78
 80062a6:	4691      	mov	r9, r2
 80062a8:	4680      	mov	r8, r0
 80062aa:	460c      	mov	r4, r1
 80062ac:	469a      	mov	sl, r3
 80062ae:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80062b2:	d807      	bhi.n	80062c4 <_printf_i+0x28>
 80062b4:	2f62      	cmp	r7, #98	; 0x62
 80062b6:	d80a      	bhi.n	80062ce <_printf_i+0x32>
 80062b8:	2f00      	cmp	r7, #0
 80062ba:	f000 80d4 	beq.w	8006466 <_printf_i+0x1ca>
 80062be:	2f58      	cmp	r7, #88	; 0x58
 80062c0:	f000 80c0 	beq.w	8006444 <_printf_i+0x1a8>
 80062c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80062c8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80062cc:	e03a      	b.n	8006344 <_printf_i+0xa8>
 80062ce:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80062d2:	2b15      	cmp	r3, #21
 80062d4:	d8f6      	bhi.n	80062c4 <_printf_i+0x28>
 80062d6:	a101      	add	r1, pc, #4	; (adr r1, 80062dc <_printf_i+0x40>)
 80062d8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80062dc:	08006335 	.word	0x08006335
 80062e0:	08006349 	.word	0x08006349
 80062e4:	080062c5 	.word	0x080062c5
 80062e8:	080062c5 	.word	0x080062c5
 80062ec:	080062c5 	.word	0x080062c5
 80062f0:	080062c5 	.word	0x080062c5
 80062f4:	08006349 	.word	0x08006349
 80062f8:	080062c5 	.word	0x080062c5
 80062fc:	080062c5 	.word	0x080062c5
 8006300:	080062c5 	.word	0x080062c5
 8006304:	080062c5 	.word	0x080062c5
 8006308:	0800644d 	.word	0x0800644d
 800630c:	08006375 	.word	0x08006375
 8006310:	08006407 	.word	0x08006407
 8006314:	080062c5 	.word	0x080062c5
 8006318:	080062c5 	.word	0x080062c5
 800631c:	0800646f 	.word	0x0800646f
 8006320:	080062c5 	.word	0x080062c5
 8006324:	08006375 	.word	0x08006375
 8006328:	080062c5 	.word	0x080062c5
 800632c:	080062c5 	.word	0x080062c5
 8006330:	0800640f 	.word	0x0800640f
 8006334:	682b      	ldr	r3, [r5, #0]
 8006336:	1d1a      	adds	r2, r3, #4
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	602a      	str	r2, [r5, #0]
 800633c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006340:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006344:	2301      	movs	r3, #1
 8006346:	e09f      	b.n	8006488 <_printf_i+0x1ec>
 8006348:	6820      	ldr	r0, [r4, #0]
 800634a:	682b      	ldr	r3, [r5, #0]
 800634c:	0607      	lsls	r7, r0, #24
 800634e:	f103 0104 	add.w	r1, r3, #4
 8006352:	6029      	str	r1, [r5, #0]
 8006354:	d501      	bpl.n	800635a <_printf_i+0xbe>
 8006356:	681e      	ldr	r6, [r3, #0]
 8006358:	e003      	b.n	8006362 <_printf_i+0xc6>
 800635a:	0646      	lsls	r6, r0, #25
 800635c:	d5fb      	bpl.n	8006356 <_printf_i+0xba>
 800635e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006362:	2e00      	cmp	r6, #0
 8006364:	da03      	bge.n	800636e <_printf_i+0xd2>
 8006366:	232d      	movs	r3, #45	; 0x2d
 8006368:	4276      	negs	r6, r6
 800636a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800636e:	485a      	ldr	r0, [pc, #360]	; (80064d8 <_printf_i+0x23c>)
 8006370:	230a      	movs	r3, #10
 8006372:	e012      	b.n	800639a <_printf_i+0xfe>
 8006374:	682b      	ldr	r3, [r5, #0]
 8006376:	6820      	ldr	r0, [r4, #0]
 8006378:	1d19      	adds	r1, r3, #4
 800637a:	6029      	str	r1, [r5, #0]
 800637c:	0605      	lsls	r5, r0, #24
 800637e:	d501      	bpl.n	8006384 <_printf_i+0xe8>
 8006380:	681e      	ldr	r6, [r3, #0]
 8006382:	e002      	b.n	800638a <_printf_i+0xee>
 8006384:	0641      	lsls	r1, r0, #25
 8006386:	d5fb      	bpl.n	8006380 <_printf_i+0xe4>
 8006388:	881e      	ldrh	r6, [r3, #0]
 800638a:	4853      	ldr	r0, [pc, #332]	; (80064d8 <_printf_i+0x23c>)
 800638c:	2f6f      	cmp	r7, #111	; 0x6f
 800638e:	bf0c      	ite	eq
 8006390:	2308      	moveq	r3, #8
 8006392:	230a      	movne	r3, #10
 8006394:	2100      	movs	r1, #0
 8006396:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800639a:	6865      	ldr	r5, [r4, #4]
 800639c:	60a5      	str	r5, [r4, #8]
 800639e:	2d00      	cmp	r5, #0
 80063a0:	bfa2      	ittt	ge
 80063a2:	6821      	ldrge	r1, [r4, #0]
 80063a4:	f021 0104 	bicge.w	r1, r1, #4
 80063a8:	6021      	strge	r1, [r4, #0]
 80063aa:	b90e      	cbnz	r6, 80063b0 <_printf_i+0x114>
 80063ac:	2d00      	cmp	r5, #0
 80063ae:	d04b      	beq.n	8006448 <_printf_i+0x1ac>
 80063b0:	4615      	mov	r5, r2
 80063b2:	fbb6 f1f3 	udiv	r1, r6, r3
 80063b6:	fb03 6711 	mls	r7, r3, r1, r6
 80063ba:	5dc7      	ldrb	r7, [r0, r7]
 80063bc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80063c0:	4637      	mov	r7, r6
 80063c2:	42bb      	cmp	r3, r7
 80063c4:	460e      	mov	r6, r1
 80063c6:	d9f4      	bls.n	80063b2 <_printf_i+0x116>
 80063c8:	2b08      	cmp	r3, #8
 80063ca:	d10b      	bne.n	80063e4 <_printf_i+0x148>
 80063cc:	6823      	ldr	r3, [r4, #0]
 80063ce:	07de      	lsls	r6, r3, #31
 80063d0:	d508      	bpl.n	80063e4 <_printf_i+0x148>
 80063d2:	6923      	ldr	r3, [r4, #16]
 80063d4:	6861      	ldr	r1, [r4, #4]
 80063d6:	4299      	cmp	r1, r3
 80063d8:	bfde      	ittt	le
 80063da:	2330      	movle	r3, #48	; 0x30
 80063dc:	f805 3c01 	strble.w	r3, [r5, #-1]
 80063e0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80063e4:	1b52      	subs	r2, r2, r5
 80063e6:	6122      	str	r2, [r4, #16]
 80063e8:	f8cd a000 	str.w	sl, [sp]
 80063ec:	464b      	mov	r3, r9
 80063ee:	aa03      	add	r2, sp, #12
 80063f0:	4621      	mov	r1, r4
 80063f2:	4640      	mov	r0, r8
 80063f4:	f7ff fee4 	bl	80061c0 <_printf_common>
 80063f8:	3001      	adds	r0, #1
 80063fa:	d14a      	bne.n	8006492 <_printf_i+0x1f6>
 80063fc:	f04f 30ff 	mov.w	r0, #4294967295
 8006400:	b004      	add	sp, #16
 8006402:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006406:	6823      	ldr	r3, [r4, #0]
 8006408:	f043 0320 	orr.w	r3, r3, #32
 800640c:	6023      	str	r3, [r4, #0]
 800640e:	4833      	ldr	r0, [pc, #204]	; (80064dc <_printf_i+0x240>)
 8006410:	2778      	movs	r7, #120	; 0x78
 8006412:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006416:	6823      	ldr	r3, [r4, #0]
 8006418:	6829      	ldr	r1, [r5, #0]
 800641a:	061f      	lsls	r7, r3, #24
 800641c:	f851 6b04 	ldr.w	r6, [r1], #4
 8006420:	d402      	bmi.n	8006428 <_printf_i+0x18c>
 8006422:	065f      	lsls	r7, r3, #25
 8006424:	bf48      	it	mi
 8006426:	b2b6      	uxthmi	r6, r6
 8006428:	07df      	lsls	r7, r3, #31
 800642a:	bf48      	it	mi
 800642c:	f043 0320 	orrmi.w	r3, r3, #32
 8006430:	6029      	str	r1, [r5, #0]
 8006432:	bf48      	it	mi
 8006434:	6023      	strmi	r3, [r4, #0]
 8006436:	b91e      	cbnz	r6, 8006440 <_printf_i+0x1a4>
 8006438:	6823      	ldr	r3, [r4, #0]
 800643a:	f023 0320 	bic.w	r3, r3, #32
 800643e:	6023      	str	r3, [r4, #0]
 8006440:	2310      	movs	r3, #16
 8006442:	e7a7      	b.n	8006394 <_printf_i+0xf8>
 8006444:	4824      	ldr	r0, [pc, #144]	; (80064d8 <_printf_i+0x23c>)
 8006446:	e7e4      	b.n	8006412 <_printf_i+0x176>
 8006448:	4615      	mov	r5, r2
 800644a:	e7bd      	b.n	80063c8 <_printf_i+0x12c>
 800644c:	682b      	ldr	r3, [r5, #0]
 800644e:	6826      	ldr	r6, [r4, #0]
 8006450:	6961      	ldr	r1, [r4, #20]
 8006452:	1d18      	adds	r0, r3, #4
 8006454:	6028      	str	r0, [r5, #0]
 8006456:	0635      	lsls	r5, r6, #24
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	d501      	bpl.n	8006460 <_printf_i+0x1c4>
 800645c:	6019      	str	r1, [r3, #0]
 800645e:	e002      	b.n	8006466 <_printf_i+0x1ca>
 8006460:	0670      	lsls	r0, r6, #25
 8006462:	d5fb      	bpl.n	800645c <_printf_i+0x1c0>
 8006464:	8019      	strh	r1, [r3, #0]
 8006466:	2300      	movs	r3, #0
 8006468:	6123      	str	r3, [r4, #16]
 800646a:	4615      	mov	r5, r2
 800646c:	e7bc      	b.n	80063e8 <_printf_i+0x14c>
 800646e:	682b      	ldr	r3, [r5, #0]
 8006470:	1d1a      	adds	r2, r3, #4
 8006472:	602a      	str	r2, [r5, #0]
 8006474:	681d      	ldr	r5, [r3, #0]
 8006476:	6862      	ldr	r2, [r4, #4]
 8006478:	2100      	movs	r1, #0
 800647a:	4628      	mov	r0, r5
 800647c:	f7f9 fea8 	bl	80001d0 <memchr>
 8006480:	b108      	cbz	r0, 8006486 <_printf_i+0x1ea>
 8006482:	1b40      	subs	r0, r0, r5
 8006484:	6060      	str	r0, [r4, #4]
 8006486:	6863      	ldr	r3, [r4, #4]
 8006488:	6123      	str	r3, [r4, #16]
 800648a:	2300      	movs	r3, #0
 800648c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006490:	e7aa      	b.n	80063e8 <_printf_i+0x14c>
 8006492:	6923      	ldr	r3, [r4, #16]
 8006494:	462a      	mov	r2, r5
 8006496:	4649      	mov	r1, r9
 8006498:	4640      	mov	r0, r8
 800649a:	47d0      	blx	sl
 800649c:	3001      	adds	r0, #1
 800649e:	d0ad      	beq.n	80063fc <_printf_i+0x160>
 80064a0:	6823      	ldr	r3, [r4, #0]
 80064a2:	079b      	lsls	r3, r3, #30
 80064a4:	d413      	bmi.n	80064ce <_printf_i+0x232>
 80064a6:	68e0      	ldr	r0, [r4, #12]
 80064a8:	9b03      	ldr	r3, [sp, #12]
 80064aa:	4298      	cmp	r0, r3
 80064ac:	bfb8      	it	lt
 80064ae:	4618      	movlt	r0, r3
 80064b0:	e7a6      	b.n	8006400 <_printf_i+0x164>
 80064b2:	2301      	movs	r3, #1
 80064b4:	4632      	mov	r2, r6
 80064b6:	4649      	mov	r1, r9
 80064b8:	4640      	mov	r0, r8
 80064ba:	47d0      	blx	sl
 80064bc:	3001      	adds	r0, #1
 80064be:	d09d      	beq.n	80063fc <_printf_i+0x160>
 80064c0:	3501      	adds	r5, #1
 80064c2:	68e3      	ldr	r3, [r4, #12]
 80064c4:	9903      	ldr	r1, [sp, #12]
 80064c6:	1a5b      	subs	r3, r3, r1
 80064c8:	42ab      	cmp	r3, r5
 80064ca:	dcf2      	bgt.n	80064b2 <_printf_i+0x216>
 80064cc:	e7eb      	b.n	80064a6 <_printf_i+0x20a>
 80064ce:	2500      	movs	r5, #0
 80064d0:	f104 0619 	add.w	r6, r4, #25
 80064d4:	e7f5      	b.n	80064c2 <_printf_i+0x226>
 80064d6:	bf00      	nop
 80064d8:	080067fd 	.word	0x080067fd
 80064dc:	0800680e 	.word	0x0800680e

080064e0 <__sflush_r>:
 80064e0:	898a      	ldrh	r2, [r1, #12]
 80064e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80064e6:	4605      	mov	r5, r0
 80064e8:	0710      	lsls	r0, r2, #28
 80064ea:	460c      	mov	r4, r1
 80064ec:	d458      	bmi.n	80065a0 <__sflush_r+0xc0>
 80064ee:	684b      	ldr	r3, [r1, #4]
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	dc05      	bgt.n	8006500 <__sflush_r+0x20>
 80064f4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	dc02      	bgt.n	8006500 <__sflush_r+0x20>
 80064fa:	2000      	movs	r0, #0
 80064fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006500:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006502:	2e00      	cmp	r6, #0
 8006504:	d0f9      	beq.n	80064fa <__sflush_r+0x1a>
 8006506:	2300      	movs	r3, #0
 8006508:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800650c:	682f      	ldr	r7, [r5, #0]
 800650e:	6a21      	ldr	r1, [r4, #32]
 8006510:	602b      	str	r3, [r5, #0]
 8006512:	d032      	beq.n	800657a <__sflush_r+0x9a>
 8006514:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006516:	89a3      	ldrh	r3, [r4, #12]
 8006518:	075a      	lsls	r2, r3, #29
 800651a:	d505      	bpl.n	8006528 <__sflush_r+0x48>
 800651c:	6863      	ldr	r3, [r4, #4]
 800651e:	1ac0      	subs	r0, r0, r3
 8006520:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006522:	b10b      	cbz	r3, 8006528 <__sflush_r+0x48>
 8006524:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006526:	1ac0      	subs	r0, r0, r3
 8006528:	2300      	movs	r3, #0
 800652a:	4602      	mov	r2, r0
 800652c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800652e:	6a21      	ldr	r1, [r4, #32]
 8006530:	4628      	mov	r0, r5
 8006532:	47b0      	blx	r6
 8006534:	1c43      	adds	r3, r0, #1
 8006536:	89a3      	ldrh	r3, [r4, #12]
 8006538:	d106      	bne.n	8006548 <__sflush_r+0x68>
 800653a:	6829      	ldr	r1, [r5, #0]
 800653c:	291d      	cmp	r1, #29
 800653e:	d82b      	bhi.n	8006598 <__sflush_r+0xb8>
 8006540:	4a29      	ldr	r2, [pc, #164]	; (80065e8 <__sflush_r+0x108>)
 8006542:	410a      	asrs	r2, r1
 8006544:	07d6      	lsls	r6, r2, #31
 8006546:	d427      	bmi.n	8006598 <__sflush_r+0xb8>
 8006548:	2200      	movs	r2, #0
 800654a:	6062      	str	r2, [r4, #4]
 800654c:	04d9      	lsls	r1, r3, #19
 800654e:	6922      	ldr	r2, [r4, #16]
 8006550:	6022      	str	r2, [r4, #0]
 8006552:	d504      	bpl.n	800655e <__sflush_r+0x7e>
 8006554:	1c42      	adds	r2, r0, #1
 8006556:	d101      	bne.n	800655c <__sflush_r+0x7c>
 8006558:	682b      	ldr	r3, [r5, #0]
 800655a:	b903      	cbnz	r3, 800655e <__sflush_r+0x7e>
 800655c:	6560      	str	r0, [r4, #84]	; 0x54
 800655e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006560:	602f      	str	r7, [r5, #0]
 8006562:	2900      	cmp	r1, #0
 8006564:	d0c9      	beq.n	80064fa <__sflush_r+0x1a>
 8006566:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800656a:	4299      	cmp	r1, r3
 800656c:	d002      	beq.n	8006574 <__sflush_r+0x94>
 800656e:	4628      	mov	r0, r5
 8006570:	f7ff fbea 	bl	8005d48 <_free_r>
 8006574:	2000      	movs	r0, #0
 8006576:	6360      	str	r0, [r4, #52]	; 0x34
 8006578:	e7c0      	b.n	80064fc <__sflush_r+0x1c>
 800657a:	2301      	movs	r3, #1
 800657c:	4628      	mov	r0, r5
 800657e:	47b0      	blx	r6
 8006580:	1c41      	adds	r1, r0, #1
 8006582:	d1c8      	bne.n	8006516 <__sflush_r+0x36>
 8006584:	682b      	ldr	r3, [r5, #0]
 8006586:	2b00      	cmp	r3, #0
 8006588:	d0c5      	beq.n	8006516 <__sflush_r+0x36>
 800658a:	2b1d      	cmp	r3, #29
 800658c:	d001      	beq.n	8006592 <__sflush_r+0xb2>
 800658e:	2b16      	cmp	r3, #22
 8006590:	d101      	bne.n	8006596 <__sflush_r+0xb6>
 8006592:	602f      	str	r7, [r5, #0]
 8006594:	e7b1      	b.n	80064fa <__sflush_r+0x1a>
 8006596:	89a3      	ldrh	r3, [r4, #12]
 8006598:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800659c:	81a3      	strh	r3, [r4, #12]
 800659e:	e7ad      	b.n	80064fc <__sflush_r+0x1c>
 80065a0:	690f      	ldr	r7, [r1, #16]
 80065a2:	2f00      	cmp	r7, #0
 80065a4:	d0a9      	beq.n	80064fa <__sflush_r+0x1a>
 80065a6:	0793      	lsls	r3, r2, #30
 80065a8:	680e      	ldr	r6, [r1, #0]
 80065aa:	bf08      	it	eq
 80065ac:	694b      	ldreq	r3, [r1, #20]
 80065ae:	600f      	str	r7, [r1, #0]
 80065b0:	bf18      	it	ne
 80065b2:	2300      	movne	r3, #0
 80065b4:	eba6 0807 	sub.w	r8, r6, r7
 80065b8:	608b      	str	r3, [r1, #8]
 80065ba:	f1b8 0f00 	cmp.w	r8, #0
 80065be:	dd9c      	ble.n	80064fa <__sflush_r+0x1a>
 80065c0:	6a21      	ldr	r1, [r4, #32]
 80065c2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80065c4:	4643      	mov	r3, r8
 80065c6:	463a      	mov	r2, r7
 80065c8:	4628      	mov	r0, r5
 80065ca:	47b0      	blx	r6
 80065cc:	2800      	cmp	r0, #0
 80065ce:	dc06      	bgt.n	80065de <__sflush_r+0xfe>
 80065d0:	89a3      	ldrh	r3, [r4, #12]
 80065d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80065d6:	81a3      	strh	r3, [r4, #12]
 80065d8:	f04f 30ff 	mov.w	r0, #4294967295
 80065dc:	e78e      	b.n	80064fc <__sflush_r+0x1c>
 80065de:	4407      	add	r7, r0
 80065e0:	eba8 0800 	sub.w	r8, r8, r0
 80065e4:	e7e9      	b.n	80065ba <__sflush_r+0xda>
 80065e6:	bf00      	nop
 80065e8:	dfbffffe 	.word	0xdfbffffe

080065ec <_fflush_r>:
 80065ec:	b538      	push	{r3, r4, r5, lr}
 80065ee:	690b      	ldr	r3, [r1, #16]
 80065f0:	4605      	mov	r5, r0
 80065f2:	460c      	mov	r4, r1
 80065f4:	b913      	cbnz	r3, 80065fc <_fflush_r+0x10>
 80065f6:	2500      	movs	r5, #0
 80065f8:	4628      	mov	r0, r5
 80065fa:	bd38      	pop	{r3, r4, r5, pc}
 80065fc:	b118      	cbz	r0, 8006606 <_fflush_r+0x1a>
 80065fe:	6a03      	ldr	r3, [r0, #32]
 8006600:	b90b      	cbnz	r3, 8006606 <_fflush_r+0x1a>
 8006602:	f7ff f99b 	bl	800593c <__sinit>
 8006606:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800660a:	2b00      	cmp	r3, #0
 800660c:	d0f3      	beq.n	80065f6 <_fflush_r+0xa>
 800660e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006610:	07d0      	lsls	r0, r2, #31
 8006612:	d404      	bmi.n	800661e <_fflush_r+0x32>
 8006614:	0599      	lsls	r1, r3, #22
 8006616:	d402      	bmi.n	800661e <_fflush_r+0x32>
 8006618:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800661a:	f7ff fb84 	bl	8005d26 <__retarget_lock_acquire_recursive>
 800661e:	4628      	mov	r0, r5
 8006620:	4621      	mov	r1, r4
 8006622:	f7ff ff5d 	bl	80064e0 <__sflush_r>
 8006626:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006628:	07da      	lsls	r2, r3, #31
 800662a:	4605      	mov	r5, r0
 800662c:	d4e4      	bmi.n	80065f8 <_fflush_r+0xc>
 800662e:	89a3      	ldrh	r3, [r4, #12]
 8006630:	059b      	lsls	r3, r3, #22
 8006632:	d4e1      	bmi.n	80065f8 <_fflush_r+0xc>
 8006634:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006636:	f7ff fb77 	bl	8005d28 <__retarget_lock_release_recursive>
 800663a:	e7dd      	b.n	80065f8 <_fflush_r+0xc>

0800663c <__swhatbuf_r>:
 800663c:	b570      	push	{r4, r5, r6, lr}
 800663e:	460c      	mov	r4, r1
 8006640:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006644:	2900      	cmp	r1, #0
 8006646:	b096      	sub	sp, #88	; 0x58
 8006648:	4615      	mov	r5, r2
 800664a:	461e      	mov	r6, r3
 800664c:	da0d      	bge.n	800666a <__swhatbuf_r+0x2e>
 800664e:	89a3      	ldrh	r3, [r4, #12]
 8006650:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006654:	f04f 0100 	mov.w	r1, #0
 8006658:	bf0c      	ite	eq
 800665a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800665e:	2340      	movne	r3, #64	; 0x40
 8006660:	2000      	movs	r0, #0
 8006662:	6031      	str	r1, [r6, #0]
 8006664:	602b      	str	r3, [r5, #0]
 8006666:	b016      	add	sp, #88	; 0x58
 8006668:	bd70      	pop	{r4, r5, r6, pc}
 800666a:	466a      	mov	r2, sp
 800666c:	f000 f848 	bl	8006700 <_fstat_r>
 8006670:	2800      	cmp	r0, #0
 8006672:	dbec      	blt.n	800664e <__swhatbuf_r+0x12>
 8006674:	9901      	ldr	r1, [sp, #4]
 8006676:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800667a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800667e:	4259      	negs	r1, r3
 8006680:	4159      	adcs	r1, r3
 8006682:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006686:	e7eb      	b.n	8006660 <__swhatbuf_r+0x24>

08006688 <__smakebuf_r>:
 8006688:	898b      	ldrh	r3, [r1, #12]
 800668a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800668c:	079d      	lsls	r5, r3, #30
 800668e:	4606      	mov	r6, r0
 8006690:	460c      	mov	r4, r1
 8006692:	d507      	bpl.n	80066a4 <__smakebuf_r+0x1c>
 8006694:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006698:	6023      	str	r3, [r4, #0]
 800669a:	6123      	str	r3, [r4, #16]
 800669c:	2301      	movs	r3, #1
 800669e:	6163      	str	r3, [r4, #20]
 80066a0:	b002      	add	sp, #8
 80066a2:	bd70      	pop	{r4, r5, r6, pc}
 80066a4:	ab01      	add	r3, sp, #4
 80066a6:	466a      	mov	r2, sp
 80066a8:	f7ff ffc8 	bl	800663c <__swhatbuf_r>
 80066ac:	9900      	ldr	r1, [sp, #0]
 80066ae:	4605      	mov	r5, r0
 80066b0:	4630      	mov	r0, r6
 80066b2:	f7ff fbb5 	bl	8005e20 <_malloc_r>
 80066b6:	b948      	cbnz	r0, 80066cc <__smakebuf_r+0x44>
 80066b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80066bc:	059a      	lsls	r2, r3, #22
 80066be:	d4ef      	bmi.n	80066a0 <__smakebuf_r+0x18>
 80066c0:	f023 0303 	bic.w	r3, r3, #3
 80066c4:	f043 0302 	orr.w	r3, r3, #2
 80066c8:	81a3      	strh	r3, [r4, #12]
 80066ca:	e7e3      	b.n	8006694 <__smakebuf_r+0xc>
 80066cc:	89a3      	ldrh	r3, [r4, #12]
 80066ce:	6020      	str	r0, [r4, #0]
 80066d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066d4:	81a3      	strh	r3, [r4, #12]
 80066d6:	9b00      	ldr	r3, [sp, #0]
 80066d8:	6163      	str	r3, [r4, #20]
 80066da:	9b01      	ldr	r3, [sp, #4]
 80066dc:	6120      	str	r0, [r4, #16]
 80066de:	b15b      	cbz	r3, 80066f8 <__smakebuf_r+0x70>
 80066e0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80066e4:	4630      	mov	r0, r6
 80066e6:	f000 f81d 	bl	8006724 <_isatty_r>
 80066ea:	b128      	cbz	r0, 80066f8 <__smakebuf_r+0x70>
 80066ec:	89a3      	ldrh	r3, [r4, #12]
 80066ee:	f023 0303 	bic.w	r3, r3, #3
 80066f2:	f043 0301 	orr.w	r3, r3, #1
 80066f6:	81a3      	strh	r3, [r4, #12]
 80066f8:	89a3      	ldrh	r3, [r4, #12]
 80066fa:	431d      	orrs	r5, r3
 80066fc:	81a5      	strh	r5, [r4, #12]
 80066fe:	e7cf      	b.n	80066a0 <__smakebuf_r+0x18>

08006700 <_fstat_r>:
 8006700:	b538      	push	{r3, r4, r5, lr}
 8006702:	4d07      	ldr	r5, [pc, #28]	; (8006720 <_fstat_r+0x20>)
 8006704:	2300      	movs	r3, #0
 8006706:	4604      	mov	r4, r0
 8006708:	4608      	mov	r0, r1
 800670a:	4611      	mov	r1, r2
 800670c:	602b      	str	r3, [r5, #0]
 800670e:	f7fa fb3c 	bl	8000d8a <_fstat>
 8006712:	1c43      	adds	r3, r0, #1
 8006714:	d102      	bne.n	800671c <_fstat_r+0x1c>
 8006716:	682b      	ldr	r3, [r5, #0]
 8006718:	b103      	cbz	r3, 800671c <_fstat_r+0x1c>
 800671a:	6023      	str	r3, [r4, #0]
 800671c:	bd38      	pop	{r3, r4, r5, pc}
 800671e:	bf00      	nop
 8006720:	20000270 	.word	0x20000270

08006724 <_isatty_r>:
 8006724:	b538      	push	{r3, r4, r5, lr}
 8006726:	4d06      	ldr	r5, [pc, #24]	; (8006740 <_isatty_r+0x1c>)
 8006728:	2300      	movs	r3, #0
 800672a:	4604      	mov	r4, r0
 800672c:	4608      	mov	r0, r1
 800672e:	602b      	str	r3, [r5, #0]
 8006730:	f7fa fb3b 	bl	8000daa <_isatty>
 8006734:	1c43      	adds	r3, r0, #1
 8006736:	d102      	bne.n	800673e <_isatty_r+0x1a>
 8006738:	682b      	ldr	r3, [r5, #0]
 800673a:	b103      	cbz	r3, 800673e <_isatty_r+0x1a>
 800673c:	6023      	str	r3, [r4, #0]
 800673e:	bd38      	pop	{r3, r4, r5, pc}
 8006740:	20000270 	.word	0x20000270

08006744 <_sbrk_r>:
 8006744:	b538      	push	{r3, r4, r5, lr}
 8006746:	4d06      	ldr	r5, [pc, #24]	; (8006760 <_sbrk_r+0x1c>)
 8006748:	2300      	movs	r3, #0
 800674a:	4604      	mov	r4, r0
 800674c:	4608      	mov	r0, r1
 800674e:	602b      	str	r3, [r5, #0]
 8006750:	f7fa fb44 	bl	8000ddc <_sbrk>
 8006754:	1c43      	adds	r3, r0, #1
 8006756:	d102      	bne.n	800675e <_sbrk_r+0x1a>
 8006758:	682b      	ldr	r3, [r5, #0]
 800675a:	b103      	cbz	r3, 800675e <_sbrk_r+0x1a>
 800675c:	6023      	str	r3, [r4, #0]
 800675e:	bd38      	pop	{r3, r4, r5, pc}
 8006760:	20000270 	.word	0x20000270

08006764 <_init>:
 8006764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006766:	bf00      	nop
 8006768:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800676a:	bc08      	pop	{r3}
 800676c:	469e      	mov	lr, r3
 800676e:	4770      	bx	lr

08006770 <_fini>:
 8006770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006772:	bf00      	nop
 8006774:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006776:	bc08      	pop	{r3}
 8006778:	469e      	mov	lr, r3
 800677a:	4770      	bx	lr
