
20. RTC_Alarm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001c28  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08001db0  08001db0  00011db0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001dc0  08001dc0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08001dc0  08001dc0  00011dc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001dc8  08001dc8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001dc8  08001dc8  00011dc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001dcc  08001dcc  00011dcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001dd0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          00000040  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000004c  2000004c  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 14 .debug_info   00005ce1  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000013ef  00000000  00000000  00025d60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000620  00000000  00000000  00027150  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000487  00000000  00000000  00027770  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001fa00  00000000  00000000  00027bf7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00007438  00000000  00000000  000475f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c2328  00000000  00000000  0004ea2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000017ac  00000000  00000000  00110d58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000061  00000000  00000000  00112504  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08001d98 	.word	0x08001d98

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08001d98 	.word	0x08001d98

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b970 	b.w	80004c0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	460f      	mov	r7, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4694      	mov	ip, r2
 800020c:	d965      	bls.n	80002da <__udivmoddi4+0xe2>
 800020e:	fab2 f382 	clz	r3, r2
 8000212:	b143      	cbz	r3, 8000226 <__udivmoddi4+0x2e>
 8000214:	fa02 fc03 	lsl.w	ip, r2, r3
 8000218:	f1c3 0220 	rsb	r2, r3, #32
 800021c:	409f      	lsls	r7, r3
 800021e:	fa20 f202 	lsr.w	r2, r0, r2
 8000222:	4317      	orrs	r7, r2
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022a:	fa1f f58c 	uxth.w	r5, ip
 800022e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000232:	0c22      	lsrs	r2, r4, #16
 8000234:	fb0e 7711 	mls	r7, lr, r1, r7
 8000238:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800023c:	fb01 f005 	mul.w	r0, r1, r5
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x62>
 8000244:	eb1c 0202 	adds.w	r2, ip, r2
 8000248:	f101 37ff 	add.w	r7, r1, #4294967295
 800024c:	f080 811c 	bcs.w	8000488 <__udivmoddi4+0x290>
 8000250:	4290      	cmp	r0, r2
 8000252:	f240 8119 	bls.w	8000488 <__udivmoddi4+0x290>
 8000256:	3902      	subs	r1, #2
 8000258:	4462      	add	r2, ip
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	b2a4      	uxth	r4, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026a:	fb00 f505 	mul.w	r5, r0, r5
 800026e:	42a5      	cmp	r5, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x90>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 32ff 	add.w	r2, r0, #4294967295
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x294>
 800027e:	42a5      	cmp	r5, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x294>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028c:	1b64      	subs	r4, r4, r5
 800028e:	2100      	movs	r1, #0
 8000290:	b11e      	cbz	r6, 800029a <__udivmoddi4+0xa2>
 8000292:	40dc      	lsrs	r4, r3
 8000294:	2300      	movs	r3, #0
 8000296:	e9c6 4300 	strd	r4, r3, [r6]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d908      	bls.n	80002b4 <__udivmoddi4+0xbc>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80ed 	beq.w	8000482 <__udivmoddi4+0x28a>
 80002a8:	2100      	movs	r1, #0
 80002aa:	e9c6 0500 	strd	r0, r5, [r6]
 80002ae:	4608      	mov	r0, r1
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	fab3 f183 	clz	r1, r3
 80002b8:	2900      	cmp	r1, #0
 80002ba:	d149      	bne.n	8000350 <__udivmoddi4+0x158>
 80002bc:	42ab      	cmp	r3, r5
 80002be:	d302      	bcc.n	80002c6 <__udivmoddi4+0xce>
 80002c0:	4282      	cmp	r2, r0
 80002c2:	f200 80f8 	bhi.w	80004b6 <__udivmoddi4+0x2be>
 80002c6:	1a84      	subs	r4, r0, r2
 80002c8:	eb65 0203 	sbc.w	r2, r5, r3
 80002cc:	2001      	movs	r0, #1
 80002ce:	4617      	mov	r7, r2
 80002d0:	2e00      	cmp	r6, #0
 80002d2:	d0e2      	beq.n	800029a <__udivmoddi4+0xa2>
 80002d4:	e9c6 4700 	strd	r4, r7, [r6]
 80002d8:	e7df      	b.n	800029a <__udivmoddi4+0xa2>
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xe6>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x210>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ee:	fa1f fe8c 	uxth.w	lr, ip
 80002f2:	2101      	movs	r1, #1
 80002f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80002f8:	fb07 2015 	mls	r0, r7, r5, r2
 80002fc:	0c22      	lsrs	r2, r4, #16
 80002fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000302:	fb0e f005 	mul.w	r0, lr, r5
 8000306:	4290      	cmp	r0, r2
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x124>
 800030a:	eb1c 0202 	adds.w	r2, ip, r2
 800030e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4290      	cmp	r0, r2
 8000316:	f200 80cb 	bhi.w	80004b0 <__udivmoddi4+0x2b8>
 800031a:	4645      	mov	r5, r8
 800031c:	1a12      	subs	r2, r2, r0
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb2 f0f7 	udiv	r0, r2, r7
 8000324:	fb07 2210 	mls	r2, r7, r0, r2
 8000328:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032c:	fb0e fe00 	mul.w	lr, lr, r0
 8000330:	45a6      	cmp	lr, r4
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x14e>
 8000334:	eb1c 0404 	adds.w	r4, ip, r4
 8000338:	f100 32ff 	add.w	r2, r0, #4294967295
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x14c>
 800033e:	45a6      	cmp	lr, r4
 8000340:	f200 80bb 	bhi.w	80004ba <__udivmoddi4+0x2c2>
 8000344:	4610      	mov	r0, r2
 8000346:	eba4 040e 	sub.w	r4, r4, lr
 800034a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800034e:	e79f      	b.n	8000290 <__udivmoddi4+0x98>
 8000350:	f1c1 0720 	rsb	r7, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 fc07 	lsr.w	ip, r2, r7
 800035a:	ea4c 0c03 	orr.w	ip, ip, r3
 800035e:	fa05 f401 	lsl.w	r4, r5, r1
 8000362:	fa20 f307 	lsr.w	r3, r0, r7
 8000366:	40fd      	lsrs	r5, r7
 8000368:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000372:	fa1f fe8c 	uxth.w	lr, ip
 8000376:	fb09 5518 	mls	r5, r9, r8, r5
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000380:	fb08 f50e 	mul.w	r5, r8, lr
 8000384:	42a5      	cmp	r5, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	fa00 f001 	lsl.w	r0, r0, r1
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1c 0404 	adds.w	r4, ip, r4
 8000394:	f108 3aff 	add.w	sl, r8, #4294967295
 8000398:	f080 8088 	bcs.w	80004ac <__udivmoddi4+0x2b4>
 800039c:	42a5      	cmp	r5, r4
 800039e:	f240 8085 	bls.w	80004ac <__udivmoddi4+0x2b4>
 80003a2:	f1a8 0802 	sub.w	r8, r8, #2
 80003a6:	4464      	add	r4, ip
 80003a8:	1b64      	subs	r4, r4, r5
 80003aa:	b29d      	uxth	r5, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003bc:	45a6      	cmp	lr, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1c 0404 	adds.w	r4, ip, r4
 80003c4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003c8:	d26c      	bcs.n	80004a4 <__udivmoddi4+0x2ac>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	d96a      	bls.n	80004a4 <__udivmoddi4+0x2ac>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	4464      	add	r4, ip
 80003d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003d6:	fba3 9502 	umull	r9, r5, r3, r2
 80003da:	eba4 040e 	sub.w	r4, r4, lr
 80003de:	42ac      	cmp	r4, r5
 80003e0:	46c8      	mov	r8, r9
 80003e2:	46ae      	mov	lr, r5
 80003e4:	d356      	bcc.n	8000494 <__udivmoddi4+0x29c>
 80003e6:	d053      	beq.n	8000490 <__udivmoddi4+0x298>
 80003e8:	b156      	cbz	r6, 8000400 <__udivmoddi4+0x208>
 80003ea:	ebb0 0208 	subs.w	r2, r0, r8
 80003ee:	eb64 040e 	sbc.w	r4, r4, lr
 80003f2:	fa04 f707 	lsl.w	r7, r4, r7
 80003f6:	40ca      	lsrs	r2, r1
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	4317      	orrs	r7, r2
 80003fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000400:	4618      	mov	r0, r3
 8000402:	2100      	movs	r1, #0
 8000404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000408:	f1c3 0120 	rsb	r1, r3, #32
 800040c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000410:	fa20 f201 	lsr.w	r2, r0, r1
 8000414:	fa25 f101 	lsr.w	r1, r5, r1
 8000418:	409d      	lsls	r5, r3
 800041a:	432a      	orrs	r2, r5
 800041c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000420:	fa1f fe8c 	uxth.w	lr, ip
 8000424:	fbb1 f0f7 	udiv	r0, r1, r7
 8000428:	fb07 1510 	mls	r5, r7, r0, r1
 800042c:	0c11      	lsrs	r1, r2, #16
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	fb00 f50e 	mul.w	r5, r0, lr
 8000436:	428d      	cmp	r5, r1
 8000438:	fa04 f403 	lsl.w	r4, r4, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x258>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f100 38ff 	add.w	r8, r0, #4294967295
 8000446:	d22f      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 8000448:	428d      	cmp	r5, r1
 800044a:	d92d      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800044c:	3802      	subs	r0, #2
 800044e:	4461      	add	r1, ip
 8000450:	1b49      	subs	r1, r1, r5
 8000452:	b292      	uxth	r2, r2
 8000454:	fbb1 f5f7 	udiv	r5, r1, r7
 8000458:	fb07 1115 	mls	r1, r7, r5, r1
 800045c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000460:	fb05 f10e 	mul.w	r1, r5, lr
 8000464:	4291      	cmp	r1, r2
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x282>
 8000468:	eb1c 0202 	adds.w	r2, ip, r2
 800046c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000470:	d216      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 8000472:	4291      	cmp	r1, r2
 8000474:	d914      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000476:	3d02      	subs	r5, #2
 8000478:	4462      	add	r2, ip
 800047a:	1a52      	subs	r2, r2, r1
 800047c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000480:	e738      	b.n	80002f4 <__udivmoddi4+0xfc>
 8000482:	4631      	mov	r1, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e708      	b.n	800029a <__udivmoddi4+0xa2>
 8000488:	4639      	mov	r1, r7
 800048a:	e6e6      	b.n	800025a <__udivmoddi4+0x62>
 800048c:	4610      	mov	r0, r2
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x90>
 8000490:	4548      	cmp	r0, r9
 8000492:	d2a9      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000494:	ebb9 0802 	subs.w	r8, r9, r2
 8000498:	eb65 0e0c 	sbc.w	lr, r5, ip
 800049c:	3b01      	subs	r3, #1
 800049e:	e7a3      	b.n	80003e8 <__udivmoddi4+0x1f0>
 80004a0:	4645      	mov	r5, r8
 80004a2:	e7ea      	b.n	800047a <__udivmoddi4+0x282>
 80004a4:	462b      	mov	r3, r5
 80004a6:	e794      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a8:	4640      	mov	r0, r8
 80004aa:	e7d1      	b.n	8000450 <__udivmoddi4+0x258>
 80004ac:	46d0      	mov	r8, sl
 80004ae:	e77b      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004b0:	3d02      	subs	r5, #2
 80004b2:	4462      	add	r2, ip
 80004b4:	e732      	b.n	800031c <__udivmoddi4+0x124>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e70a      	b.n	80002d0 <__udivmoddi4+0xd8>
 80004ba:	4464      	add	r4, ip
 80004bc:	3802      	subs	r0, #2
 80004be:	e742      	b.n	8000346 <__udivmoddi4+0x14e>

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <HAL_RTC_AlarmAEventCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 80004c4:	b480      	push	{r7}
 80004c6:	b083      	sub	sp, #12
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	6078      	str	r0, [r7, #4]
  __NOP();
 80004cc:	bf00      	nop
}
 80004ce:	bf00      	nop
 80004d0:	370c      	adds	r7, #12
 80004d2:	46bd      	mov	sp, r7
 80004d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d8:	4770      	bx	lr

080004da <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004da:	b580      	push	{r7, lr}
 80004dc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004de:	f000 f9dd 	bl	800089c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e2:	f000 f805 	bl	80004f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e6:	f000 f8ef 	bl	80006c8 <MX_GPIO_Init>
  MX_RTC_Init();
 80004ea:	f000 f861 	bl	80005b0 <MX_RTC_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004ee:	e7fe      	b.n	80004ee <main+0x14>

080004f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b094      	sub	sp, #80	; 0x50
 80004f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004f6:	f107 0320 	add.w	r3, r7, #32
 80004fa:	2230      	movs	r2, #48	; 0x30
 80004fc:	2100      	movs	r1, #0
 80004fe:	4618      	mov	r0, r3
 8000500:	f001 fc1d 	bl	8001d3e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000504:	f107 030c 	add.w	r3, r7, #12
 8000508:	2200      	movs	r2, #0
 800050a:	601a      	str	r2, [r3, #0]
 800050c:	605a      	str	r2, [r3, #4]
 800050e:	609a      	str	r2, [r3, #8]
 8000510:	60da      	str	r2, [r3, #12]
 8000512:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000514:	2300      	movs	r3, #0
 8000516:	60bb      	str	r3, [r7, #8]
 8000518:	4b23      	ldr	r3, [pc, #140]	; (80005a8 <SystemClock_Config+0xb8>)
 800051a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800051c:	4a22      	ldr	r2, [pc, #136]	; (80005a8 <SystemClock_Config+0xb8>)
 800051e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000522:	6413      	str	r3, [r2, #64]	; 0x40
 8000524:	4b20      	ldr	r3, [pc, #128]	; (80005a8 <SystemClock_Config+0xb8>)
 8000526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000528:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800052c:	60bb      	str	r3, [r7, #8]
 800052e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000530:	2300      	movs	r3, #0
 8000532:	607b      	str	r3, [r7, #4]
 8000534:	4b1d      	ldr	r3, [pc, #116]	; (80005ac <SystemClock_Config+0xbc>)
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	4a1c      	ldr	r2, [pc, #112]	; (80005ac <SystemClock_Config+0xbc>)
 800053a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800053e:	6013      	str	r3, [r2, #0]
 8000540:	4b1a      	ldr	r3, [pc, #104]	; (80005ac <SystemClock_Config+0xbc>)
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000548:	607b      	str	r3, [r7, #4]
 800054a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 800054c:	230a      	movs	r3, #10
 800054e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000550:	2301      	movs	r3, #1
 8000552:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000554:	2310      	movs	r3, #16
 8000556:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000558:	2301      	movs	r3, #1
 800055a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800055c:	2300      	movs	r3, #0
 800055e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000560:	f107 0320 	add.w	r3, r7, #32
 8000564:	4618      	mov	r0, r3
 8000566:	f000 fb1d 	bl	8000ba4 <HAL_RCC_OscConfig>
 800056a:	4603      	mov	r3, r0
 800056c:	2b00      	cmp	r3, #0
 800056e:	d001      	beq.n	8000574 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000570:	f000 f8c4 	bl	80006fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000574:	230f      	movs	r3, #15
 8000576:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000578:	2300      	movs	r3, #0
 800057a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800057c:	2300      	movs	r3, #0
 800057e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000580:	2300      	movs	r3, #0
 8000582:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000584:	2300      	movs	r3, #0
 8000586:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000588:	f107 030c 	add.w	r3, r7, #12
 800058c:	2100      	movs	r1, #0
 800058e:	4618      	mov	r0, r3
 8000590:	f000 fd80 	bl	8001094 <HAL_RCC_ClockConfig>
 8000594:	4603      	mov	r3, r0
 8000596:	2b00      	cmp	r3, #0
 8000598:	d001      	beq.n	800059e <SystemClock_Config+0xae>
  {
    Error_Handler();
 800059a:	f000 f8af 	bl	80006fc <Error_Handler>
  }
}
 800059e:	bf00      	nop
 80005a0:	3750      	adds	r7, #80	; 0x50
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bd80      	pop	{r7, pc}
 80005a6:	bf00      	nop
 80005a8:	40023800 	.word	0x40023800
 80005ac:	40007000 	.word	0x40007000

080005b0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b090      	sub	sp, #64	; 0x40
 80005b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80005b6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80005ba:	2200      	movs	r2, #0
 80005bc:	601a      	str	r2, [r3, #0]
 80005be:	605a      	str	r2, [r3, #4]
 80005c0:	609a      	str	r2, [r3, #8]
 80005c2:	60da      	str	r2, [r3, #12]
 80005c4:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80005c6:	2300      	movs	r3, #0
 80005c8:	62bb      	str	r3, [r7, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 80005ca:	463b      	mov	r3, r7
 80005cc:	2228      	movs	r2, #40	; 0x28
 80005ce:	2100      	movs	r1, #0
 80005d0:	4618      	mov	r0, r3
 80005d2:	f001 fbb4 	bl	8001d3e <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80005d6:	4b3a      	ldr	r3, [pc, #232]	; (80006c0 <MX_RTC_Init+0x110>)
 80005d8:	4a3a      	ldr	r2, [pc, #232]	; (80006c4 <MX_RTC_Init+0x114>)
 80005da:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80005dc:	4b38      	ldr	r3, [pc, #224]	; (80006c0 <MX_RTC_Init+0x110>)
 80005de:	2200      	movs	r2, #0
 80005e0:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80005e2:	4b37      	ldr	r3, [pc, #220]	; (80006c0 <MX_RTC_Init+0x110>)
 80005e4:	227f      	movs	r2, #127	; 0x7f
 80005e6:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80005e8:	4b35      	ldr	r3, [pc, #212]	; (80006c0 <MX_RTC_Init+0x110>)
 80005ea:	22ff      	movs	r2, #255	; 0xff
 80005ec:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80005ee:	4b34      	ldr	r3, [pc, #208]	; (80006c0 <MX_RTC_Init+0x110>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80005f4:	4b32      	ldr	r3, [pc, #200]	; (80006c0 <MX_RTC_Init+0x110>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80005fa:	4b31      	ldr	r3, [pc, #196]	; (80006c0 <MX_RTC_Init+0x110>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000600:	482f      	ldr	r0, [pc, #188]	; (80006c0 <MX_RTC_Init+0x110>)
 8000602:	f000 ffd5 	bl	80015b0 <HAL_RTC_Init>
 8000606:	4603      	mov	r3, r0
 8000608:	2b00      	cmp	r3, #0
 800060a:	d001      	beq.n	8000610 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 800060c:	f000 f876 	bl	80006fc <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x22;
 8000610:	2322      	movs	r3, #34	; 0x22
 8000612:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sTime.Minutes = 0x0;
 8000616:	2300      	movs	r3, #0
 8000618:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sTime.Seconds = 0x0;
 800061c:	2300      	movs	r3, #0
 800061e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000622:	2300      	movs	r3, #0
 8000624:	63bb      	str	r3, [r7, #56]	; 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000626:	2300      	movs	r3, #0
 8000628:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800062a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800062e:	2201      	movs	r2, #1
 8000630:	4619      	mov	r1, r3
 8000632:	4823      	ldr	r0, [pc, #140]	; (80006c0 <MX_RTC_Init+0x110>)
 8000634:	f001 f832 	bl	800169c <HAL_RTC_SetTime>
 8000638:	4603      	mov	r3, r0
 800063a:	2b00      	cmp	r3, #0
 800063c:	d001      	beq.n	8000642 <MX_RTC_Init+0x92>
  {
    Error_Handler();
 800063e:	f000 f85d 	bl	80006fc <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_FRIDAY;
 8000642:	2305      	movs	r3, #5
 8000644:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sDate.Month = RTC_MONTH_OCTOBER;
 8000648:	2310      	movs	r3, #16
 800064a:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sDate.Date = 0x27;
 800064e:	2327      	movs	r3, #39	; 0x27
 8000650:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sDate.Year = 0x23;
 8000654:	2323      	movs	r3, #35	; 0x23
 8000656:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800065a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800065e:	2201      	movs	r2, #1
 8000660:	4619      	mov	r1, r3
 8000662:	4817      	ldr	r0, [pc, #92]	; (80006c0 <MX_RTC_Init+0x110>)
 8000664:	f001 f8b4 	bl	80017d0 <HAL_RTC_SetDate>
 8000668:	4603      	mov	r3, r0
 800066a:	2b00      	cmp	r3, #0
 800066c:	d001      	beq.n	8000672 <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 800066e:	f000 f845 	bl	80006fc <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x22;
 8000672:	2322      	movs	r3, #34	; 0x22
 8000674:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8000676:	2300      	movs	r3, #0
 8000678:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 800067a:	2300      	movs	r3, #0
 800067c:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 800067e:	2300      	movs	r3, #0
 8000680:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000682:	2300      	movs	r3, #0
 8000684:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000686:	2300      	movs	r3, #0
 8000688:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 800068a:	2300      	movs	r3, #0
 800068c:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 800068e:	2300      	movs	r3, #0
 8000690:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000692:	2300      	movs	r3, #0
 8000694:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8000696:	2301      	movs	r3, #1
 8000698:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 800069c:	f44f 7380 	mov.w	r3, #256	; 0x100
 80006a0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80006a2:	463b      	mov	r3, r7
 80006a4:	2201      	movs	r2, #1
 80006a6:	4619      	mov	r1, r3
 80006a8:	4805      	ldr	r0, [pc, #20]	; (80006c0 <MX_RTC_Init+0x110>)
 80006aa:	f001 f915 	bl	80018d8 <HAL_RTC_SetAlarm_IT>
 80006ae:	4603      	mov	r3, r0
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d001      	beq.n	80006b8 <MX_RTC_Init+0x108>
  {
    Error_Handler();
 80006b4:	f000 f822 	bl	80006fc <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80006b8:	bf00      	nop
 80006ba:	3740      	adds	r7, #64	; 0x40
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	20000028 	.word	0x20000028
 80006c4:	40002800 	.word	0x40002800

080006c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006c8:	b480      	push	{r7}
 80006ca:	b083      	sub	sp, #12
 80006cc:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ce:	2300      	movs	r3, #0
 80006d0:	607b      	str	r3, [r7, #4]
 80006d2:	4b09      	ldr	r3, [pc, #36]	; (80006f8 <MX_GPIO_Init+0x30>)
 80006d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d6:	4a08      	ldr	r2, [pc, #32]	; (80006f8 <MX_GPIO_Init+0x30>)
 80006d8:	f043 0301 	orr.w	r3, r3, #1
 80006dc:	6313      	str	r3, [r2, #48]	; 0x30
 80006de:	4b06      	ldr	r3, [pc, #24]	; (80006f8 <MX_GPIO_Init+0x30>)
 80006e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e2:	f003 0301 	and.w	r3, r3, #1
 80006e6:	607b      	str	r3, [r7, #4]
 80006e8:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80006ea:	bf00      	nop
 80006ec:	370c      	adds	r7, #12
 80006ee:	46bd      	mov	sp, r7
 80006f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f4:	4770      	bx	lr
 80006f6:	bf00      	nop
 80006f8:	40023800 	.word	0x40023800

080006fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006fc:	b480      	push	{r7}
 80006fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000700:	b672      	cpsid	i
}
 8000702:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000704:	e7fe      	b.n	8000704 <Error_Handler+0x8>
	...

08000708 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000708:	b480      	push	{r7}
 800070a:	b083      	sub	sp, #12
 800070c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800070e:	2300      	movs	r3, #0
 8000710:	607b      	str	r3, [r7, #4]
 8000712:	4b10      	ldr	r3, [pc, #64]	; (8000754 <HAL_MspInit+0x4c>)
 8000714:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000716:	4a0f      	ldr	r2, [pc, #60]	; (8000754 <HAL_MspInit+0x4c>)
 8000718:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800071c:	6453      	str	r3, [r2, #68]	; 0x44
 800071e:	4b0d      	ldr	r3, [pc, #52]	; (8000754 <HAL_MspInit+0x4c>)
 8000720:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000722:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000726:	607b      	str	r3, [r7, #4]
 8000728:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800072a:	2300      	movs	r3, #0
 800072c:	603b      	str	r3, [r7, #0]
 800072e:	4b09      	ldr	r3, [pc, #36]	; (8000754 <HAL_MspInit+0x4c>)
 8000730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000732:	4a08      	ldr	r2, [pc, #32]	; (8000754 <HAL_MspInit+0x4c>)
 8000734:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000738:	6413      	str	r3, [r2, #64]	; 0x40
 800073a:	4b06      	ldr	r3, [pc, #24]	; (8000754 <HAL_MspInit+0x4c>)
 800073c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800073e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000742:	603b      	str	r3, [r7, #0]
 8000744:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000746:	bf00      	nop
 8000748:	370c      	adds	r7, #12
 800074a:	46bd      	mov	sp, r7
 800074c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000750:	4770      	bx	lr
 8000752:	bf00      	nop
 8000754:	40023800 	.word	0x40023800

08000758 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b086      	sub	sp, #24
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000760:	f107 0308 	add.w	r3, r7, #8
 8000764:	2200      	movs	r2, #0
 8000766:	601a      	str	r2, [r3, #0]
 8000768:	605a      	str	r2, [r3, #4]
 800076a:	609a      	str	r2, [r3, #8]
 800076c:	60da      	str	r2, [r3, #12]
  if(hrtc->Instance==RTC)
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	4a10      	ldr	r2, [pc, #64]	; (80007b4 <HAL_RTC_MspInit+0x5c>)
 8000774:	4293      	cmp	r3, r2
 8000776:	d119      	bne.n	80007ac <HAL_RTC_MspInit+0x54>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000778:	2302      	movs	r3, #2
 800077a:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800077c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000780:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000782:	f107 0308 	add.w	r3, r7, #8
 8000786:	4618      	mov	r0, r3
 8000788:	f000 fe30 	bl	80013ec <HAL_RCCEx_PeriphCLKConfig>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d001      	beq.n	8000796 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8000792:	f7ff ffb3 	bl	80006fc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000796:	4b08      	ldr	r3, [pc, #32]	; (80007b8 <HAL_RTC_MspInit+0x60>)
 8000798:	2201      	movs	r2, #1
 800079a:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 800079c:	2200      	movs	r2, #0
 800079e:	2100      	movs	r1, #0
 80007a0:	2029      	movs	r0, #41	; 0x29
 80007a2:	f000 f9c8 	bl	8000b36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 80007a6:	2029      	movs	r0, #41	; 0x29
 80007a8:	f000 f9e1 	bl	8000b6e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80007ac:	bf00      	nop
 80007ae:	3718      	adds	r7, #24
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	40002800 	.word	0x40002800
 80007b8:	42470e3c 	.word	0x42470e3c

080007bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007bc:	b480      	push	{r7}
 80007be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007c0:	e7fe      	b.n	80007c0 <NMI_Handler+0x4>

080007c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007c2:	b480      	push	{r7}
 80007c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007c6:	e7fe      	b.n	80007c6 <HardFault_Handler+0x4>

080007c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007c8:	b480      	push	{r7}
 80007ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007cc:	e7fe      	b.n	80007cc <MemManage_Handler+0x4>

080007ce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007ce:	b480      	push	{r7}
 80007d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007d2:	e7fe      	b.n	80007d2 <BusFault_Handler+0x4>

080007d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007d4:	b480      	push	{r7}
 80007d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007d8:	e7fe      	b.n	80007d8 <UsageFault_Handler+0x4>

080007da <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007da:	b480      	push	{r7}
 80007dc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007de:	bf00      	nop
 80007e0:	46bd      	mov	sp, r7
 80007e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e6:	4770      	bx	lr

080007e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007e8:	b480      	push	{r7}
 80007ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007ec:	bf00      	nop
 80007ee:	46bd      	mov	sp, r7
 80007f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f4:	4770      	bx	lr

080007f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007f6:	b480      	push	{r7}
 80007f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007fa:	bf00      	nop
 80007fc:	46bd      	mov	sp, r7
 80007fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000802:	4770      	bx	lr

08000804 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000808:	f000 f89a 	bl	8000940 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800080c:	bf00      	nop
 800080e:	bd80      	pop	{r7, pc}

08000810 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8000814:	4802      	ldr	r0, [pc, #8]	; (8000820 <RTC_Alarm_IRQHandler+0x10>)
 8000816:	f001 f9a1 	bl	8001b5c <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 800081a:	bf00      	nop
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	20000028 	.word	0x20000028

08000824 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000824:	b480      	push	{r7}
 8000826:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000828:	4b06      	ldr	r3, [pc, #24]	; (8000844 <SystemInit+0x20>)
 800082a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800082e:	4a05      	ldr	r2, [pc, #20]	; (8000844 <SystemInit+0x20>)
 8000830:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000834:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000838:	bf00      	nop
 800083a:	46bd      	mov	sp, r7
 800083c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000840:	4770      	bx	lr
 8000842:	bf00      	nop
 8000844:	e000ed00 	.word	0xe000ed00

08000848 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000848:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000880 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800084c:	480d      	ldr	r0, [pc, #52]	; (8000884 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800084e:	490e      	ldr	r1, [pc, #56]	; (8000888 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000850:	4a0e      	ldr	r2, [pc, #56]	; (800088c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000852:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000854:	e002      	b.n	800085c <LoopCopyDataInit>

08000856 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000856:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000858:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800085a:	3304      	adds	r3, #4

0800085c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800085c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800085e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000860:	d3f9      	bcc.n	8000856 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000862:	4a0b      	ldr	r2, [pc, #44]	; (8000890 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000864:	4c0b      	ldr	r4, [pc, #44]	; (8000894 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000866:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000868:	e001      	b.n	800086e <LoopFillZerobss>

0800086a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800086a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800086c:	3204      	adds	r2, #4

0800086e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800086e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000870:	d3fb      	bcc.n	800086a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000872:	f7ff ffd7 	bl	8000824 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000876:	f001 fa6b 	bl	8001d50 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800087a:	f7ff fe2e 	bl	80004da <main>
  bx  lr    
 800087e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000880:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000884:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000888:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800088c:	08001dd0 	.word	0x08001dd0
  ldr r2, =_sbss
 8000890:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000894:	2000004c 	.word	0x2000004c

08000898 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000898:	e7fe      	b.n	8000898 <ADC_IRQHandler>
	...

0800089c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80008a0:	4b0e      	ldr	r3, [pc, #56]	; (80008dc <HAL_Init+0x40>)
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	4a0d      	ldr	r2, [pc, #52]	; (80008dc <HAL_Init+0x40>)
 80008a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80008aa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80008ac:	4b0b      	ldr	r3, [pc, #44]	; (80008dc <HAL_Init+0x40>)
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	4a0a      	ldr	r2, [pc, #40]	; (80008dc <HAL_Init+0x40>)
 80008b2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80008b6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008b8:	4b08      	ldr	r3, [pc, #32]	; (80008dc <HAL_Init+0x40>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	4a07      	ldr	r2, [pc, #28]	; (80008dc <HAL_Init+0x40>)
 80008be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80008c2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008c4:	2003      	movs	r0, #3
 80008c6:	f000 f92b 	bl	8000b20 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008ca:	200f      	movs	r0, #15
 80008cc:	f000 f808 	bl	80008e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008d0:	f7ff ff1a 	bl	8000708 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008d4:	2300      	movs	r3, #0
}
 80008d6:	4618      	mov	r0, r3
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	40023c00 	.word	0x40023c00

080008e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b082      	sub	sp, #8
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008e8:	4b12      	ldr	r3, [pc, #72]	; (8000934 <HAL_InitTick+0x54>)
 80008ea:	681a      	ldr	r2, [r3, #0]
 80008ec:	4b12      	ldr	r3, [pc, #72]	; (8000938 <HAL_InitTick+0x58>)
 80008ee:	781b      	ldrb	r3, [r3, #0]
 80008f0:	4619      	mov	r1, r3
 80008f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80008fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80008fe:	4618      	mov	r0, r3
 8000900:	f000 f943 	bl	8000b8a <HAL_SYSTICK_Config>
 8000904:	4603      	mov	r3, r0
 8000906:	2b00      	cmp	r3, #0
 8000908:	d001      	beq.n	800090e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800090a:	2301      	movs	r3, #1
 800090c:	e00e      	b.n	800092c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	2b0f      	cmp	r3, #15
 8000912:	d80a      	bhi.n	800092a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000914:	2200      	movs	r2, #0
 8000916:	6879      	ldr	r1, [r7, #4]
 8000918:	f04f 30ff 	mov.w	r0, #4294967295
 800091c:	f000 f90b 	bl	8000b36 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000920:	4a06      	ldr	r2, [pc, #24]	; (800093c <HAL_InitTick+0x5c>)
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000926:	2300      	movs	r3, #0
 8000928:	e000      	b.n	800092c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800092a:	2301      	movs	r3, #1
}
 800092c:	4618      	mov	r0, r3
 800092e:	3708      	adds	r7, #8
 8000930:	46bd      	mov	sp, r7
 8000932:	bd80      	pop	{r7, pc}
 8000934:	20000000 	.word	0x20000000
 8000938:	20000008 	.word	0x20000008
 800093c:	20000004 	.word	0x20000004

08000940 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000940:	b480      	push	{r7}
 8000942:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000944:	4b06      	ldr	r3, [pc, #24]	; (8000960 <HAL_IncTick+0x20>)
 8000946:	781b      	ldrb	r3, [r3, #0]
 8000948:	461a      	mov	r2, r3
 800094a:	4b06      	ldr	r3, [pc, #24]	; (8000964 <HAL_IncTick+0x24>)
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	4413      	add	r3, r2
 8000950:	4a04      	ldr	r2, [pc, #16]	; (8000964 <HAL_IncTick+0x24>)
 8000952:	6013      	str	r3, [r2, #0]
}
 8000954:	bf00      	nop
 8000956:	46bd      	mov	sp, r7
 8000958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095c:	4770      	bx	lr
 800095e:	bf00      	nop
 8000960:	20000008 	.word	0x20000008
 8000964:	20000048 	.word	0x20000048

08000968 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0
  return uwTick;
 800096c:	4b03      	ldr	r3, [pc, #12]	; (800097c <HAL_GetTick+0x14>)
 800096e:	681b      	ldr	r3, [r3, #0]
}
 8000970:	4618      	mov	r0, r3
 8000972:	46bd      	mov	sp, r7
 8000974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000978:	4770      	bx	lr
 800097a:	bf00      	nop
 800097c:	20000048 	.word	0x20000048

08000980 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000980:	b480      	push	{r7}
 8000982:	b085      	sub	sp, #20
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	f003 0307 	and.w	r3, r3, #7
 800098e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000990:	4b0c      	ldr	r3, [pc, #48]	; (80009c4 <__NVIC_SetPriorityGrouping+0x44>)
 8000992:	68db      	ldr	r3, [r3, #12]
 8000994:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000996:	68ba      	ldr	r2, [r7, #8]
 8000998:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800099c:	4013      	ands	r3, r2
 800099e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80009a0:	68fb      	ldr	r3, [r7, #12]
 80009a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009a4:	68bb      	ldr	r3, [r7, #8]
 80009a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80009ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009b2:	4a04      	ldr	r2, [pc, #16]	; (80009c4 <__NVIC_SetPriorityGrouping+0x44>)
 80009b4:	68bb      	ldr	r3, [r7, #8]
 80009b6:	60d3      	str	r3, [r2, #12]
}
 80009b8:	bf00      	nop
 80009ba:	3714      	adds	r7, #20
 80009bc:	46bd      	mov	sp, r7
 80009be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c2:	4770      	bx	lr
 80009c4:	e000ed00 	.word	0xe000ed00

080009c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009cc:	4b04      	ldr	r3, [pc, #16]	; (80009e0 <__NVIC_GetPriorityGrouping+0x18>)
 80009ce:	68db      	ldr	r3, [r3, #12]
 80009d0:	0a1b      	lsrs	r3, r3, #8
 80009d2:	f003 0307 	and.w	r3, r3, #7
}
 80009d6:	4618      	mov	r0, r3
 80009d8:	46bd      	mov	sp, r7
 80009da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009de:	4770      	bx	lr
 80009e0:	e000ed00 	.word	0xe000ed00

080009e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009e4:	b480      	push	{r7}
 80009e6:	b083      	sub	sp, #12
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	4603      	mov	r3, r0
 80009ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	db0b      	blt.n	8000a0e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009f6:	79fb      	ldrb	r3, [r7, #7]
 80009f8:	f003 021f 	and.w	r2, r3, #31
 80009fc:	4907      	ldr	r1, [pc, #28]	; (8000a1c <__NVIC_EnableIRQ+0x38>)
 80009fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a02:	095b      	lsrs	r3, r3, #5
 8000a04:	2001      	movs	r0, #1
 8000a06:	fa00 f202 	lsl.w	r2, r0, r2
 8000a0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a0e:	bf00      	nop
 8000a10:	370c      	adds	r7, #12
 8000a12:	46bd      	mov	sp, r7
 8000a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a18:	4770      	bx	lr
 8000a1a:	bf00      	nop
 8000a1c:	e000e100 	.word	0xe000e100

08000a20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a20:	b480      	push	{r7}
 8000a22:	b083      	sub	sp, #12
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	4603      	mov	r3, r0
 8000a28:	6039      	str	r1, [r7, #0]
 8000a2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	db0a      	blt.n	8000a4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a34:	683b      	ldr	r3, [r7, #0]
 8000a36:	b2da      	uxtb	r2, r3
 8000a38:	490c      	ldr	r1, [pc, #48]	; (8000a6c <__NVIC_SetPriority+0x4c>)
 8000a3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a3e:	0112      	lsls	r2, r2, #4
 8000a40:	b2d2      	uxtb	r2, r2
 8000a42:	440b      	add	r3, r1
 8000a44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a48:	e00a      	b.n	8000a60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a4a:	683b      	ldr	r3, [r7, #0]
 8000a4c:	b2da      	uxtb	r2, r3
 8000a4e:	4908      	ldr	r1, [pc, #32]	; (8000a70 <__NVIC_SetPriority+0x50>)
 8000a50:	79fb      	ldrb	r3, [r7, #7]
 8000a52:	f003 030f 	and.w	r3, r3, #15
 8000a56:	3b04      	subs	r3, #4
 8000a58:	0112      	lsls	r2, r2, #4
 8000a5a:	b2d2      	uxtb	r2, r2
 8000a5c:	440b      	add	r3, r1
 8000a5e:	761a      	strb	r2, [r3, #24]
}
 8000a60:	bf00      	nop
 8000a62:	370c      	adds	r7, #12
 8000a64:	46bd      	mov	sp, r7
 8000a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6a:	4770      	bx	lr
 8000a6c:	e000e100 	.word	0xe000e100
 8000a70:	e000ed00 	.word	0xe000ed00

08000a74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a74:	b480      	push	{r7}
 8000a76:	b089      	sub	sp, #36	; 0x24
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	60f8      	str	r0, [r7, #12]
 8000a7c:	60b9      	str	r1, [r7, #8]
 8000a7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a80:	68fb      	ldr	r3, [r7, #12]
 8000a82:	f003 0307 	and.w	r3, r3, #7
 8000a86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a88:	69fb      	ldr	r3, [r7, #28]
 8000a8a:	f1c3 0307 	rsb	r3, r3, #7
 8000a8e:	2b04      	cmp	r3, #4
 8000a90:	bf28      	it	cs
 8000a92:	2304      	movcs	r3, #4
 8000a94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a96:	69fb      	ldr	r3, [r7, #28]
 8000a98:	3304      	adds	r3, #4
 8000a9a:	2b06      	cmp	r3, #6
 8000a9c:	d902      	bls.n	8000aa4 <NVIC_EncodePriority+0x30>
 8000a9e:	69fb      	ldr	r3, [r7, #28]
 8000aa0:	3b03      	subs	r3, #3
 8000aa2:	e000      	b.n	8000aa6 <NVIC_EncodePriority+0x32>
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000aa8:	f04f 32ff 	mov.w	r2, #4294967295
 8000aac:	69bb      	ldr	r3, [r7, #24]
 8000aae:	fa02 f303 	lsl.w	r3, r2, r3
 8000ab2:	43da      	mvns	r2, r3
 8000ab4:	68bb      	ldr	r3, [r7, #8]
 8000ab6:	401a      	ands	r2, r3
 8000ab8:	697b      	ldr	r3, [r7, #20]
 8000aba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000abc:	f04f 31ff 	mov.w	r1, #4294967295
 8000ac0:	697b      	ldr	r3, [r7, #20]
 8000ac2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ac6:	43d9      	mvns	r1, r3
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000acc:	4313      	orrs	r3, r2
         );
}
 8000ace:	4618      	mov	r0, r3
 8000ad0:	3724      	adds	r7, #36	; 0x24
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad8:	4770      	bx	lr
	...

08000adc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b082      	sub	sp, #8
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	3b01      	subs	r3, #1
 8000ae8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000aec:	d301      	bcc.n	8000af2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000aee:	2301      	movs	r3, #1
 8000af0:	e00f      	b.n	8000b12 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000af2:	4a0a      	ldr	r2, [pc, #40]	; (8000b1c <SysTick_Config+0x40>)
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	3b01      	subs	r3, #1
 8000af8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000afa:	210f      	movs	r1, #15
 8000afc:	f04f 30ff 	mov.w	r0, #4294967295
 8000b00:	f7ff ff8e 	bl	8000a20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b04:	4b05      	ldr	r3, [pc, #20]	; (8000b1c <SysTick_Config+0x40>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b0a:	4b04      	ldr	r3, [pc, #16]	; (8000b1c <SysTick_Config+0x40>)
 8000b0c:	2207      	movs	r2, #7
 8000b0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b10:	2300      	movs	r3, #0
}
 8000b12:	4618      	mov	r0, r3
 8000b14:	3708      	adds	r7, #8
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	e000e010 	.word	0xe000e010

08000b20 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b082      	sub	sp, #8
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b28:	6878      	ldr	r0, [r7, #4]
 8000b2a:	f7ff ff29 	bl	8000980 <__NVIC_SetPriorityGrouping>
}
 8000b2e:	bf00      	nop
 8000b30:	3708      	adds	r7, #8
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}

08000b36 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b36:	b580      	push	{r7, lr}
 8000b38:	b086      	sub	sp, #24
 8000b3a:	af00      	add	r7, sp, #0
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	60b9      	str	r1, [r7, #8]
 8000b40:	607a      	str	r2, [r7, #4]
 8000b42:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b44:	2300      	movs	r3, #0
 8000b46:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b48:	f7ff ff3e 	bl	80009c8 <__NVIC_GetPriorityGrouping>
 8000b4c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b4e:	687a      	ldr	r2, [r7, #4]
 8000b50:	68b9      	ldr	r1, [r7, #8]
 8000b52:	6978      	ldr	r0, [r7, #20]
 8000b54:	f7ff ff8e 	bl	8000a74 <NVIC_EncodePriority>
 8000b58:	4602      	mov	r2, r0
 8000b5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b5e:	4611      	mov	r1, r2
 8000b60:	4618      	mov	r0, r3
 8000b62:	f7ff ff5d 	bl	8000a20 <__NVIC_SetPriority>
}
 8000b66:	bf00      	nop
 8000b68:	3718      	adds	r7, #24
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}

08000b6e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b6e:	b580      	push	{r7, lr}
 8000b70:	b082      	sub	sp, #8
 8000b72:	af00      	add	r7, sp, #0
 8000b74:	4603      	mov	r3, r0
 8000b76:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	f7ff ff31 	bl	80009e4 <__NVIC_EnableIRQ>
}
 8000b82:	bf00      	nop
 8000b84:	3708      	adds	r7, #8
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}

08000b8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b8a:	b580      	push	{r7, lr}
 8000b8c:	b082      	sub	sp, #8
 8000b8e:	af00      	add	r7, sp, #0
 8000b90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b92:	6878      	ldr	r0, [r7, #4]
 8000b94:	f7ff ffa2 	bl	8000adc <SysTick_Config>
 8000b98:	4603      	mov	r3, r0
}
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	3708      	adds	r7, #8
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}
	...

08000ba4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b086      	sub	sp, #24
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d101      	bne.n	8000bb6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000bb2:	2301      	movs	r3, #1
 8000bb4:	e267      	b.n	8001086 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	f003 0301 	and.w	r3, r3, #1
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d075      	beq.n	8000cae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000bc2:	4b88      	ldr	r3, [pc, #544]	; (8000de4 <HAL_RCC_OscConfig+0x240>)
 8000bc4:	689b      	ldr	r3, [r3, #8]
 8000bc6:	f003 030c 	and.w	r3, r3, #12
 8000bca:	2b04      	cmp	r3, #4
 8000bcc:	d00c      	beq.n	8000be8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000bce:	4b85      	ldr	r3, [pc, #532]	; (8000de4 <HAL_RCC_OscConfig+0x240>)
 8000bd0:	689b      	ldr	r3, [r3, #8]
 8000bd2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000bd6:	2b08      	cmp	r3, #8
 8000bd8:	d112      	bne.n	8000c00 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000bda:	4b82      	ldr	r3, [pc, #520]	; (8000de4 <HAL_RCC_OscConfig+0x240>)
 8000bdc:	685b      	ldr	r3, [r3, #4]
 8000bde:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000be2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000be6:	d10b      	bne.n	8000c00 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000be8:	4b7e      	ldr	r3, [pc, #504]	; (8000de4 <HAL_RCC_OscConfig+0x240>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d05b      	beq.n	8000cac <HAL_RCC_OscConfig+0x108>
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	685b      	ldr	r3, [r3, #4]
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d157      	bne.n	8000cac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000bfc:	2301      	movs	r3, #1
 8000bfe:	e242      	b.n	8001086 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	685b      	ldr	r3, [r3, #4]
 8000c04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c08:	d106      	bne.n	8000c18 <HAL_RCC_OscConfig+0x74>
 8000c0a:	4b76      	ldr	r3, [pc, #472]	; (8000de4 <HAL_RCC_OscConfig+0x240>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	4a75      	ldr	r2, [pc, #468]	; (8000de4 <HAL_RCC_OscConfig+0x240>)
 8000c10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c14:	6013      	str	r3, [r2, #0]
 8000c16:	e01d      	b.n	8000c54 <HAL_RCC_OscConfig+0xb0>
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	685b      	ldr	r3, [r3, #4]
 8000c1c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000c20:	d10c      	bne.n	8000c3c <HAL_RCC_OscConfig+0x98>
 8000c22:	4b70      	ldr	r3, [pc, #448]	; (8000de4 <HAL_RCC_OscConfig+0x240>)
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	4a6f      	ldr	r2, [pc, #444]	; (8000de4 <HAL_RCC_OscConfig+0x240>)
 8000c28:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c2c:	6013      	str	r3, [r2, #0]
 8000c2e:	4b6d      	ldr	r3, [pc, #436]	; (8000de4 <HAL_RCC_OscConfig+0x240>)
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	4a6c      	ldr	r2, [pc, #432]	; (8000de4 <HAL_RCC_OscConfig+0x240>)
 8000c34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c38:	6013      	str	r3, [r2, #0]
 8000c3a:	e00b      	b.n	8000c54 <HAL_RCC_OscConfig+0xb0>
 8000c3c:	4b69      	ldr	r3, [pc, #420]	; (8000de4 <HAL_RCC_OscConfig+0x240>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	4a68      	ldr	r2, [pc, #416]	; (8000de4 <HAL_RCC_OscConfig+0x240>)
 8000c42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c46:	6013      	str	r3, [r2, #0]
 8000c48:	4b66      	ldr	r3, [pc, #408]	; (8000de4 <HAL_RCC_OscConfig+0x240>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	4a65      	ldr	r2, [pc, #404]	; (8000de4 <HAL_RCC_OscConfig+0x240>)
 8000c4e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c52:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	685b      	ldr	r3, [r3, #4]
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d013      	beq.n	8000c84 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c5c:	f7ff fe84 	bl	8000968 <HAL_GetTick>
 8000c60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c62:	e008      	b.n	8000c76 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000c64:	f7ff fe80 	bl	8000968 <HAL_GetTick>
 8000c68:	4602      	mov	r2, r0
 8000c6a:	693b      	ldr	r3, [r7, #16]
 8000c6c:	1ad3      	subs	r3, r2, r3
 8000c6e:	2b64      	cmp	r3, #100	; 0x64
 8000c70:	d901      	bls.n	8000c76 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000c72:	2303      	movs	r3, #3
 8000c74:	e207      	b.n	8001086 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c76:	4b5b      	ldr	r3, [pc, #364]	; (8000de4 <HAL_RCC_OscConfig+0x240>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d0f0      	beq.n	8000c64 <HAL_RCC_OscConfig+0xc0>
 8000c82:	e014      	b.n	8000cae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c84:	f7ff fe70 	bl	8000968 <HAL_GetTick>
 8000c88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c8a:	e008      	b.n	8000c9e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000c8c:	f7ff fe6c 	bl	8000968 <HAL_GetTick>
 8000c90:	4602      	mov	r2, r0
 8000c92:	693b      	ldr	r3, [r7, #16]
 8000c94:	1ad3      	subs	r3, r2, r3
 8000c96:	2b64      	cmp	r3, #100	; 0x64
 8000c98:	d901      	bls.n	8000c9e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000c9a:	2303      	movs	r3, #3
 8000c9c:	e1f3      	b.n	8001086 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c9e:	4b51      	ldr	r3, [pc, #324]	; (8000de4 <HAL_RCC_OscConfig+0x240>)
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d1f0      	bne.n	8000c8c <HAL_RCC_OscConfig+0xe8>
 8000caa:	e000      	b.n	8000cae <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000cac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	f003 0302 	and.w	r3, r3, #2
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d063      	beq.n	8000d82 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000cba:	4b4a      	ldr	r3, [pc, #296]	; (8000de4 <HAL_RCC_OscConfig+0x240>)
 8000cbc:	689b      	ldr	r3, [r3, #8]
 8000cbe:	f003 030c 	and.w	r3, r3, #12
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d00b      	beq.n	8000cde <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000cc6:	4b47      	ldr	r3, [pc, #284]	; (8000de4 <HAL_RCC_OscConfig+0x240>)
 8000cc8:	689b      	ldr	r3, [r3, #8]
 8000cca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000cce:	2b08      	cmp	r3, #8
 8000cd0:	d11c      	bne.n	8000d0c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000cd2:	4b44      	ldr	r3, [pc, #272]	; (8000de4 <HAL_RCC_OscConfig+0x240>)
 8000cd4:	685b      	ldr	r3, [r3, #4]
 8000cd6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d116      	bne.n	8000d0c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000cde:	4b41      	ldr	r3, [pc, #260]	; (8000de4 <HAL_RCC_OscConfig+0x240>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	f003 0302 	and.w	r3, r3, #2
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d005      	beq.n	8000cf6 <HAL_RCC_OscConfig+0x152>
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	68db      	ldr	r3, [r3, #12]
 8000cee:	2b01      	cmp	r3, #1
 8000cf0:	d001      	beq.n	8000cf6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8000cf2:	2301      	movs	r3, #1
 8000cf4:	e1c7      	b.n	8001086 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000cf6:	4b3b      	ldr	r3, [pc, #236]	; (8000de4 <HAL_RCC_OscConfig+0x240>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	691b      	ldr	r3, [r3, #16]
 8000d02:	00db      	lsls	r3, r3, #3
 8000d04:	4937      	ldr	r1, [pc, #220]	; (8000de4 <HAL_RCC_OscConfig+0x240>)
 8000d06:	4313      	orrs	r3, r2
 8000d08:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d0a:	e03a      	b.n	8000d82 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	68db      	ldr	r3, [r3, #12]
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d020      	beq.n	8000d56 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000d14:	4b34      	ldr	r3, [pc, #208]	; (8000de8 <HAL_RCC_OscConfig+0x244>)
 8000d16:	2201      	movs	r2, #1
 8000d18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000d1a:	f7ff fe25 	bl	8000968 <HAL_GetTick>
 8000d1e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d20:	e008      	b.n	8000d34 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000d22:	f7ff fe21 	bl	8000968 <HAL_GetTick>
 8000d26:	4602      	mov	r2, r0
 8000d28:	693b      	ldr	r3, [r7, #16]
 8000d2a:	1ad3      	subs	r3, r2, r3
 8000d2c:	2b02      	cmp	r3, #2
 8000d2e:	d901      	bls.n	8000d34 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8000d30:	2303      	movs	r3, #3
 8000d32:	e1a8      	b.n	8001086 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d34:	4b2b      	ldr	r3, [pc, #172]	; (8000de4 <HAL_RCC_OscConfig+0x240>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	f003 0302 	and.w	r3, r3, #2
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d0f0      	beq.n	8000d22 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d40:	4b28      	ldr	r3, [pc, #160]	; (8000de4 <HAL_RCC_OscConfig+0x240>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	691b      	ldr	r3, [r3, #16]
 8000d4c:	00db      	lsls	r3, r3, #3
 8000d4e:	4925      	ldr	r1, [pc, #148]	; (8000de4 <HAL_RCC_OscConfig+0x240>)
 8000d50:	4313      	orrs	r3, r2
 8000d52:	600b      	str	r3, [r1, #0]
 8000d54:	e015      	b.n	8000d82 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000d56:	4b24      	ldr	r3, [pc, #144]	; (8000de8 <HAL_RCC_OscConfig+0x244>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000d5c:	f7ff fe04 	bl	8000968 <HAL_GetTick>
 8000d60:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d62:	e008      	b.n	8000d76 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000d64:	f7ff fe00 	bl	8000968 <HAL_GetTick>
 8000d68:	4602      	mov	r2, r0
 8000d6a:	693b      	ldr	r3, [r7, #16]
 8000d6c:	1ad3      	subs	r3, r2, r3
 8000d6e:	2b02      	cmp	r3, #2
 8000d70:	d901      	bls.n	8000d76 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8000d72:	2303      	movs	r3, #3
 8000d74:	e187      	b.n	8001086 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d76:	4b1b      	ldr	r3, [pc, #108]	; (8000de4 <HAL_RCC_OscConfig+0x240>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	f003 0302 	and.w	r3, r3, #2
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d1f0      	bne.n	8000d64 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	f003 0308 	and.w	r3, r3, #8
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d036      	beq.n	8000dfc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	695b      	ldr	r3, [r3, #20]
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d016      	beq.n	8000dc4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000d96:	4b15      	ldr	r3, [pc, #84]	; (8000dec <HAL_RCC_OscConfig+0x248>)
 8000d98:	2201      	movs	r2, #1
 8000d9a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000d9c:	f7ff fde4 	bl	8000968 <HAL_GetTick>
 8000da0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000da2:	e008      	b.n	8000db6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000da4:	f7ff fde0 	bl	8000968 <HAL_GetTick>
 8000da8:	4602      	mov	r2, r0
 8000daa:	693b      	ldr	r3, [r7, #16]
 8000dac:	1ad3      	subs	r3, r2, r3
 8000dae:	2b02      	cmp	r3, #2
 8000db0:	d901      	bls.n	8000db6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8000db2:	2303      	movs	r3, #3
 8000db4:	e167      	b.n	8001086 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000db6:	4b0b      	ldr	r3, [pc, #44]	; (8000de4 <HAL_RCC_OscConfig+0x240>)
 8000db8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000dba:	f003 0302 	and.w	r3, r3, #2
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d0f0      	beq.n	8000da4 <HAL_RCC_OscConfig+0x200>
 8000dc2:	e01b      	b.n	8000dfc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000dc4:	4b09      	ldr	r3, [pc, #36]	; (8000dec <HAL_RCC_OscConfig+0x248>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000dca:	f7ff fdcd 	bl	8000968 <HAL_GetTick>
 8000dce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000dd0:	e00e      	b.n	8000df0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000dd2:	f7ff fdc9 	bl	8000968 <HAL_GetTick>
 8000dd6:	4602      	mov	r2, r0
 8000dd8:	693b      	ldr	r3, [r7, #16]
 8000dda:	1ad3      	subs	r3, r2, r3
 8000ddc:	2b02      	cmp	r3, #2
 8000dde:	d907      	bls.n	8000df0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8000de0:	2303      	movs	r3, #3
 8000de2:	e150      	b.n	8001086 <HAL_RCC_OscConfig+0x4e2>
 8000de4:	40023800 	.word	0x40023800
 8000de8:	42470000 	.word	0x42470000
 8000dec:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000df0:	4b88      	ldr	r3, [pc, #544]	; (8001014 <HAL_RCC_OscConfig+0x470>)
 8000df2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000df4:	f003 0302 	and.w	r3, r3, #2
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d1ea      	bne.n	8000dd2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	f003 0304 	and.w	r3, r3, #4
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	f000 8097 	beq.w	8000f38 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000e0e:	4b81      	ldr	r3, [pc, #516]	; (8001014 <HAL_RCC_OscConfig+0x470>)
 8000e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d10f      	bne.n	8000e3a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	60bb      	str	r3, [r7, #8]
 8000e1e:	4b7d      	ldr	r3, [pc, #500]	; (8001014 <HAL_RCC_OscConfig+0x470>)
 8000e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e22:	4a7c      	ldr	r2, [pc, #496]	; (8001014 <HAL_RCC_OscConfig+0x470>)
 8000e24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e28:	6413      	str	r3, [r2, #64]	; 0x40
 8000e2a:	4b7a      	ldr	r3, [pc, #488]	; (8001014 <HAL_RCC_OscConfig+0x470>)
 8000e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e32:	60bb      	str	r3, [r7, #8]
 8000e34:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000e36:	2301      	movs	r3, #1
 8000e38:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e3a:	4b77      	ldr	r3, [pc, #476]	; (8001018 <HAL_RCC_OscConfig+0x474>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d118      	bne.n	8000e78 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000e46:	4b74      	ldr	r3, [pc, #464]	; (8001018 <HAL_RCC_OscConfig+0x474>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	4a73      	ldr	r2, [pc, #460]	; (8001018 <HAL_RCC_OscConfig+0x474>)
 8000e4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e50:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000e52:	f7ff fd89 	bl	8000968 <HAL_GetTick>
 8000e56:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e58:	e008      	b.n	8000e6c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000e5a:	f7ff fd85 	bl	8000968 <HAL_GetTick>
 8000e5e:	4602      	mov	r2, r0
 8000e60:	693b      	ldr	r3, [r7, #16]
 8000e62:	1ad3      	subs	r3, r2, r3
 8000e64:	2b02      	cmp	r3, #2
 8000e66:	d901      	bls.n	8000e6c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8000e68:	2303      	movs	r3, #3
 8000e6a:	e10c      	b.n	8001086 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e6c:	4b6a      	ldr	r3, [pc, #424]	; (8001018 <HAL_RCC_OscConfig+0x474>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d0f0      	beq.n	8000e5a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	689b      	ldr	r3, [r3, #8]
 8000e7c:	2b01      	cmp	r3, #1
 8000e7e:	d106      	bne.n	8000e8e <HAL_RCC_OscConfig+0x2ea>
 8000e80:	4b64      	ldr	r3, [pc, #400]	; (8001014 <HAL_RCC_OscConfig+0x470>)
 8000e82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e84:	4a63      	ldr	r2, [pc, #396]	; (8001014 <HAL_RCC_OscConfig+0x470>)
 8000e86:	f043 0301 	orr.w	r3, r3, #1
 8000e8a:	6713      	str	r3, [r2, #112]	; 0x70
 8000e8c:	e01c      	b.n	8000ec8 <HAL_RCC_OscConfig+0x324>
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	689b      	ldr	r3, [r3, #8]
 8000e92:	2b05      	cmp	r3, #5
 8000e94:	d10c      	bne.n	8000eb0 <HAL_RCC_OscConfig+0x30c>
 8000e96:	4b5f      	ldr	r3, [pc, #380]	; (8001014 <HAL_RCC_OscConfig+0x470>)
 8000e98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e9a:	4a5e      	ldr	r2, [pc, #376]	; (8001014 <HAL_RCC_OscConfig+0x470>)
 8000e9c:	f043 0304 	orr.w	r3, r3, #4
 8000ea0:	6713      	str	r3, [r2, #112]	; 0x70
 8000ea2:	4b5c      	ldr	r3, [pc, #368]	; (8001014 <HAL_RCC_OscConfig+0x470>)
 8000ea4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000ea6:	4a5b      	ldr	r2, [pc, #364]	; (8001014 <HAL_RCC_OscConfig+0x470>)
 8000ea8:	f043 0301 	orr.w	r3, r3, #1
 8000eac:	6713      	str	r3, [r2, #112]	; 0x70
 8000eae:	e00b      	b.n	8000ec8 <HAL_RCC_OscConfig+0x324>
 8000eb0:	4b58      	ldr	r3, [pc, #352]	; (8001014 <HAL_RCC_OscConfig+0x470>)
 8000eb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000eb4:	4a57      	ldr	r2, [pc, #348]	; (8001014 <HAL_RCC_OscConfig+0x470>)
 8000eb6:	f023 0301 	bic.w	r3, r3, #1
 8000eba:	6713      	str	r3, [r2, #112]	; 0x70
 8000ebc:	4b55      	ldr	r3, [pc, #340]	; (8001014 <HAL_RCC_OscConfig+0x470>)
 8000ebe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000ec0:	4a54      	ldr	r2, [pc, #336]	; (8001014 <HAL_RCC_OscConfig+0x470>)
 8000ec2:	f023 0304 	bic.w	r3, r3, #4
 8000ec6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	689b      	ldr	r3, [r3, #8]
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d015      	beq.n	8000efc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000ed0:	f7ff fd4a 	bl	8000968 <HAL_GetTick>
 8000ed4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ed6:	e00a      	b.n	8000eee <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000ed8:	f7ff fd46 	bl	8000968 <HAL_GetTick>
 8000edc:	4602      	mov	r2, r0
 8000ede:	693b      	ldr	r3, [r7, #16]
 8000ee0:	1ad3      	subs	r3, r2, r3
 8000ee2:	f241 3288 	movw	r2, #5000	; 0x1388
 8000ee6:	4293      	cmp	r3, r2
 8000ee8:	d901      	bls.n	8000eee <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8000eea:	2303      	movs	r3, #3
 8000eec:	e0cb      	b.n	8001086 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000eee:	4b49      	ldr	r3, [pc, #292]	; (8001014 <HAL_RCC_OscConfig+0x470>)
 8000ef0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000ef2:	f003 0302 	and.w	r3, r3, #2
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d0ee      	beq.n	8000ed8 <HAL_RCC_OscConfig+0x334>
 8000efa:	e014      	b.n	8000f26 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000efc:	f7ff fd34 	bl	8000968 <HAL_GetTick>
 8000f00:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f02:	e00a      	b.n	8000f1a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000f04:	f7ff fd30 	bl	8000968 <HAL_GetTick>
 8000f08:	4602      	mov	r2, r0
 8000f0a:	693b      	ldr	r3, [r7, #16]
 8000f0c:	1ad3      	subs	r3, r2, r3
 8000f0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f12:	4293      	cmp	r3, r2
 8000f14:	d901      	bls.n	8000f1a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8000f16:	2303      	movs	r3, #3
 8000f18:	e0b5      	b.n	8001086 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f1a:	4b3e      	ldr	r3, [pc, #248]	; (8001014 <HAL_RCC_OscConfig+0x470>)
 8000f1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f1e:	f003 0302 	and.w	r3, r3, #2
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d1ee      	bne.n	8000f04 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8000f26:	7dfb      	ldrb	r3, [r7, #23]
 8000f28:	2b01      	cmp	r3, #1
 8000f2a:	d105      	bne.n	8000f38 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000f2c:	4b39      	ldr	r3, [pc, #228]	; (8001014 <HAL_RCC_OscConfig+0x470>)
 8000f2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f30:	4a38      	ldr	r2, [pc, #224]	; (8001014 <HAL_RCC_OscConfig+0x470>)
 8000f32:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000f36:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	699b      	ldr	r3, [r3, #24]
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	f000 80a1 	beq.w	8001084 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000f42:	4b34      	ldr	r3, [pc, #208]	; (8001014 <HAL_RCC_OscConfig+0x470>)
 8000f44:	689b      	ldr	r3, [r3, #8]
 8000f46:	f003 030c 	and.w	r3, r3, #12
 8000f4a:	2b08      	cmp	r3, #8
 8000f4c:	d05c      	beq.n	8001008 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	699b      	ldr	r3, [r3, #24]
 8000f52:	2b02      	cmp	r3, #2
 8000f54:	d141      	bne.n	8000fda <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000f56:	4b31      	ldr	r3, [pc, #196]	; (800101c <HAL_RCC_OscConfig+0x478>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f5c:	f7ff fd04 	bl	8000968 <HAL_GetTick>
 8000f60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000f62:	e008      	b.n	8000f76 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f64:	f7ff fd00 	bl	8000968 <HAL_GetTick>
 8000f68:	4602      	mov	r2, r0
 8000f6a:	693b      	ldr	r3, [r7, #16]
 8000f6c:	1ad3      	subs	r3, r2, r3
 8000f6e:	2b02      	cmp	r3, #2
 8000f70:	d901      	bls.n	8000f76 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8000f72:	2303      	movs	r3, #3
 8000f74:	e087      	b.n	8001086 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000f76:	4b27      	ldr	r3, [pc, #156]	; (8001014 <HAL_RCC_OscConfig+0x470>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d1f0      	bne.n	8000f64 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	69da      	ldr	r2, [r3, #28]
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	6a1b      	ldr	r3, [r3, #32]
 8000f8a:	431a      	orrs	r2, r3
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f90:	019b      	lsls	r3, r3, #6
 8000f92:	431a      	orrs	r2, r3
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f98:	085b      	lsrs	r3, r3, #1
 8000f9a:	3b01      	subs	r3, #1
 8000f9c:	041b      	lsls	r3, r3, #16
 8000f9e:	431a      	orrs	r2, r3
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fa4:	061b      	lsls	r3, r3, #24
 8000fa6:	491b      	ldr	r1, [pc, #108]	; (8001014 <HAL_RCC_OscConfig+0x470>)
 8000fa8:	4313      	orrs	r3, r2
 8000faa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000fac:	4b1b      	ldr	r3, [pc, #108]	; (800101c <HAL_RCC_OscConfig+0x478>)
 8000fae:	2201      	movs	r2, #1
 8000fb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fb2:	f7ff fcd9 	bl	8000968 <HAL_GetTick>
 8000fb6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000fb8:	e008      	b.n	8000fcc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000fba:	f7ff fcd5 	bl	8000968 <HAL_GetTick>
 8000fbe:	4602      	mov	r2, r0
 8000fc0:	693b      	ldr	r3, [r7, #16]
 8000fc2:	1ad3      	subs	r3, r2, r3
 8000fc4:	2b02      	cmp	r3, #2
 8000fc6:	d901      	bls.n	8000fcc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8000fc8:	2303      	movs	r3, #3
 8000fca:	e05c      	b.n	8001086 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000fcc:	4b11      	ldr	r3, [pc, #68]	; (8001014 <HAL_RCC_OscConfig+0x470>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d0f0      	beq.n	8000fba <HAL_RCC_OscConfig+0x416>
 8000fd8:	e054      	b.n	8001084 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000fda:	4b10      	ldr	r3, [pc, #64]	; (800101c <HAL_RCC_OscConfig+0x478>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fe0:	f7ff fcc2 	bl	8000968 <HAL_GetTick>
 8000fe4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000fe6:	e008      	b.n	8000ffa <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000fe8:	f7ff fcbe 	bl	8000968 <HAL_GetTick>
 8000fec:	4602      	mov	r2, r0
 8000fee:	693b      	ldr	r3, [r7, #16]
 8000ff0:	1ad3      	subs	r3, r2, r3
 8000ff2:	2b02      	cmp	r3, #2
 8000ff4:	d901      	bls.n	8000ffa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8000ff6:	2303      	movs	r3, #3
 8000ff8:	e045      	b.n	8001086 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000ffa:	4b06      	ldr	r3, [pc, #24]	; (8001014 <HAL_RCC_OscConfig+0x470>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001002:	2b00      	cmp	r3, #0
 8001004:	d1f0      	bne.n	8000fe8 <HAL_RCC_OscConfig+0x444>
 8001006:	e03d      	b.n	8001084 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	699b      	ldr	r3, [r3, #24]
 800100c:	2b01      	cmp	r3, #1
 800100e:	d107      	bne.n	8001020 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001010:	2301      	movs	r3, #1
 8001012:	e038      	b.n	8001086 <HAL_RCC_OscConfig+0x4e2>
 8001014:	40023800 	.word	0x40023800
 8001018:	40007000 	.word	0x40007000
 800101c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001020:	4b1b      	ldr	r3, [pc, #108]	; (8001090 <HAL_RCC_OscConfig+0x4ec>)
 8001022:	685b      	ldr	r3, [r3, #4]
 8001024:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	699b      	ldr	r3, [r3, #24]
 800102a:	2b01      	cmp	r3, #1
 800102c:	d028      	beq.n	8001080 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001038:	429a      	cmp	r2, r3
 800103a:	d121      	bne.n	8001080 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001046:	429a      	cmp	r2, r3
 8001048:	d11a      	bne.n	8001080 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800104a:	68fa      	ldr	r2, [r7, #12]
 800104c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001050:	4013      	ands	r3, r2
 8001052:	687a      	ldr	r2, [r7, #4]
 8001054:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001056:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001058:	4293      	cmp	r3, r2
 800105a:	d111      	bne.n	8001080 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001066:	085b      	lsrs	r3, r3, #1
 8001068:	3b01      	subs	r3, #1
 800106a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800106c:	429a      	cmp	r2, r3
 800106e:	d107      	bne.n	8001080 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800107a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800107c:	429a      	cmp	r2, r3
 800107e:	d001      	beq.n	8001084 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001080:	2301      	movs	r3, #1
 8001082:	e000      	b.n	8001086 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001084:	2300      	movs	r3, #0
}
 8001086:	4618      	mov	r0, r3
 8001088:	3718      	adds	r7, #24
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	40023800 	.word	0x40023800

08001094 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b084      	sub	sp, #16
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
 800109c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d101      	bne.n	80010a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80010a4:	2301      	movs	r3, #1
 80010a6:	e0cc      	b.n	8001242 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80010a8:	4b68      	ldr	r3, [pc, #416]	; (800124c <HAL_RCC_ClockConfig+0x1b8>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	f003 0307 	and.w	r3, r3, #7
 80010b0:	683a      	ldr	r2, [r7, #0]
 80010b2:	429a      	cmp	r2, r3
 80010b4:	d90c      	bls.n	80010d0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80010b6:	4b65      	ldr	r3, [pc, #404]	; (800124c <HAL_RCC_ClockConfig+0x1b8>)
 80010b8:	683a      	ldr	r2, [r7, #0]
 80010ba:	b2d2      	uxtb	r2, r2
 80010bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80010be:	4b63      	ldr	r3, [pc, #396]	; (800124c <HAL_RCC_ClockConfig+0x1b8>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	f003 0307 	and.w	r3, r3, #7
 80010c6:	683a      	ldr	r2, [r7, #0]
 80010c8:	429a      	cmp	r2, r3
 80010ca:	d001      	beq.n	80010d0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80010cc:	2301      	movs	r3, #1
 80010ce:	e0b8      	b.n	8001242 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	f003 0302 	and.w	r3, r3, #2
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d020      	beq.n	800111e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	f003 0304 	and.w	r3, r3, #4
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d005      	beq.n	80010f4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80010e8:	4b59      	ldr	r3, [pc, #356]	; (8001250 <HAL_RCC_ClockConfig+0x1bc>)
 80010ea:	689b      	ldr	r3, [r3, #8]
 80010ec:	4a58      	ldr	r2, [pc, #352]	; (8001250 <HAL_RCC_ClockConfig+0x1bc>)
 80010ee:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80010f2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	f003 0308 	and.w	r3, r3, #8
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d005      	beq.n	800110c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001100:	4b53      	ldr	r3, [pc, #332]	; (8001250 <HAL_RCC_ClockConfig+0x1bc>)
 8001102:	689b      	ldr	r3, [r3, #8]
 8001104:	4a52      	ldr	r2, [pc, #328]	; (8001250 <HAL_RCC_ClockConfig+0x1bc>)
 8001106:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800110a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800110c:	4b50      	ldr	r3, [pc, #320]	; (8001250 <HAL_RCC_ClockConfig+0x1bc>)
 800110e:	689b      	ldr	r3, [r3, #8]
 8001110:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	689b      	ldr	r3, [r3, #8]
 8001118:	494d      	ldr	r1, [pc, #308]	; (8001250 <HAL_RCC_ClockConfig+0x1bc>)
 800111a:	4313      	orrs	r3, r2
 800111c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	f003 0301 	and.w	r3, r3, #1
 8001126:	2b00      	cmp	r3, #0
 8001128:	d044      	beq.n	80011b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	685b      	ldr	r3, [r3, #4]
 800112e:	2b01      	cmp	r3, #1
 8001130:	d107      	bne.n	8001142 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001132:	4b47      	ldr	r3, [pc, #284]	; (8001250 <HAL_RCC_ClockConfig+0x1bc>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800113a:	2b00      	cmp	r3, #0
 800113c:	d119      	bne.n	8001172 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800113e:	2301      	movs	r3, #1
 8001140:	e07f      	b.n	8001242 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	685b      	ldr	r3, [r3, #4]
 8001146:	2b02      	cmp	r3, #2
 8001148:	d003      	beq.n	8001152 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800114e:	2b03      	cmp	r3, #3
 8001150:	d107      	bne.n	8001162 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001152:	4b3f      	ldr	r3, [pc, #252]	; (8001250 <HAL_RCC_ClockConfig+0x1bc>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800115a:	2b00      	cmp	r3, #0
 800115c:	d109      	bne.n	8001172 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800115e:	2301      	movs	r3, #1
 8001160:	e06f      	b.n	8001242 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001162:	4b3b      	ldr	r3, [pc, #236]	; (8001250 <HAL_RCC_ClockConfig+0x1bc>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f003 0302 	and.w	r3, r3, #2
 800116a:	2b00      	cmp	r3, #0
 800116c:	d101      	bne.n	8001172 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800116e:	2301      	movs	r3, #1
 8001170:	e067      	b.n	8001242 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001172:	4b37      	ldr	r3, [pc, #220]	; (8001250 <HAL_RCC_ClockConfig+0x1bc>)
 8001174:	689b      	ldr	r3, [r3, #8]
 8001176:	f023 0203 	bic.w	r2, r3, #3
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	685b      	ldr	r3, [r3, #4]
 800117e:	4934      	ldr	r1, [pc, #208]	; (8001250 <HAL_RCC_ClockConfig+0x1bc>)
 8001180:	4313      	orrs	r3, r2
 8001182:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001184:	f7ff fbf0 	bl	8000968 <HAL_GetTick>
 8001188:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800118a:	e00a      	b.n	80011a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800118c:	f7ff fbec 	bl	8000968 <HAL_GetTick>
 8001190:	4602      	mov	r2, r0
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	1ad3      	subs	r3, r2, r3
 8001196:	f241 3288 	movw	r2, #5000	; 0x1388
 800119a:	4293      	cmp	r3, r2
 800119c:	d901      	bls.n	80011a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800119e:	2303      	movs	r3, #3
 80011a0:	e04f      	b.n	8001242 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80011a2:	4b2b      	ldr	r3, [pc, #172]	; (8001250 <HAL_RCC_ClockConfig+0x1bc>)
 80011a4:	689b      	ldr	r3, [r3, #8]
 80011a6:	f003 020c 	and.w	r2, r3, #12
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	685b      	ldr	r3, [r3, #4]
 80011ae:	009b      	lsls	r3, r3, #2
 80011b0:	429a      	cmp	r2, r3
 80011b2:	d1eb      	bne.n	800118c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80011b4:	4b25      	ldr	r3, [pc, #148]	; (800124c <HAL_RCC_ClockConfig+0x1b8>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	f003 0307 	and.w	r3, r3, #7
 80011bc:	683a      	ldr	r2, [r7, #0]
 80011be:	429a      	cmp	r2, r3
 80011c0:	d20c      	bcs.n	80011dc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011c2:	4b22      	ldr	r3, [pc, #136]	; (800124c <HAL_RCC_ClockConfig+0x1b8>)
 80011c4:	683a      	ldr	r2, [r7, #0]
 80011c6:	b2d2      	uxtb	r2, r2
 80011c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80011ca:	4b20      	ldr	r3, [pc, #128]	; (800124c <HAL_RCC_ClockConfig+0x1b8>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f003 0307 	and.w	r3, r3, #7
 80011d2:	683a      	ldr	r2, [r7, #0]
 80011d4:	429a      	cmp	r2, r3
 80011d6:	d001      	beq.n	80011dc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80011d8:	2301      	movs	r3, #1
 80011da:	e032      	b.n	8001242 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	f003 0304 	and.w	r3, r3, #4
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d008      	beq.n	80011fa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80011e8:	4b19      	ldr	r3, [pc, #100]	; (8001250 <HAL_RCC_ClockConfig+0x1bc>)
 80011ea:	689b      	ldr	r3, [r3, #8]
 80011ec:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	68db      	ldr	r3, [r3, #12]
 80011f4:	4916      	ldr	r1, [pc, #88]	; (8001250 <HAL_RCC_ClockConfig+0x1bc>)
 80011f6:	4313      	orrs	r3, r2
 80011f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f003 0308 	and.w	r3, r3, #8
 8001202:	2b00      	cmp	r3, #0
 8001204:	d009      	beq.n	800121a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001206:	4b12      	ldr	r3, [pc, #72]	; (8001250 <HAL_RCC_ClockConfig+0x1bc>)
 8001208:	689b      	ldr	r3, [r3, #8]
 800120a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	691b      	ldr	r3, [r3, #16]
 8001212:	00db      	lsls	r3, r3, #3
 8001214:	490e      	ldr	r1, [pc, #56]	; (8001250 <HAL_RCC_ClockConfig+0x1bc>)
 8001216:	4313      	orrs	r3, r2
 8001218:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800121a:	f000 f821 	bl	8001260 <HAL_RCC_GetSysClockFreq>
 800121e:	4602      	mov	r2, r0
 8001220:	4b0b      	ldr	r3, [pc, #44]	; (8001250 <HAL_RCC_ClockConfig+0x1bc>)
 8001222:	689b      	ldr	r3, [r3, #8]
 8001224:	091b      	lsrs	r3, r3, #4
 8001226:	f003 030f 	and.w	r3, r3, #15
 800122a:	490a      	ldr	r1, [pc, #40]	; (8001254 <HAL_RCC_ClockConfig+0x1c0>)
 800122c:	5ccb      	ldrb	r3, [r1, r3]
 800122e:	fa22 f303 	lsr.w	r3, r2, r3
 8001232:	4a09      	ldr	r2, [pc, #36]	; (8001258 <HAL_RCC_ClockConfig+0x1c4>)
 8001234:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001236:	4b09      	ldr	r3, [pc, #36]	; (800125c <HAL_RCC_ClockConfig+0x1c8>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	4618      	mov	r0, r3
 800123c:	f7ff fb50 	bl	80008e0 <HAL_InitTick>

  return HAL_OK;
 8001240:	2300      	movs	r3, #0
}
 8001242:	4618      	mov	r0, r3
 8001244:	3710      	adds	r7, #16
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	40023c00 	.word	0x40023c00
 8001250:	40023800 	.word	0x40023800
 8001254:	08001db0 	.word	0x08001db0
 8001258:	20000000 	.word	0x20000000
 800125c:	20000004 	.word	0x20000004

08001260 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001260:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001264:	b090      	sub	sp, #64	; 0x40
 8001266:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001268:	2300      	movs	r3, #0
 800126a:	637b      	str	r3, [r7, #52]	; 0x34
 800126c:	2300      	movs	r3, #0
 800126e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001270:	2300      	movs	r3, #0
 8001272:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8001274:	2300      	movs	r3, #0
 8001276:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001278:	4b59      	ldr	r3, [pc, #356]	; (80013e0 <HAL_RCC_GetSysClockFreq+0x180>)
 800127a:	689b      	ldr	r3, [r3, #8]
 800127c:	f003 030c 	and.w	r3, r3, #12
 8001280:	2b08      	cmp	r3, #8
 8001282:	d00d      	beq.n	80012a0 <HAL_RCC_GetSysClockFreq+0x40>
 8001284:	2b08      	cmp	r3, #8
 8001286:	f200 80a1 	bhi.w	80013cc <HAL_RCC_GetSysClockFreq+0x16c>
 800128a:	2b00      	cmp	r3, #0
 800128c:	d002      	beq.n	8001294 <HAL_RCC_GetSysClockFreq+0x34>
 800128e:	2b04      	cmp	r3, #4
 8001290:	d003      	beq.n	800129a <HAL_RCC_GetSysClockFreq+0x3a>
 8001292:	e09b      	b.n	80013cc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001294:	4b53      	ldr	r3, [pc, #332]	; (80013e4 <HAL_RCC_GetSysClockFreq+0x184>)
 8001296:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8001298:	e09b      	b.n	80013d2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800129a:	4b53      	ldr	r3, [pc, #332]	; (80013e8 <HAL_RCC_GetSysClockFreq+0x188>)
 800129c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800129e:	e098      	b.n	80013d2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80012a0:	4b4f      	ldr	r3, [pc, #316]	; (80013e0 <HAL_RCC_GetSysClockFreq+0x180>)
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80012a8:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80012aa:	4b4d      	ldr	r3, [pc, #308]	; (80013e0 <HAL_RCC_GetSysClockFreq+0x180>)
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d028      	beq.n	8001308 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80012b6:	4b4a      	ldr	r3, [pc, #296]	; (80013e0 <HAL_RCC_GetSysClockFreq+0x180>)
 80012b8:	685b      	ldr	r3, [r3, #4]
 80012ba:	099b      	lsrs	r3, r3, #6
 80012bc:	2200      	movs	r2, #0
 80012be:	623b      	str	r3, [r7, #32]
 80012c0:	627a      	str	r2, [r7, #36]	; 0x24
 80012c2:	6a3b      	ldr	r3, [r7, #32]
 80012c4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80012c8:	2100      	movs	r1, #0
 80012ca:	4b47      	ldr	r3, [pc, #284]	; (80013e8 <HAL_RCC_GetSysClockFreq+0x188>)
 80012cc:	fb03 f201 	mul.w	r2, r3, r1
 80012d0:	2300      	movs	r3, #0
 80012d2:	fb00 f303 	mul.w	r3, r0, r3
 80012d6:	4413      	add	r3, r2
 80012d8:	4a43      	ldr	r2, [pc, #268]	; (80013e8 <HAL_RCC_GetSysClockFreq+0x188>)
 80012da:	fba0 1202 	umull	r1, r2, r0, r2
 80012de:	62fa      	str	r2, [r7, #44]	; 0x2c
 80012e0:	460a      	mov	r2, r1
 80012e2:	62ba      	str	r2, [r7, #40]	; 0x28
 80012e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80012e6:	4413      	add	r3, r2
 80012e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80012ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012ec:	2200      	movs	r2, #0
 80012ee:	61bb      	str	r3, [r7, #24]
 80012f0:	61fa      	str	r2, [r7, #28]
 80012f2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80012f6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80012fa:	f7fe ff65 	bl	80001c8 <__aeabi_uldivmod>
 80012fe:	4602      	mov	r2, r0
 8001300:	460b      	mov	r3, r1
 8001302:	4613      	mov	r3, r2
 8001304:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001306:	e053      	b.n	80013b0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001308:	4b35      	ldr	r3, [pc, #212]	; (80013e0 <HAL_RCC_GetSysClockFreq+0x180>)
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	099b      	lsrs	r3, r3, #6
 800130e:	2200      	movs	r2, #0
 8001310:	613b      	str	r3, [r7, #16]
 8001312:	617a      	str	r2, [r7, #20]
 8001314:	693b      	ldr	r3, [r7, #16]
 8001316:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800131a:	f04f 0b00 	mov.w	fp, #0
 800131e:	4652      	mov	r2, sl
 8001320:	465b      	mov	r3, fp
 8001322:	f04f 0000 	mov.w	r0, #0
 8001326:	f04f 0100 	mov.w	r1, #0
 800132a:	0159      	lsls	r1, r3, #5
 800132c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001330:	0150      	lsls	r0, r2, #5
 8001332:	4602      	mov	r2, r0
 8001334:	460b      	mov	r3, r1
 8001336:	ebb2 080a 	subs.w	r8, r2, sl
 800133a:	eb63 090b 	sbc.w	r9, r3, fp
 800133e:	f04f 0200 	mov.w	r2, #0
 8001342:	f04f 0300 	mov.w	r3, #0
 8001346:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800134a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800134e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001352:	ebb2 0408 	subs.w	r4, r2, r8
 8001356:	eb63 0509 	sbc.w	r5, r3, r9
 800135a:	f04f 0200 	mov.w	r2, #0
 800135e:	f04f 0300 	mov.w	r3, #0
 8001362:	00eb      	lsls	r3, r5, #3
 8001364:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001368:	00e2      	lsls	r2, r4, #3
 800136a:	4614      	mov	r4, r2
 800136c:	461d      	mov	r5, r3
 800136e:	eb14 030a 	adds.w	r3, r4, sl
 8001372:	603b      	str	r3, [r7, #0]
 8001374:	eb45 030b 	adc.w	r3, r5, fp
 8001378:	607b      	str	r3, [r7, #4]
 800137a:	f04f 0200 	mov.w	r2, #0
 800137e:	f04f 0300 	mov.w	r3, #0
 8001382:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001386:	4629      	mov	r1, r5
 8001388:	028b      	lsls	r3, r1, #10
 800138a:	4621      	mov	r1, r4
 800138c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001390:	4621      	mov	r1, r4
 8001392:	028a      	lsls	r2, r1, #10
 8001394:	4610      	mov	r0, r2
 8001396:	4619      	mov	r1, r3
 8001398:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800139a:	2200      	movs	r2, #0
 800139c:	60bb      	str	r3, [r7, #8]
 800139e:	60fa      	str	r2, [r7, #12]
 80013a0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80013a4:	f7fe ff10 	bl	80001c8 <__aeabi_uldivmod>
 80013a8:	4602      	mov	r2, r0
 80013aa:	460b      	mov	r3, r1
 80013ac:	4613      	mov	r3, r2
 80013ae:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80013b0:	4b0b      	ldr	r3, [pc, #44]	; (80013e0 <HAL_RCC_GetSysClockFreq+0x180>)
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	0c1b      	lsrs	r3, r3, #16
 80013b6:	f003 0303 	and.w	r3, r3, #3
 80013ba:	3301      	adds	r3, #1
 80013bc:	005b      	lsls	r3, r3, #1
 80013be:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80013c0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80013c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80013c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80013c8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80013ca:	e002      	b.n	80013d2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80013cc:	4b05      	ldr	r3, [pc, #20]	; (80013e4 <HAL_RCC_GetSysClockFreq+0x184>)
 80013ce:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80013d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80013d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80013d4:	4618      	mov	r0, r3
 80013d6:	3740      	adds	r7, #64	; 0x40
 80013d8:	46bd      	mov	sp, r7
 80013da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80013de:	bf00      	nop
 80013e0:	40023800 	.word	0x40023800
 80013e4:	00f42400 	.word	0x00f42400
 80013e8:	017d7840 	.word	0x017d7840

080013ec <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b086      	sub	sp, #24
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80013f4:	2300      	movs	r3, #0
 80013f6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80013f8:	2300      	movs	r3, #0
 80013fa:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f003 0301 	and.w	r3, r3, #1
 8001404:	2b00      	cmp	r3, #0
 8001406:	d105      	bne.n	8001414 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8001410:	2b00      	cmp	r3, #0
 8001412:	d035      	beq.n	8001480 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8001414:	4b62      	ldr	r3, [pc, #392]	; (80015a0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8001416:	2200      	movs	r2, #0
 8001418:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800141a:	f7ff faa5 	bl	8000968 <HAL_GetTick>
 800141e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001420:	e008      	b.n	8001434 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001422:	f7ff faa1 	bl	8000968 <HAL_GetTick>
 8001426:	4602      	mov	r2, r0
 8001428:	697b      	ldr	r3, [r7, #20]
 800142a:	1ad3      	subs	r3, r2, r3
 800142c:	2b02      	cmp	r3, #2
 800142e:	d901      	bls.n	8001434 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001430:	2303      	movs	r3, #3
 8001432:	e0b0      	b.n	8001596 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001434:	4b5b      	ldr	r3, [pc, #364]	; (80015a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800143c:	2b00      	cmp	r3, #0
 800143e:	d1f0      	bne.n	8001422 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	019a      	lsls	r2, r3, #6
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	689b      	ldr	r3, [r3, #8]
 800144a:	071b      	lsls	r3, r3, #28
 800144c:	4955      	ldr	r1, [pc, #340]	; (80015a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800144e:	4313      	orrs	r3, r2
 8001450:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8001454:	4b52      	ldr	r3, [pc, #328]	; (80015a0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8001456:	2201      	movs	r2, #1
 8001458:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800145a:	f7ff fa85 	bl	8000968 <HAL_GetTick>
 800145e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001460:	e008      	b.n	8001474 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001462:	f7ff fa81 	bl	8000968 <HAL_GetTick>
 8001466:	4602      	mov	r2, r0
 8001468:	697b      	ldr	r3, [r7, #20]
 800146a:	1ad3      	subs	r3, r2, r3
 800146c:	2b02      	cmp	r3, #2
 800146e:	d901      	bls.n	8001474 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001470:	2303      	movs	r3, #3
 8001472:	e090      	b.n	8001596 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001474:	4b4b      	ldr	r3, [pc, #300]	; (80015a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800147c:	2b00      	cmp	r3, #0
 800147e:	d0f0      	beq.n	8001462 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f003 0302 	and.w	r3, r3, #2
 8001488:	2b00      	cmp	r3, #0
 800148a:	f000 8083 	beq.w	8001594 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800148e:	2300      	movs	r3, #0
 8001490:	60fb      	str	r3, [r7, #12]
 8001492:	4b44      	ldr	r3, [pc, #272]	; (80015a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001496:	4a43      	ldr	r2, [pc, #268]	; (80015a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001498:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800149c:	6413      	str	r3, [r2, #64]	; 0x40
 800149e:	4b41      	ldr	r3, [pc, #260]	; (80015a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80014a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014a6:	60fb      	str	r3, [r7, #12]
 80014a8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80014aa:	4b3f      	ldr	r3, [pc, #252]	; (80015a8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	4a3e      	ldr	r2, [pc, #248]	; (80015a8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80014b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014b4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80014b6:	f7ff fa57 	bl	8000968 <HAL_GetTick>
 80014ba:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80014bc:	e008      	b.n	80014d0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80014be:	f7ff fa53 	bl	8000968 <HAL_GetTick>
 80014c2:	4602      	mov	r2, r0
 80014c4:	697b      	ldr	r3, [r7, #20]
 80014c6:	1ad3      	subs	r3, r2, r3
 80014c8:	2b02      	cmp	r3, #2
 80014ca:	d901      	bls.n	80014d0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80014cc:	2303      	movs	r3, #3
 80014ce:	e062      	b.n	8001596 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80014d0:	4b35      	ldr	r3, [pc, #212]	; (80015a8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d0f0      	beq.n	80014be <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80014dc:	4b31      	ldr	r3, [pc, #196]	; (80015a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80014de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80014e4:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80014e6:	693b      	ldr	r3, [r7, #16]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d02f      	beq.n	800154c <HAL_RCCEx_PeriphCLKConfig+0x160>
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	68db      	ldr	r3, [r3, #12]
 80014f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80014f4:	693a      	ldr	r2, [r7, #16]
 80014f6:	429a      	cmp	r2, r3
 80014f8:	d028      	beq.n	800154c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80014fa:	4b2a      	ldr	r3, [pc, #168]	; (80015a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80014fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001502:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001504:	4b29      	ldr	r3, [pc, #164]	; (80015ac <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001506:	2201      	movs	r2, #1
 8001508:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800150a:	4b28      	ldr	r3, [pc, #160]	; (80015ac <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800150c:	2200      	movs	r2, #0
 800150e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8001510:	4a24      	ldr	r2, [pc, #144]	; (80015a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001512:	693b      	ldr	r3, [r7, #16]
 8001514:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001516:	4b23      	ldr	r3, [pc, #140]	; (80015a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001518:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800151a:	f003 0301 	and.w	r3, r3, #1
 800151e:	2b01      	cmp	r3, #1
 8001520:	d114      	bne.n	800154c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8001522:	f7ff fa21 	bl	8000968 <HAL_GetTick>
 8001526:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001528:	e00a      	b.n	8001540 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800152a:	f7ff fa1d 	bl	8000968 <HAL_GetTick>
 800152e:	4602      	mov	r2, r0
 8001530:	697b      	ldr	r3, [r7, #20]
 8001532:	1ad3      	subs	r3, r2, r3
 8001534:	f241 3288 	movw	r2, #5000	; 0x1388
 8001538:	4293      	cmp	r3, r2
 800153a:	d901      	bls.n	8001540 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 800153c:	2303      	movs	r3, #3
 800153e:	e02a      	b.n	8001596 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001540:	4b18      	ldr	r3, [pc, #96]	; (80015a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001542:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001544:	f003 0302 	and.w	r3, r3, #2
 8001548:	2b00      	cmp	r3, #0
 800154a:	d0ee      	beq.n	800152a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	68db      	ldr	r3, [r3, #12]
 8001550:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001554:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001558:	d10d      	bne.n	8001576 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800155a:	4b12      	ldr	r3, [pc, #72]	; (80015a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800155c:	689b      	ldr	r3, [r3, #8]
 800155e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	68db      	ldr	r3, [r3, #12]
 8001566:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800156a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800156e:	490d      	ldr	r1, [pc, #52]	; (80015a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001570:	4313      	orrs	r3, r2
 8001572:	608b      	str	r3, [r1, #8]
 8001574:	e005      	b.n	8001582 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8001576:	4b0b      	ldr	r3, [pc, #44]	; (80015a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001578:	689b      	ldr	r3, [r3, #8]
 800157a:	4a0a      	ldr	r2, [pc, #40]	; (80015a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800157c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8001580:	6093      	str	r3, [r2, #8]
 8001582:	4b08      	ldr	r3, [pc, #32]	; (80015a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001584:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	68db      	ldr	r3, [r3, #12]
 800158a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800158e:	4905      	ldr	r1, [pc, #20]	; (80015a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001590:	4313      	orrs	r3, r2
 8001592:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8001594:	2300      	movs	r3, #0
}
 8001596:	4618      	mov	r0, r3
 8001598:	3718      	adds	r7, #24
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	42470068 	.word	0x42470068
 80015a4:	40023800 	.word	0x40023800
 80015a8:	40007000 	.word	0x40007000
 80015ac:	42470e40 	.word	0x42470e40

080015b0 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b084      	sub	sp, #16
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80015b8:	2301      	movs	r3, #1
 80015ba:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d101      	bne.n	80015c6 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80015c2:	2301      	movs	r3, #1
 80015c4:	e066      	b.n	8001694 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	7f5b      	ldrb	r3, [r3, #29]
 80015ca:	b2db      	uxtb	r3, r3
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d105      	bne.n	80015dc <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	2200      	movs	r2, #0
 80015d4:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80015d6:	6878      	ldr	r0, [r7, #4]
 80015d8:	f7ff f8be 	bl	8000758 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	2202      	movs	r2, #2
 80015e0:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	22ca      	movs	r2, #202	; 0xca
 80015e8:	625a      	str	r2, [r3, #36]	; 0x24
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	2253      	movs	r2, #83	; 0x53
 80015f0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80015f2:	6878      	ldr	r0, [r7, #4]
 80015f4:	f000 fb20 	bl	8001c38 <RTC_EnterInitMode>
 80015f8:	4603      	mov	r3, r0
 80015fa:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80015fc:	7bfb      	ldrb	r3, [r7, #15]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d12c      	bne.n	800165c <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	689b      	ldr	r3, [r3, #8]
 8001608:	687a      	ldr	r2, [r7, #4]
 800160a:	6812      	ldr	r2, [r2, #0]
 800160c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8001610:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001614:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	6899      	ldr	r1, [r3, #8]
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	685a      	ldr	r2, [r3, #4]
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	691b      	ldr	r3, [r3, #16]
 8001624:	431a      	orrs	r2, r3
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	695b      	ldr	r3, [r3, #20]
 800162a:	431a      	orrs	r2, r3
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	430a      	orrs	r2, r1
 8001632:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	687a      	ldr	r2, [r7, #4]
 800163a:	68d2      	ldr	r2, [r2, #12]
 800163c:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	6919      	ldr	r1, [r3, #16]
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	689b      	ldr	r3, [r3, #8]
 8001648:	041a      	lsls	r2, r3, #16
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	430a      	orrs	r2, r1
 8001650:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8001652:	6878      	ldr	r0, [r7, #4]
 8001654:	f000 fb27 	bl	8001ca6 <RTC_ExitInitMode>
 8001658:	4603      	mov	r3, r0
 800165a:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800165c:	7bfb      	ldrb	r3, [r7, #15]
 800165e:	2b00      	cmp	r3, #0
 8001660:	d113      	bne.n	800168a <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001670:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	699a      	ldr	r2, [r3, #24]
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	430a      	orrs	r2, r1
 8001682:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	2201      	movs	r2, #1
 8001688:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	22ff      	movs	r2, #255	; 0xff
 8001690:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8001692:	7bfb      	ldrb	r3, [r7, #15]
}
 8001694:	4618      	mov	r0, r3
 8001696:	3710      	adds	r7, #16
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}

0800169c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800169c:	b590      	push	{r4, r7, lr}
 800169e:	b087      	sub	sp, #28
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	60f8      	str	r0, [r7, #12]
 80016a4:	60b9      	str	r1, [r7, #8]
 80016a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80016a8:	2300      	movs	r3, #0
 80016aa:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	7f1b      	ldrb	r3, [r3, #28]
 80016b0:	2b01      	cmp	r3, #1
 80016b2:	d101      	bne.n	80016b8 <HAL_RTC_SetTime+0x1c>
 80016b4:	2302      	movs	r3, #2
 80016b6:	e087      	b.n	80017c8 <HAL_RTC_SetTime+0x12c>
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	2201      	movs	r2, #1
 80016bc:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	2202      	movs	r2, #2
 80016c2:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d126      	bne.n	8001718 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	689b      	ldr	r3, [r3, #8]
 80016d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d102      	bne.n	80016de <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80016d8:	68bb      	ldr	r3, [r7, #8]
 80016da:	2200      	movs	r2, #0
 80016dc:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80016de:	68bb      	ldr	r3, [r7, #8]
 80016e0:	781b      	ldrb	r3, [r3, #0]
 80016e2:	4618      	mov	r0, r3
 80016e4:	f000 fb04 	bl	8001cf0 <RTC_ByteToBcd2>
 80016e8:	4603      	mov	r3, r0
 80016ea:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80016ec:	68bb      	ldr	r3, [r7, #8]
 80016ee:	785b      	ldrb	r3, [r3, #1]
 80016f0:	4618      	mov	r0, r3
 80016f2:	f000 fafd 	bl	8001cf0 <RTC_ByteToBcd2>
 80016f6:	4603      	mov	r3, r0
 80016f8:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80016fa:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 80016fc:	68bb      	ldr	r3, [r7, #8]
 80016fe:	789b      	ldrb	r3, [r3, #2]
 8001700:	4618      	mov	r0, r3
 8001702:	f000 faf5 	bl	8001cf0 <RTC_ByteToBcd2>
 8001706:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8001708:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 800170c:	68bb      	ldr	r3, [r7, #8]
 800170e:	78db      	ldrb	r3, [r3, #3]
 8001710:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8001712:	4313      	orrs	r3, r2
 8001714:	617b      	str	r3, [r7, #20]
 8001716:	e018      	b.n	800174a <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	689b      	ldr	r3, [r3, #8]
 800171e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001722:	2b00      	cmp	r3, #0
 8001724:	d102      	bne.n	800172c <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8001726:	68bb      	ldr	r3, [r7, #8]
 8001728:	2200      	movs	r2, #0
 800172a:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800172c:	68bb      	ldr	r3, [r7, #8]
 800172e:	781b      	ldrb	r3, [r3, #0]
 8001730:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8001732:	68bb      	ldr	r3, [r7, #8]
 8001734:	785b      	ldrb	r3, [r3, #1]
 8001736:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8001738:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 800173a:	68ba      	ldr	r2, [r7, #8]
 800173c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800173e:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8001740:	68bb      	ldr	r3, [r7, #8]
 8001742:	78db      	ldrb	r3, [r3, #3]
 8001744:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8001746:	4313      	orrs	r3, r2
 8001748:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	22ca      	movs	r2, #202	; 0xca
 8001750:	625a      	str	r2, [r3, #36]	; 0x24
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	2253      	movs	r2, #83	; 0x53
 8001758:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800175a:	68f8      	ldr	r0, [r7, #12]
 800175c:	f000 fa6c 	bl	8001c38 <RTC_EnterInitMode>
 8001760:	4603      	mov	r3, r0
 8001762:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8001764:	7cfb      	ldrb	r3, [r7, #19]
 8001766:	2b00      	cmp	r3, #0
 8001768:	d120      	bne.n	80017ac <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	681a      	ldr	r2, [r3, #0]
 800176e:	697b      	ldr	r3, [r7, #20]
 8001770:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8001774:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8001778:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	689a      	ldr	r2, [r3, #8]
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001788:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	6899      	ldr	r1, [r3, #8]
 8001790:	68bb      	ldr	r3, [r7, #8]
 8001792:	68da      	ldr	r2, [r3, #12]
 8001794:	68bb      	ldr	r3, [r7, #8]
 8001796:	691b      	ldr	r3, [r3, #16]
 8001798:	431a      	orrs	r2, r3
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	430a      	orrs	r2, r1
 80017a0:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80017a2:	68f8      	ldr	r0, [r7, #12]
 80017a4:	f000 fa7f 	bl	8001ca6 <RTC_ExitInitMode>
 80017a8:	4603      	mov	r3, r0
 80017aa:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80017ac:	7cfb      	ldrb	r3, [r7, #19]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d102      	bne.n	80017b8 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	2201      	movs	r2, #1
 80017b6:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	22ff      	movs	r2, #255	; 0xff
 80017be:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	2200      	movs	r2, #0
 80017c4:	771a      	strb	r2, [r3, #28]

  return status;
 80017c6:	7cfb      	ldrb	r3, [r7, #19]
}
 80017c8:	4618      	mov	r0, r3
 80017ca:	371c      	adds	r7, #28
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd90      	pop	{r4, r7, pc}

080017d0 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80017d0:	b590      	push	{r4, r7, lr}
 80017d2:	b087      	sub	sp, #28
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	60f8      	str	r0, [r7, #12]
 80017d8:	60b9      	str	r1, [r7, #8]
 80017da:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80017dc:	2300      	movs	r3, #0
 80017de:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	7f1b      	ldrb	r3, [r3, #28]
 80017e4:	2b01      	cmp	r3, #1
 80017e6:	d101      	bne.n	80017ec <HAL_RTC_SetDate+0x1c>
 80017e8:	2302      	movs	r3, #2
 80017ea:	e071      	b.n	80018d0 <HAL_RTC_SetDate+0x100>
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	2201      	movs	r2, #1
 80017f0:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	2202      	movs	r2, #2
 80017f6:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d10e      	bne.n	800181c <HAL_RTC_SetDate+0x4c>
 80017fe:	68bb      	ldr	r3, [r7, #8]
 8001800:	785b      	ldrb	r3, [r3, #1]
 8001802:	f003 0310 	and.w	r3, r3, #16
 8001806:	2b00      	cmp	r3, #0
 8001808:	d008      	beq.n	800181c <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800180a:	68bb      	ldr	r3, [r7, #8]
 800180c:	785b      	ldrb	r3, [r3, #1]
 800180e:	f023 0310 	bic.w	r3, r3, #16
 8001812:	b2db      	uxtb	r3, r3
 8001814:	330a      	adds	r3, #10
 8001816:	b2da      	uxtb	r2, r3
 8001818:	68bb      	ldr	r3, [r7, #8]
 800181a:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	2b00      	cmp	r3, #0
 8001820:	d11c      	bne.n	800185c <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8001822:	68bb      	ldr	r3, [r7, #8]
 8001824:	78db      	ldrb	r3, [r3, #3]
 8001826:	4618      	mov	r0, r3
 8001828:	f000 fa62 	bl	8001cf0 <RTC_ByteToBcd2>
 800182c:	4603      	mov	r3, r0
 800182e:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8001830:	68bb      	ldr	r3, [r7, #8]
 8001832:	785b      	ldrb	r3, [r3, #1]
 8001834:	4618      	mov	r0, r3
 8001836:	f000 fa5b 	bl	8001cf0 <RTC_ByteToBcd2>
 800183a:	4603      	mov	r3, r0
 800183c:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800183e:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8001840:	68bb      	ldr	r3, [r7, #8]
 8001842:	789b      	ldrb	r3, [r3, #2]
 8001844:	4618      	mov	r0, r3
 8001846:	f000 fa53 	bl	8001cf0 <RTC_ByteToBcd2>
 800184a:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800184c:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8001850:	68bb      	ldr	r3, [r7, #8]
 8001852:	781b      	ldrb	r3, [r3, #0]
 8001854:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8001856:	4313      	orrs	r3, r2
 8001858:	617b      	str	r3, [r7, #20]
 800185a:	e00e      	b.n	800187a <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800185c:	68bb      	ldr	r3, [r7, #8]
 800185e:	78db      	ldrb	r3, [r3, #3]
 8001860:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8001862:	68bb      	ldr	r3, [r7, #8]
 8001864:	785b      	ldrb	r3, [r3, #1]
 8001866:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8001868:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 800186a:	68ba      	ldr	r2, [r7, #8]
 800186c:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800186e:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8001870:	68bb      	ldr	r3, [r7, #8]
 8001872:	781b      	ldrb	r3, [r3, #0]
 8001874:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8001876:	4313      	orrs	r3, r2
 8001878:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	22ca      	movs	r2, #202	; 0xca
 8001880:	625a      	str	r2, [r3, #36]	; 0x24
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	2253      	movs	r2, #83	; 0x53
 8001888:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800188a:	68f8      	ldr	r0, [r7, #12]
 800188c:	f000 f9d4 	bl	8001c38 <RTC_EnterInitMode>
 8001890:	4603      	mov	r3, r0
 8001892:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8001894:	7cfb      	ldrb	r3, [r7, #19]
 8001896:	2b00      	cmp	r3, #0
 8001898:	d10c      	bne.n	80018b4 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	681a      	ldr	r2, [r3, #0]
 800189e:	697b      	ldr	r3, [r7, #20]
 80018a0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80018a4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80018a8:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80018aa:	68f8      	ldr	r0, [r7, #12]
 80018ac:	f000 f9fb 	bl	8001ca6 <RTC_ExitInitMode>
 80018b0:	4603      	mov	r3, r0
 80018b2:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80018b4:	7cfb      	ldrb	r3, [r7, #19]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d102      	bne.n	80018c0 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	2201      	movs	r2, #1
 80018be:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	22ff      	movs	r2, #255	; 0xff
 80018c6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	2200      	movs	r2, #0
 80018cc:	771a      	strb	r2, [r3, #28]

  return status;
 80018ce:	7cfb      	ldrb	r3, [r7, #19]
}
 80018d0:	4618      	mov	r0, r3
 80018d2:	371c      	adds	r7, #28
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd90      	pop	{r4, r7, pc}

080018d8 <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 80018d8:	b590      	push	{r4, r7, lr}
 80018da:	b089      	sub	sp, #36	; 0x24
 80018dc:	af00      	add	r7, sp, #0
 80018de:	60f8      	str	r0, [r7, #12]
 80018e0:	60b9      	str	r1, [r7, #8]
 80018e2:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 80018e4:	4b9a      	ldr	r3, [pc, #616]	; (8001b50 <HAL_RTC_SetAlarm_IT+0x278>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4a9a      	ldr	r2, [pc, #616]	; (8001b54 <HAL_RTC_SetAlarm_IT+0x27c>)
 80018ea:	fba2 2303 	umull	r2, r3, r2, r3
 80018ee:	0adb      	lsrs	r3, r3, #11
 80018f0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80018f4:	fb02 f303 	mul.w	r3, r2, r3
 80018f8:	617b      	str	r3, [r7, #20]
       uint32_t tmpreg = 0U;
 80018fa:	2300      	movs	r3, #0
 80018fc:	61fb      	str	r3, [r7, #28]
       uint32_t subsecondtmpreg = 0U;
 80018fe:	2300      	movs	r3, #0
 8001900:	61bb      	str	r3, [r7, #24]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	7f1b      	ldrb	r3, [r3, #28]
 8001906:	2b01      	cmp	r3, #1
 8001908:	d101      	bne.n	800190e <HAL_RTC_SetAlarm_IT+0x36>
 800190a:	2302      	movs	r3, #2
 800190c:	e11c      	b.n	8001b48 <HAL_RTC_SetAlarm_IT+0x270>
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	2201      	movs	r2, #1
 8001912:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	2202      	movs	r2, #2
 8001918:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	2b00      	cmp	r3, #0
 800191e:	d137      	bne.n	8001990 <HAL_RTC_SetAlarm_IT+0xb8>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	689b      	ldr	r3, [r3, #8]
 8001926:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800192a:	2b00      	cmp	r3, #0
 800192c:	d102      	bne.n	8001934 <HAL_RTC_SetAlarm_IT+0x5c>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800192e:	68bb      	ldr	r3, [r7, #8]
 8001930:	2200      	movs	r2, #0
 8001932:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8001934:	68bb      	ldr	r3, [r7, #8]
 8001936:	781b      	ldrb	r3, [r3, #0]
 8001938:	4618      	mov	r0, r3
 800193a:	f000 f9d9 	bl	8001cf0 <RTC_ByteToBcd2>
 800193e:	4603      	mov	r3, r0
 8001940:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8001942:	68bb      	ldr	r3, [r7, #8]
 8001944:	785b      	ldrb	r3, [r3, #1]
 8001946:	4618      	mov	r0, r3
 8001948:	f000 f9d2 	bl	8001cf0 <RTC_ByteToBcd2>
 800194c:	4603      	mov	r3, r0
 800194e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8001950:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8001952:	68bb      	ldr	r3, [r7, #8]
 8001954:	789b      	ldrb	r3, [r3, #2]
 8001956:	4618      	mov	r0, r3
 8001958:	f000 f9ca 	bl	8001cf0 <RTC_ByteToBcd2>
 800195c:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800195e:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8001962:	68bb      	ldr	r3, [r7, #8]
 8001964:	78db      	ldrb	r3, [r3, #3]
 8001966:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8001968:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 800196c:	68bb      	ldr	r3, [r7, #8]
 800196e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001972:	4618      	mov	r0, r3
 8001974:	f000 f9bc 	bl	8001cf0 <RTC_ByteToBcd2>
 8001978:	4603      	mov	r3, r0
 800197a:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 800197c:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 8001980:	68bb      	ldr	r3, [r7, #8]
 8001982:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8001984:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8001986:	68bb      	ldr	r3, [r7, #8]
 8001988:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 800198a:	4313      	orrs	r3, r2
 800198c:	61fb      	str	r3, [r7, #28]
 800198e:	e023      	b.n	80019d8 <HAL_RTC_SetAlarm_IT+0x100>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	689b      	ldr	r3, [r3, #8]
 8001996:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800199a:	2b00      	cmp	r3, #0
 800199c:	d102      	bne.n	80019a4 <HAL_RTC_SetAlarm_IT+0xcc>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800199e:	68bb      	ldr	r3, [r7, #8]
 80019a0:	2200      	movs	r2, #0
 80019a2:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 80019a4:	68bb      	ldr	r3, [r7, #8]
 80019a6:	781b      	ldrb	r3, [r3, #0]
 80019a8:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 80019aa:	68bb      	ldr	r3, [r7, #8]
 80019ac:	785b      	ldrb	r3, [r3, #1]
 80019ae:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 80019b0:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 80019b2:	68ba      	ldr	r2, [r7, #8]
 80019b4:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 80019b6:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 80019b8:	68bb      	ldr	r3, [r7, #8]
 80019ba:	78db      	ldrb	r3, [r3, #3]
 80019bc:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 80019be:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 80019c0:	68bb      	ldr	r3, [r7, #8]
 80019c2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80019c6:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 80019c8:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 80019ca:	68bb      	ldr	r3, [r7, #8]
 80019cc:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 80019ce:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 80019d0:	68bb      	ldr	r3, [r7, #8]
 80019d2:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 80019d4:	4313      	orrs	r3, r2
 80019d6:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 80019d8:	68bb      	ldr	r3, [r7, #8]
 80019da:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 80019dc:	68bb      	ldr	r3, [r7, #8]
 80019de:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 80019e0:	4313      	orrs	r3, r2
 80019e2:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	22ca      	movs	r2, #202	; 0xca
 80019ea:	625a      	str	r2, [r3, #36]	; 0x24
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	2253      	movs	r2, #83	; 0x53
 80019f2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 80019f4:	68bb      	ldr	r3, [r7, #8]
 80019f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80019fc:	d141      	bne.n	8001a82 <HAL_RTC_SetAlarm_IT+0x1aa>
  {
    /* Disable the Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	689a      	ldr	r2, [r3, #8]
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001a0c:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	68db      	ldr	r3, [r3, #12]
 8001a14:	b2da      	uxtb	r2, r3
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8001a1e:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    do
    {
      if (count-- == 0U)
 8001a20:	697b      	ldr	r3, [r7, #20]
 8001a22:	1e5a      	subs	r2, r3, #1
 8001a24:	617a      	str	r2, [r7, #20]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d10b      	bne.n	8001a42 <HAL_RTC_SetAlarm_IT+0x16a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	22ff      	movs	r2, #255	; 0xff
 8001a30:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	2203      	movs	r2, #3
 8001a36:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8001a3e:	2303      	movs	r3, #3
 8001a40:	e082      	b.n	8001b48 <HAL_RTC_SetAlarm_IT+0x270>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U);
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	68db      	ldr	r3, [r3, #12]
 8001a48:	f003 0301 	and.w	r3, r3, #1
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d0e7      	beq.n	8001a20 <HAL_RTC_SetAlarm_IT+0x148>

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	69fa      	ldr	r2, [r7, #28]
 8001a56:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	69ba      	ldr	r2, [r7, #24]
 8001a5e:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	689a      	ldr	r2, [r3, #8]
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001a6e:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	689a      	ldr	r2, [r3, #8]
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001a7e:	609a      	str	r2, [r3, #8]
 8001a80:	e04b      	b.n	8001b1a <HAL_RTC_SetAlarm_IT+0x242>
  }
  else
  {
    /* Disable the Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	689a      	ldr	r2, [r3, #8]
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001a90:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	68db      	ldr	r3, [r3, #12]
 8001a98:	b2da      	uxtb	r2, r3
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f462 7220 	orn	r2, r2, #640	; 0x280
 8001aa2:	60da      	str	r2, [r3, #12]

    /* Reload the counter */
    count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8001aa4:	4b2a      	ldr	r3, [pc, #168]	; (8001b50 <HAL_RTC_SetAlarm_IT+0x278>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4a2a      	ldr	r2, [pc, #168]	; (8001b54 <HAL_RTC_SetAlarm_IT+0x27c>)
 8001aaa:	fba2 2303 	umull	r2, r3, r2, r3
 8001aae:	0adb      	lsrs	r3, r3, #11
 8001ab0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001ab4:	fb02 f303 	mul.w	r3, r2, r3
 8001ab8:	617b      	str	r3, [r7, #20]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    do
    {
      if (count-- == 0U)
 8001aba:	697b      	ldr	r3, [r7, #20]
 8001abc:	1e5a      	subs	r2, r3, #1
 8001abe:	617a      	str	r2, [r7, #20]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d10b      	bne.n	8001adc <HAL_RTC_SetAlarm_IT+0x204>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	22ff      	movs	r2, #255	; 0xff
 8001aca:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	2203      	movs	r2, #3
 8001ad0:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8001ad8:	2303      	movs	r3, #3
 8001ada:	e035      	b.n	8001b48 <HAL_RTC_SetAlarm_IT+0x270>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U);
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	68db      	ldr	r3, [r3, #12]
 8001ae2:	f003 0302 	and.w	r3, r3, #2
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d0e7      	beq.n	8001aba <HAL_RTC_SetAlarm_IT+0x1e2>

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	69fa      	ldr	r2, [r7, #28]
 8001af0:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	69ba      	ldr	r2, [r7, #24]
 8001af8:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	689a      	ldr	r2, [r3, #8]
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b08:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	689a      	ldr	r2, [r3, #8]
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001b18:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8001b1a:	4b0f      	ldr	r3, [pc, #60]	; (8001b58 <HAL_RTC_SetAlarm_IT+0x280>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4a0e      	ldr	r2, [pc, #56]	; (8001b58 <HAL_RTC_SetAlarm_IT+0x280>)
 8001b20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b24:	6013      	str	r3, [r2, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8001b26:	4b0c      	ldr	r3, [pc, #48]	; (8001b58 <HAL_RTC_SetAlarm_IT+0x280>)
 8001b28:	689b      	ldr	r3, [r3, #8]
 8001b2a:	4a0b      	ldr	r2, [pc, #44]	; (8001b58 <HAL_RTC_SetAlarm_IT+0x280>)
 8001b2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b30:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	22ff      	movs	r2, #255	; 0xff
 8001b38:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	2201      	movs	r2, #1
 8001b3e:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	2200      	movs	r2, #0
 8001b44:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8001b46:	2300      	movs	r3, #0
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	3724      	adds	r7, #36	; 0x24
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd90      	pop	{r4, r7, pc}
 8001b50:	20000000 	.word	0x20000000
 8001b54:	10624dd3 	.word	0x10624dd3
 8001b58:	40013c00 	.word	0x40013c00

08001b5c <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b082      	sub	sp, #8
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  /* Get the Alarm A interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	689b      	ldr	r3, [r3, #8]
 8001b6a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d012      	beq.n	8001b98 <HAL_RTC_AlarmIRQHandler+0x3c>
  {
    /* Get the pending status of the Alarm A Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	68db      	ldr	r3, [r3, #12]
 8001b78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d00b      	beq.n	8001b98 <HAL_RTC_AlarmIRQHandler+0x3c>
    {
      /* Alarm A callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8001b80:	6878      	ldr	r0, [r7, #4]
 8001b82:	f7fe fc9f 	bl	80004c4 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Alarm A interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	68db      	ldr	r3, [r3, #12]
 8001b8c:	b2da      	uxtb	r2, r3
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8001b96:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the Alarm B interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	689b      	ldr	r3, [r3, #8]
 8001b9e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d012      	beq.n	8001bcc <HAL_RTC_AlarmIRQHandler+0x70>
  {
    /* Get the pending status of the Alarm B Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	68db      	ldr	r3, [r3, #12]
 8001bac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d00b      	beq.n	8001bcc <HAL_RTC_AlarmIRQHandler+0x70>
    {
      /* Alarm B callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8001bb4:	6878      	ldr	r0, [r7, #4]
 8001bb6:	f000 f8b8 	bl	8001d2a <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Alarm B interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	68db      	ldr	r3, [r3, #12]
 8001bc0:	b2da      	uxtb	r2, r3
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f462 7220 	orn	r2, r2, #640	; 0x280
 8001bca:	60da      	str	r2, [r3, #12]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8001bcc:	4b05      	ldr	r3, [pc, #20]	; (8001be4 <HAL_RTC_AlarmIRQHandler+0x88>)
 8001bce:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001bd2:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	775a      	strb	r2, [r3, #29]
}
 8001bda:	bf00      	nop
 8001bdc:	3708      	adds	r7, #8
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	bf00      	nop
 8001be4:	40013c00 	.word	0x40013c00

08001be8 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b084      	sub	sp, #16
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	68da      	ldr	r2, [r3, #12]
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001c02:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001c04:	f7fe feb0 	bl	8000968 <HAL_GetTick>
 8001c08:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8001c0a:	e009      	b.n	8001c20 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8001c0c:	f7fe feac 	bl	8000968 <HAL_GetTick>
 8001c10:	4602      	mov	r2, r0
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	1ad3      	subs	r3, r2, r3
 8001c16:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001c1a:	d901      	bls.n	8001c20 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8001c1c:	2303      	movs	r3, #3
 8001c1e:	e007      	b.n	8001c30 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	68db      	ldr	r3, [r3, #12]
 8001c26:	f003 0320 	and.w	r3, r3, #32
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d0ee      	beq.n	8001c0c <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8001c2e:	2300      	movs	r3, #0
}
 8001c30:	4618      	mov	r0, r3
 8001c32:	3710      	adds	r7, #16
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bd80      	pop	{r7, pc}

08001c38 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b084      	sub	sp, #16
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001c40:	2300      	movs	r3, #0
 8001c42:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8001c44:	2300      	movs	r3, #0
 8001c46:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	68db      	ldr	r3, [r3, #12]
 8001c4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d122      	bne.n	8001c9c <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	68da      	ldr	r2, [r3, #12]
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001c64:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001c66:	f7fe fe7f 	bl	8000968 <HAL_GetTick>
 8001c6a:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8001c6c:	e00c      	b.n	8001c88 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8001c6e:	f7fe fe7b 	bl	8000968 <HAL_GetTick>
 8001c72:	4602      	mov	r2, r0
 8001c74:	68bb      	ldr	r3, [r7, #8]
 8001c76:	1ad3      	subs	r3, r2, r3
 8001c78:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001c7c:	d904      	bls.n	8001c88 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	2204      	movs	r2, #4
 8001c82:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8001c84:	2301      	movs	r3, #1
 8001c86:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	68db      	ldr	r3, [r3, #12]
 8001c8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d102      	bne.n	8001c9c <RTC_EnterInitMode+0x64>
 8001c96:	7bfb      	ldrb	r3, [r7, #15]
 8001c98:	2b01      	cmp	r3, #1
 8001c9a:	d1e8      	bne.n	8001c6e <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8001c9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	3710      	adds	r7, #16
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}

08001ca6 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8001ca6:	b580      	push	{r7, lr}
 8001ca8:	b084      	sub	sp, #16
 8001caa:	af00      	add	r7, sp, #0
 8001cac:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	68da      	ldr	r2, [r3, #12]
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001cc0:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	689b      	ldr	r3, [r3, #8]
 8001cc8:	f003 0320 	and.w	r3, r3, #32
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d10a      	bne.n	8001ce6 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8001cd0:	6878      	ldr	r0, [r7, #4]
 8001cd2:	f7ff ff89 	bl	8001be8 <HAL_RTC_WaitForSynchro>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d004      	beq.n	8001ce6 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2204      	movs	r2, #4
 8001ce0:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8001ce6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ce8:	4618      	mov	r0, r3
 8001cea:	3710      	adds	r7, #16
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bd80      	pop	{r7, pc}

08001cf0 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b085      	sub	sp, #20
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 8001cfe:	e005      	b.n	8001d0c <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8001d00:	7bfb      	ldrb	r3, [r7, #15]
 8001d02:	3301      	adds	r3, #1
 8001d04:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 8001d06:	79fb      	ldrb	r3, [r7, #7]
 8001d08:	3b0a      	subs	r3, #10
 8001d0a:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8001d0c:	79fb      	ldrb	r3, [r7, #7]
 8001d0e:	2b09      	cmp	r3, #9
 8001d10:	d8f6      	bhi.n	8001d00 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8001d12:	7bfb      	ldrb	r3, [r7, #15]
 8001d14:	011b      	lsls	r3, r3, #4
 8001d16:	b2da      	uxtb	r2, r3
 8001d18:	79fb      	ldrb	r3, [r7, #7]
 8001d1a:	4313      	orrs	r3, r2
 8001d1c:	b2db      	uxtb	r3, r3
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	3714      	adds	r7, #20
 8001d22:	46bd      	mov	sp, r7
 8001d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d28:	4770      	bx	lr

08001d2a <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8001d2a:	b480      	push	{r7}
 8001d2c:	b083      	sub	sp, #12
 8001d2e:	af00      	add	r7, sp, #0
 8001d30:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8001d32:	bf00      	nop
 8001d34:	370c      	adds	r7, #12
 8001d36:	46bd      	mov	sp, r7
 8001d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3c:	4770      	bx	lr

08001d3e <memset>:
 8001d3e:	4402      	add	r2, r0
 8001d40:	4603      	mov	r3, r0
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d100      	bne.n	8001d48 <memset+0xa>
 8001d46:	4770      	bx	lr
 8001d48:	f803 1b01 	strb.w	r1, [r3], #1
 8001d4c:	e7f9      	b.n	8001d42 <memset+0x4>
	...

08001d50 <__libc_init_array>:
 8001d50:	b570      	push	{r4, r5, r6, lr}
 8001d52:	4d0d      	ldr	r5, [pc, #52]	; (8001d88 <__libc_init_array+0x38>)
 8001d54:	4c0d      	ldr	r4, [pc, #52]	; (8001d8c <__libc_init_array+0x3c>)
 8001d56:	1b64      	subs	r4, r4, r5
 8001d58:	10a4      	asrs	r4, r4, #2
 8001d5a:	2600      	movs	r6, #0
 8001d5c:	42a6      	cmp	r6, r4
 8001d5e:	d109      	bne.n	8001d74 <__libc_init_array+0x24>
 8001d60:	4d0b      	ldr	r5, [pc, #44]	; (8001d90 <__libc_init_array+0x40>)
 8001d62:	4c0c      	ldr	r4, [pc, #48]	; (8001d94 <__libc_init_array+0x44>)
 8001d64:	f000 f818 	bl	8001d98 <_init>
 8001d68:	1b64      	subs	r4, r4, r5
 8001d6a:	10a4      	asrs	r4, r4, #2
 8001d6c:	2600      	movs	r6, #0
 8001d6e:	42a6      	cmp	r6, r4
 8001d70:	d105      	bne.n	8001d7e <__libc_init_array+0x2e>
 8001d72:	bd70      	pop	{r4, r5, r6, pc}
 8001d74:	f855 3b04 	ldr.w	r3, [r5], #4
 8001d78:	4798      	blx	r3
 8001d7a:	3601      	adds	r6, #1
 8001d7c:	e7ee      	b.n	8001d5c <__libc_init_array+0xc>
 8001d7e:	f855 3b04 	ldr.w	r3, [r5], #4
 8001d82:	4798      	blx	r3
 8001d84:	3601      	adds	r6, #1
 8001d86:	e7f2      	b.n	8001d6e <__libc_init_array+0x1e>
 8001d88:	08001dc8 	.word	0x08001dc8
 8001d8c:	08001dc8 	.word	0x08001dc8
 8001d90:	08001dc8 	.word	0x08001dc8
 8001d94:	08001dcc 	.word	0x08001dcc

08001d98 <_init>:
 8001d98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d9a:	bf00      	nop
 8001d9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001d9e:	bc08      	pop	{r3}
 8001da0:	469e      	mov	lr, r3
 8001da2:	4770      	bx	lr

08001da4 <_fini>:
 8001da4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001da6:	bf00      	nop
 8001da8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001daa:	bc08      	pop	{r3}
 8001dac:	469e      	mov	lr, r3
 8001dae:	4770      	bx	lr
