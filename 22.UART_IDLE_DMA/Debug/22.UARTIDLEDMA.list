
22.UARTIDLEDMA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003168  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  080032f0  080032f0  000132f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003310  08003310  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003310  08003310  00013310  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003318  08003318  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003318  08003318  00013318  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800331c  0800331c  0001331c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003320  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          000000d0  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200000dc  200000dc  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 14 .debug_info   000082c1  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001660  00000000  00000000  00028340  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000006b8  00000000  00000000  000299a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000523  00000000  00000000  0002a058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001fe63  00000000  00000000  0002a57b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00008ac2  00000000  00000000  0004a3de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c2158  00000000  00000000  00052ea0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00001a7c  00000000  00000000  00114ff8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000062  00000000  00000000  00116a74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080032d8 	.word	0x080032d8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080032d8 	.word	0x080032d8

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b970 	b.w	80004c0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	460f      	mov	r7, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4694      	mov	ip, r2
 800020c:	d965      	bls.n	80002da <__udivmoddi4+0xe2>
 800020e:	fab2 f382 	clz	r3, r2
 8000212:	b143      	cbz	r3, 8000226 <__udivmoddi4+0x2e>
 8000214:	fa02 fc03 	lsl.w	ip, r2, r3
 8000218:	f1c3 0220 	rsb	r2, r3, #32
 800021c:	409f      	lsls	r7, r3
 800021e:	fa20 f202 	lsr.w	r2, r0, r2
 8000222:	4317      	orrs	r7, r2
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022a:	fa1f f58c 	uxth.w	r5, ip
 800022e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000232:	0c22      	lsrs	r2, r4, #16
 8000234:	fb0e 7711 	mls	r7, lr, r1, r7
 8000238:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800023c:	fb01 f005 	mul.w	r0, r1, r5
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x62>
 8000244:	eb1c 0202 	adds.w	r2, ip, r2
 8000248:	f101 37ff 	add.w	r7, r1, #4294967295
 800024c:	f080 811c 	bcs.w	8000488 <__udivmoddi4+0x290>
 8000250:	4290      	cmp	r0, r2
 8000252:	f240 8119 	bls.w	8000488 <__udivmoddi4+0x290>
 8000256:	3902      	subs	r1, #2
 8000258:	4462      	add	r2, ip
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	b2a4      	uxth	r4, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026a:	fb00 f505 	mul.w	r5, r0, r5
 800026e:	42a5      	cmp	r5, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x90>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 32ff 	add.w	r2, r0, #4294967295
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x294>
 800027e:	42a5      	cmp	r5, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x294>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028c:	1b64      	subs	r4, r4, r5
 800028e:	2100      	movs	r1, #0
 8000290:	b11e      	cbz	r6, 800029a <__udivmoddi4+0xa2>
 8000292:	40dc      	lsrs	r4, r3
 8000294:	2300      	movs	r3, #0
 8000296:	e9c6 4300 	strd	r4, r3, [r6]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d908      	bls.n	80002b4 <__udivmoddi4+0xbc>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80ed 	beq.w	8000482 <__udivmoddi4+0x28a>
 80002a8:	2100      	movs	r1, #0
 80002aa:	e9c6 0500 	strd	r0, r5, [r6]
 80002ae:	4608      	mov	r0, r1
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	fab3 f183 	clz	r1, r3
 80002b8:	2900      	cmp	r1, #0
 80002ba:	d149      	bne.n	8000350 <__udivmoddi4+0x158>
 80002bc:	42ab      	cmp	r3, r5
 80002be:	d302      	bcc.n	80002c6 <__udivmoddi4+0xce>
 80002c0:	4282      	cmp	r2, r0
 80002c2:	f200 80f8 	bhi.w	80004b6 <__udivmoddi4+0x2be>
 80002c6:	1a84      	subs	r4, r0, r2
 80002c8:	eb65 0203 	sbc.w	r2, r5, r3
 80002cc:	2001      	movs	r0, #1
 80002ce:	4617      	mov	r7, r2
 80002d0:	2e00      	cmp	r6, #0
 80002d2:	d0e2      	beq.n	800029a <__udivmoddi4+0xa2>
 80002d4:	e9c6 4700 	strd	r4, r7, [r6]
 80002d8:	e7df      	b.n	800029a <__udivmoddi4+0xa2>
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xe6>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x210>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ee:	fa1f fe8c 	uxth.w	lr, ip
 80002f2:	2101      	movs	r1, #1
 80002f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80002f8:	fb07 2015 	mls	r0, r7, r5, r2
 80002fc:	0c22      	lsrs	r2, r4, #16
 80002fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000302:	fb0e f005 	mul.w	r0, lr, r5
 8000306:	4290      	cmp	r0, r2
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x124>
 800030a:	eb1c 0202 	adds.w	r2, ip, r2
 800030e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4290      	cmp	r0, r2
 8000316:	f200 80cb 	bhi.w	80004b0 <__udivmoddi4+0x2b8>
 800031a:	4645      	mov	r5, r8
 800031c:	1a12      	subs	r2, r2, r0
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb2 f0f7 	udiv	r0, r2, r7
 8000324:	fb07 2210 	mls	r2, r7, r0, r2
 8000328:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032c:	fb0e fe00 	mul.w	lr, lr, r0
 8000330:	45a6      	cmp	lr, r4
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x14e>
 8000334:	eb1c 0404 	adds.w	r4, ip, r4
 8000338:	f100 32ff 	add.w	r2, r0, #4294967295
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x14c>
 800033e:	45a6      	cmp	lr, r4
 8000340:	f200 80bb 	bhi.w	80004ba <__udivmoddi4+0x2c2>
 8000344:	4610      	mov	r0, r2
 8000346:	eba4 040e 	sub.w	r4, r4, lr
 800034a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800034e:	e79f      	b.n	8000290 <__udivmoddi4+0x98>
 8000350:	f1c1 0720 	rsb	r7, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 fc07 	lsr.w	ip, r2, r7
 800035a:	ea4c 0c03 	orr.w	ip, ip, r3
 800035e:	fa05 f401 	lsl.w	r4, r5, r1
 8000362:	fa20 f307 	lsr.w	r3, r0, r7
 8000366:	40fd      	lsrs	r5, r7
 8000368:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000372:	fa1f fe8c 	uxth.w	lr, ip
 8000376:	fb09 5518 	mls	r5, r9, r8, r5
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000380:	fb08 f50e 	mul.w	r5, r8, lr
 8000384:	42a5      	cmp	r5, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	fa00 f001 	lsl.w	r0, r0, r1
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1c 0404 	adds.w	r4, ip, r4
 8000394:	f108 3aff 	add.w	sl, r8, #4294967295
 8000398:	f080 8088 	bcs.w	80004ac <__udivmoddi4+0x2b4>
 800039c:	42a5      	cmp	r5, r4
 800039e:	f240 8085 	bls.w	80004ac <__udivmoddi4+0x2b4>
 80003a2:	f1a8 0802 	sub.w	r8, r8, #2
 80003a6:	4464      	add	r4, ip
 80003a8:	1b64      	subs	r4, r4, r5
 80003aa:	b29d      	uxth	r5, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003bc:	45a6      	cmp	lr, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1c 0404 	adds.w	r4, ip, r4
 80003c4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003c8:	d26c      	bcs.n	80004a4 <__udivmoddi4+0x2ac>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	d96a      	bls.n	80004a4 <__udivmoddi4+0x2ac>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	4464      	add	r4, ip
 80003d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003d6:	fba3 9502 	umull	r9, r5, r3, r2
 80003da:	eba4 040e 	sub.w	r4, r4, lr
 80003de:	42ac      	cmp	r4, r5
 80003e0:	46c8      	mov	r8, r9
 80003e2:	46ae      	mov	lr, r5
 80003e4:	d356      	bcc.n	8000494 <__udivmoddi4+0x29c>
 80003e6:	d053      	beq.n	8000490 <__udivmoddi4+0x298>
 80003e8:	b156      	cbz	r6, 8000400 <__udivmoddi4+0x208>
 80003ea:	ebb0 0208 	subs.w	r2, r0, r8
 80003ee:	eb64 040e 	sbc.w	r4, r4, lr
 80003f2:	fa04 f707 	lsl.w	r7, r4, r7
 80003f6:	40ca      	lsrs	r2, r1
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	4317      	orrs	r7, r2
 80003fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000400:	4618      	mov	r0, r3
 8000402:	2100      	movs	r1, #0
 8000404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000408:	f1c3 0120 	rsb	r1, r3, #32
 800040c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000410:	fa20 f201 	lsr.w	r2, r0, r1
 8000414:	fa25 f101 	lsr.w	r1, r5, r1
 8000418:	409d      	lsls	r5, r3
 800041a:	432a      	orrs	r2, r5
 800041c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000420:	fa1f fe8c 	uxth.w	lr, ip
 8000424:	fbb1 f0f7 	udiv	r0, r1, r7
 8000428:	fb07 1510 	mls	r5, r7, r0, r1
 800042c:	0c11      	lsrs	r1, r2, #16
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	fb00 f50e 	mul.w	r5, r0, lr
 8000436:	428d      	cmp	r5, r1
 8000438:	fa04 f403 	lsl.w	r4, r4, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x258>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f100 38ff 	add.w	r8, r0, #4294967295
 8000446:	d22f      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 8000448:	428d      	cmp	r5, r1
 800044a:	d92d      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800044c:	3802      	subs	r0, #2
 800044e:	4461      	add	r1, ip
 8000450:	1b49      	subs	r1, r1, r5
 8000452:	b292      	uxth	r2, r2
 8000454:	fbb1 f5f7 	udiv	r5, r1, r7
 8000458:	fb07 1115 	mls	r1, r7, r5, r1
 800045c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000460:	fb05 f10e 	mul.w	r1, r5, lr
 8000464:	4291      	cmp	r1, r2
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x282>
 8000468:	eb1c 0202 	adds.w	r2, ip, r2
 800046c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000470:	d216      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 8000472:	4291      	cmp	r1, r2
 8000474:	d914      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000476:	3d02      	subs	r5, #2
 8000478:	4462      	add	r2, ip
 800047a:	1a52      	subs	r2, r2, r1
 800047c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000480:	e738      	b.n	80002f4 <__udivmoddi4+0xfc>
 8000482:	4631      	mov	r1, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e708      	b.n	800029a <__udivmoddi4+0xa2>
 8000488:	4639      	mov	r1, r7
 800048a:	e6e6      	b.n	800025a <__udivmoddi4+0x62>
 800048c:	4610      	mov	r0, r2
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x90>
 8000490:	4548      	cmp	r0, r9
 8000492:	d2a9      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000494:	ebb9 0802 	subs.w	r8, r9, r2
 8000498:	eb65 0e0c 	sbc.w	lr, r5, ip
 800049c:	3b01      	subs	r3, #1
 800049e:	e7a3      	b.n	80003e8 <__udivmoddi4+0x1f0>
 80004a0:	4645      	mov	r5, r8
 80004a2:	e7ea      	b.n	800047a <__udivmoddi4+0x282>
 80004a4:	462b      	mov	r3, r5
 80004a6:	e794      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a8:	4640      	mov	r0, r8
 80004aa:	e7d1      	b.n	8000450 <__udivmoddi4+0x258>
 80004ac:	46d0      	mov	r8, sl
 80004ae:	e77b      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004b0:	3d02      	subs	r5, #2
 80004b2:	4462      	add	r2, ip
 80004b4:	e732      	b.n	800031c <__udivmoddi4+0x124>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e70a      	b.n	80002d0 <__udivmoddi4+0xd8>
 80004ba:	4464      	add	r4, ip
 80004bc:	3802      	subs	r0, #2
 80004be:	e742      	b.n	8000346 <__udivmoddi4+0x14e>

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <HAL_UARTEx_RxEventCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b082      	sub	sp, #8
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	6078      	str	r0, [r7, #4]
 80004cc:	460b      	mov	r3, r1
 80004ce:	807b      	strh	r3, [r7, #2]
	HAL_UARTEx_ReceiveToIdle_DMA(&huart2, rxBuffer, RX_SIZE);
 80004d0:	220a      	movs	r2, #10
 80004d2:	490a      	ldr	r1, [pc, #40]	; (80004fc <HAL_UARTEx_RxEventCallback+0x38>)
 80004d4:	480a      	ldr	r0, [pc, #40]	; (8000500 <HAL_UARTEx_RxEventCallback+0x3c>)
 80004d6:	f001 fdec 	bl	80020b2 <HAL_UARTEx_ReceiveToIdle_DMA>
	__HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 80004da:	4b0a      	ldr	r3, [pc, #40]	; (8000504 <HAL_UARTEx_RxEventCallback+0x40>)
 80004dc:	681b      	ldr	r3, [r3, #0]
 80004de:	681a      	ldr	r2, [r3, #0]
 80004e0:	4b08      	ldr	r3, [pc, #32]	; (8000504 <HAL_UARTEx_RxEventCallback+0x40>)
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	f022 0208 	bic.w	r2, r2, #8
 80004e8:	601a      	str	r2, [r3, #0]
	size = Size;
 80004ea:	887b      	ldrh	r3, [r7, #2]
 80004ec:	b2da      	uxtb	r2, r3
 80004ee:	4b06      	ldr	r3, [pc, #24]	; (8000508 <HAL_UARTEx_RxEventCallback+0x44>)
 80004f0:	701a      	strb	r2, [r3, #0]
}
 80004f2:	bf00      	nop
 80004f4:	3708      	adds	r7, #8
 80004f6:	46bd      	mov	sp, r7
 80004f8:	bd80      	pop	{r7, pc}
 80004fa:	bf00      	nop
 80004fc:	200000cc 	.word	0x200000cc
 8000500:	20000028 	.word	0x20000028
 8000504:	2000006c 	.word	0x2000006c
 8000508:	200000d6 	.word	0x200000d6

0800050c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000510:	f000 fa08 	bl	8000924 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000514:	f000 f81a 	bl	800054c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000518:	f000 f8c0 	bl	800069c <MX_GPIO_Init>
  MX_DMA_Init();
 800051c:	f000 f89e 	bl	800065c <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000520:	f000 f872 	bl	8000608 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UARTEx_ReceiveToIdle_DMA(&huart2, rxBuffer, RX_SIZE);
 8000524:	220a      	movs	r2, #10
 8000526:	4906      	ldr	r1, [pc, #24]	; (8000540 <main+0x34>)
 8000528:	4806      	ldr	r0, [pc, #24]	; (8000544 <main+0x38>)
 800052a:	f001 fdc2 	bl	80020b2 <HAL_UARTEx_ReceiveToIdle_DMA>
  	__HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 800052e:	4b06      	ldr	r3, [pc, #24]	; (8000548 <main+0x3c>)
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	681a      	ldr	r2, [r3, #0]
 8000534:	4b04      	ldr	r3, [pc, #16]	; (8000548 <main+0x3c>)
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	f022 0208 	bic.w	r2, r2, #8
 800053c:	601a      	str	r2, [r3, #0]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800053e:	e7fe      	b.n	800053e <main+0x32>
 8000540:	200000cc 	.word	0x200000cc
 8000544:	20000028 	.word	0x20000028
 8000548:	2000006c 	.word	0x2000006c

0800054c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b094      	sub	sp, #80	; 0x50
 8000550:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000552:	f107 0320 	add.w	r3, r7, #32
 8000556:	2230      	movs	r2, #48	; 0x30
 8000558:	2100      	movs	r1, #0
 800055a:	4618      	mov	r0, r3
 800055c:	f002 fe90 	bl	8003280 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000560:	f107 030c 	add.w	r3, r7, #12
 8000564:	2200      	movs	r2, #0
 8000566:	601a      	str	r2, [r3, #0]
 8000568:	605a      	str	r2, [r3, #4]
 800056a:	609a      	str	r2, [r3, #8]
 800056c:	60da      	str	r2, [r3, #12]
 800056e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000570:	2300      	movs	r3, #0
 8000572:	60bb      	str	r3, [r7, #8]
 8000574:	4b22      	ldr	r3, [pc, #136]	; (8000600 <SystemClock_Config+0xb4>)
 8000576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000578:	4a21      	ldr	r2, [pc, #132]	; (8000600 <SystemClock_Config+0xb4>)
 800057a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800057e:	6413      	str	r3, [r2, #64]	; 0x40
 8000580:	4b1f      	ldr	r3, [pc, #124]	; (8000600 <SystemClock_Config+0xb4>)
 8000582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000584:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000588:	60bb      	str	r3, [r7, #8]
 800058a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800058c:	2300      	movs	r3, #0
 800058e:	607b      	str	r3, [r7, #4]
 8000590:	4b1c      	ldr	r3, [pc, #112]	; (8000604 <SystemClock_Config+0xb8>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	4a1b      	ldr	r2, [pc, #108]	; (8000604 <SystemClock_Config+0xb8>)
 8000596:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800059a:	6013      	str	r3, [r2, #0]
 800059c:	4b19      	ldr	r3, [pc, #100]	; (8000604 <SystemClock_Config+0xb8>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005a4:	607b      	str	r3, [r7, #4]
 80005a6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005a8:	2302      	movs	r3, #2
 80005aa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005ac:	2301      	movs	r3, #1
 80005ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005b0:	2310      	movs	r3, #16
 80005b2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005b4:	2300      	movs	r3, #0
 80005b6:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005b8:	f107 0320 	add.w	r3, r7, #32
 80005bc:	4618      	mov	r0, r3
 80005be:	f001 f8d3 	bl	8001768 <HAL_RCC_OscConfig>
 80005c2:	4603      	mov	r3, r0
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d001      	beq.n	80005cc <SystemClock_Config+0x80>
  {
    Error_Handler();
 80005c8:	f000 f882 	bl	80006d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005cc:	230f      	movs	r3, #15
 80005ce:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005d0:	2300      	movs	r3, #0
 80005d2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005d4:	2300      	movs	r3, #0
 80005d6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005d8:	2300      	movs	r3, #0
 80005da:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005dc:	2300      	movs	r3, #0
 80005de:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005e0:	f107 030c 	add.w	r3, r7, #12
 80005e4:	2100      	movs	r1, #0
 80005e6:	4618      	mov	r0, r3
 80005e8:	f001 fb36 	bl	8001c58 <HAL_RCC_ClockConfig>
 80005ec:	4603      	mov	r3, r0
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d001      	beq.n	80005f6 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80005f2:	f000 f86d 	bl	80006d0 <Error_Handler>
  }
}
 80005f6:	bf00      	nop
 80005f8:	3750      	adds	r7, #80	; 0x50
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	40023800 	.word	0x40023800
 8000604:	40007000 	.word	0x40007000

08000608 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800060c:	4b11      	ldr	r3, [pc, #68]	; (8000654 <MX_USART2_UART_Init+0x4c>)
 800060e:	4a12      	ldr	r2, [pc, #72]	; (8000658 <MX_USART2_UART_Init+0x50>)
 8000610:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000612:	4b10      	ldr	r3, [pc, #64]	; (8000654 <MX_USART2_UART_Init+0x4c>)
 8000614:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000618:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800061a:	4b0e      	ldr	r3, [pc, #56]	; (8000654 <MX_USART2_UART_Init+0x4c>)
 800061c:	2200      	movs	r2, #0
 800061e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000620:	4b0c      	ldr	r3, [pc, #48]	; (8000654 <MX_USART2_UART_Init+0x4c>)
 8000622:	2200      	movs	r2, #0
 8000624:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000626:	4b0b      	ldr	r3, [pc, #44]	; (8000654 <MX_USART2_UART_Init+0x4c>)
 8000628:	2200      	movs	r2, #0
 800062a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800062c:	4b09      	ldr	r3, [pc, #36]	; (8000654 <MX_USART2_UART_Init+0x4c>)
 800062e:	220c      	movs	r2, #12
 8000630:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000632:	4b08      	ldr	r3, [pc, #32]	; (8000654 <MX_USART2_UART_Init+0x4c>)
 8000634:	2200      	movs	r2, #0
 8000636:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000638:	4b06      	ldr	r3, [pc, #24]	; (8000654 <MX_USART2_UART_Init+0x4c>)
 800063a:	2200      	movs	r2, #0
 800063c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800063e:	4805      	ldr	r0, [pc, #20]	; (8000654 <MX_USART2_UART_Init+0x4c>)
 8000640:	f001 fcea 	bl	8002018 <HAL_UART_Init>
 8000644:	4603      	mov	r3, r0
 8000646:	2b00      	cmp	r3, #0
 8000648:	d001      	beq.n	800064e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800064a:	f000 f841 	bl	80006d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800064e:	bf00      	nop
 8000650:	bd80      	pop	{r7, pc}
 8000652:	bf00      	nop
 8000654:	20000028 	.word	0x20000028
 8000658:	40004400 	.word	0x40004400

0800065c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b082      	sub	sp, #8
 8000660:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000662:	2300      	movs	r3, #0
 8000664:	607b      	str	r3, [r7, #4]
 8000666:	4b0c      	ldr	r3, [pc, #48]	; (8000698 <MX_DMA_Init+0x3c>)
 8000668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066a:	4a0b      	ldr	r2, [pc, #44]	; (8000698 <MX_DMA_Init+0x3c>)
 800066c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000670:	6313      	str	r3, [r2, #48]	; 0x30
 8000672:	4b09      	ldr	r3, [pc, #36]	; (8000698 <MX_DMA_Init+0x3c>)
 8000674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000676:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800067a:	607b      	str	r3, [r7, #4]
 800067c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800067e:	2200      	movs	r2, #0
 8000680:	2100      	movs	r1, #0
 8000682:	2010      	movs	r0, #16
 8000684:	f000 fa9b 	bl	8000bbe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000688:	2010      	movs	r0, #16
 800068a:	f000 fab4 	bl	8000bf6 <HAL_NVIC_EnableIRQ>

}
 800068e:	bf00      	nop
 8000690:	3708      	adds	r7, #8
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	40023800 	.word	0x40023800

0800069c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800069c:	b480      	push	{r7}
 800069e:	b083      	sub	sp, #12
 80006a0:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006a2:	2300      	movs	r3, #0
 80006a4:	607b      	str	r3, [r7, #4]
 80006a6:	4b09      	ldr	r3, [pc, #36]	; (80006cc <MX_GPIO_Init+0x30>)
 80006a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006aa:	4a08      	ldr	r2, [pc, #32]	; (80006cc <MX_GPIO_Init+0x30>)
 80006ac:	f043 0301 	orr.w	r3, r3, #1
 80006b0:	6313      	str	r3, [r2, #48]	; 0x30
 80006b2:	4b06      	ldr	r3, [pc, #24]	; (80006cc <MX_GPIO_Init+0x30>)
 80006b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b6:	f003 0301 	and.w	r3, r3, #1
 80006ba:	607b      	str	r3, [r7, #4]
 80006bc:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80006be:	bf00      	nop
 80006c0:	370c      	adds	r7, #12
 80006c2:	46bd      	mov	sp, r7
 80006c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c8:	4770      	bx	lr
 80006ca:	bf00      	nop
 80006cc:	40023800 	.word	0x40023800

080006d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006d0:	b480      	push	{r7}
 80006d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006d4:	b672      	cpsid	i
}
 80006d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006d8:	e7fe      	b.n	80006d8 <Error_Handler+0x8>
	...

080006dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006dc:	b480      	push	{r7}
 80006de:	b083      	sub	sp, #12
 80006e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006e2:	2300      	movs	r3, #0
 80006e4:	607b      	str	r3, [r7, #4]
 80006e6:	4b10      	ldr	r3, [pc, #64]	; (8000728 <HAL_MspInit+0x4c>)
 80006e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006ea:	4a0f      	ldr	r2, [pc, #60]	; (8000728 <HAL_MspInit+0x4c>)
 80006ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006f0:	6453      	str	r3, [r2, #68]	; 0x44
 80006f2:	4b0d      	ldr	r3, [pc, #52]	; (8000728 <HAL_MspInit+0x4c>)
 80006f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006fa:	607b      	str	r3, [r7, #4]
 80006fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006fe:	2300      	movs	r3, #0
 8000700:	603b      	str	r3, [r7, #0]
 8000702:	4b09      	ldr	r3, [pc, #36]	; (8000728 <HAL_MspInit+0x4c>)
 8000704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000706:	4a08      	ldr	r2, [pc, #32]	; (8000728 <HAL_MspInit+0x4c>)
 8000708:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800070c:	6413      	str	r3, [r2, #64]	; 0x40
 800070e:	4b06      	ldr	r3, [pc, #24]	; (8000728 <HAL_MspInit+0x4c>)
 8000710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000712:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000716:	603b      	str	r3, [r7, #0]
 8000718:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800071a:	bf00      	nop
 800071c:	370c      	adds	r7, #12
 800071e:	46bd      	mov	sp, r7
 8000720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000724:	4770      	bx	lr
 8000726:	bf00      	nop
 8000728:	40023800 	.word	0x40023800

0800072c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b08a      	sub	sp, #40	; 0x28
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000734:	f107 0314 	add.w	r3, r7, #20
 8000738:	2200      	movs	r2, #0
 800073a:	601a      	str	r2, [r3, #0]
 800073c:	605a      	str	r2, [r3, #4]
 800073e:	609a      	str	r2, [r3, #8]
 8000740:	60da      	str	r2, [r3, #12]
 8000742:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	4a34      	ldr	r2, [pc, #208]	; (800081c <HAL_UART_MspInit+0xf0>)
 800074a:	4293      	cmp	r3, r2
 800074c:	d161      	bne.n	8000812 <HAL_UART_MspInit+0xe6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800074e:	2300      	movs	r3, #0
 8000750:	613b      	str	r3, [r7, #16]
 8000752:	4b33      	ldr	r3, [pc, #204]	; (8000820 <HAL_UART_MspInit+0xf4>)
 8000754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000756:	4a32      	ldr	r2, [pc, #200]	; (8000820 <HAL_UART_MspInit+0xf4>)
 8000758:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800075c:	6413      	str	r3, [r2, #64]	; 0x40
 800075e:	4b30      	ldr	r3, [pc, #192]	; (8000820 <HAL_UART_MspInit+0xf4>)
 8000760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000762:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000766:	613b      	str	r3, [r7, #16]
 8000768:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800076a:	2300      	movs	r3, #0
 800076c:	60fb      	str	r3, [r7, #12]
 800076e:	4b2c      	ldr	r3, [pc, #176]	; (8000820 <HAL_UART_MspInit+0xf4>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000772:	4a2b      	ldr	r2, [pc, #172]	; (8000820 <HAL_UART_MspInit+0xf4>)
 8000774:	f043 0301 	orr.w	r3, r3, #1
 8000778:	6313      	str	r3, [r2, #48]	; 0x30
 800077a:	4b29      	ldr	r3, [pc, #164]	; (8000820 <HAL_UART_MspInit+0xf4>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077e:	f003 0301 	and.w	r3, r3, #1
 8000782:	60fb      	str	r3, [r7, #12]
 8000784:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000786:	230c      	movs	r3, #12
 8000788:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800078a:	2302      	movs	r3, #2
 800078c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078e:	2300      	movs	r3, #0
 8000790:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000792:	2303      	movs	r3, #3
 8000794:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000796:	2307      	movs	r3, #7
 8000798:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800079a:	f107 0314 	add.w	r3, r7, #20
 800079e:	4619      	mov	r1, r3
 80007a0:	4820      	ldr	r0, [pc, #128]	; (8000824 <HAL_UART_MspInit+0xf8>)
 80007a2:	f000 fe45 	bl	8001430 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 80007a6:	4b20      	ldr	r3, [pc, #128]	; (8000828 <HAL_UART_MspInit+0xfc>)
 80007a8:	4a20      	ldr	r2, [pc, #128]	; (800082c <HAL_UART_MspInit+0x100>)
 80007aa:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80007ac:	4b1e      	ldr	r3, [pc, #120]	; (8000828 <HAL_UART_MspInit+0xfc>)
 80007ae:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80007b2:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80007b4:	4b1c      	ldr	r3, [pc, #112]	; (8000828 <HAL_UART_MspInit+0xfc>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80007ba:	4b1b      	ldr	r3, [pc, #108]	; (8000828 <HAL_UART_MspInit+0xfc>)
 80007bc:	2200      	movs	r2, #0
 80007be:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80007c0:	4b19      	ldr	r3, [pc, #100]	; (8000828 <HAL_UART_MspInit+0xfc>)
 80007c2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80007c6:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80007c8:	4b17      	ldr	r3, [pc, #92]	; (8000828 <HAL_UART_MspInit+0xfc>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80007ce:	4b16      	ldr	r3, [pc, #88]	; (8000828 <HAL_UART_MspInit+0xfc>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80007d4:	4b14      	ldr	r3, [pc, #80]	; (8000828 <HAL_UART_MspInit+0xfc>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80007da:	4b13      	ldr	r3, [pc, #76]	; (8000828 <HAL_UART_MspInit+0xfc>)
 80007dc:	2200      	movs	r2, #0
 80007de:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80007e0:	4b11      	ldr	r3, [pc, #68]	; (8000828 <HAL_UART_MspInit+0xfc>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80007e6:	4810      	ldr	r0, [pc, #64]	; (8000828 <HAL_UART_MspInit+0xfc>)
 80007e8:	f000 fa20 	bl	8000c2c <HAL_DMA_Init>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d001      	beq.n	80007f6 <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 80007f2:	f7ff ff6d 	bl	80006d0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	4a0b      	ldr	r2, [pc, #44]	; (8000828 <HAL_UART_MspInit+0xfc>)
 80007fa:	639a      	str	r2, [r3, #56]	; 0x38
 80007fc:	4a0a      	ldr	r2, [pc, #40]	; (8000828 <HAL_UART_MspInit+0xfc>)
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000802:	2200      	movs	r2, #0
 8000804:	2100      	movs	r1, #0
 8000806:	2026      	movs	r0, #38	; 0x26
 8000808:	f000 f9d9 	bl	8000bbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800080c:	2026      	movs	r0, #38	; 0x26
 800080e:	f000 f9f2 	bl	8000bf6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000812:	bf00      	nop
 8000814:	3728      	adds	r7, #40	; 0x28
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	40004400 	.word	0x40004400
 8000820:	40023800 	.word	0x40023800
 8000824:	40020000 	.word	0x40020000
 8000828:	2000006c 	.word	0x2000006c
 800082c:	40026088 	.word	0x40026088

08000830 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000834:	e7fe      	b.n	8000834 <NMI_Handler+0x4>

08000836 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000836:	b480      	push	{r7}
 8000838:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800083a:	e7fe      	b.n	800083a <HardFault_Handler+0x4>

0800083c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800083c:	b480      	push	{r7}
 800083e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000840:	e7fe      	b.n	8000840 <MemManage_Handler+0x4>

08000842 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000842:	b480      	push	{r7}
 8000844:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000846:	e7fe      	b.n	8000846 <BusFault_Handler+0x4>

08000848 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000848:	b480      	push	{r7}
 800084a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800084c:	e7fe      	b.n	800084c <UsageFault_Handler+0x4>

0800084e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800084e:	b480      	push	{r7}
 8000850:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000852:	bf00      	nop
 8000854:	46bd      	mov	sp, r7
 8000856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085a:	4770      	bx	lr

0800085c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800085c:	b480      	push	{r7}
 800085e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000860:	bf00      	nop
 8000862:	46bd      	mov	sp, r7
 8000864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000868:	4770      	bx	lr

0800086a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800086a:	b480      	push	{r7}
 800086c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800086e:	bf00      	nop
 8000870:	46bd      	mov	sp, r7
 8000872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000876:	4770      	bx	lr

08000878 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800087c:	f000 f8a4 	bl	80009c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000880:	bf00      	nop
 8000882:	bd80      	pop	{r7, pc}

08000884 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000888:	4802      	ldr	r0, [pc, #8]	; (8000894 <DMA1_Stream5_IRQHandler+0x10>)
 800088a:	f000 fb67 	bl	8000f5c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800088e:	bf00      	nop
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	2000006c 	.word	0x2000006c

08000898 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800089c:	4802      	ldr	r0, [pc, #8]	; (80008a8 <USART2_IRQHandler+0x10>)
 800089e:	f001 fc6d 	bl	800217c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80008a2:	bf00      	nop
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	20000028 	.word	0x20000028

080008ac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008ac:	b480      	push	{r7}
 80008ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008b0:	4b06      	ldr	r3, [pc, #24]	; (80008cc <SystemInit+0x20>)
 80008b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80008b6:	4a05      	ldr	r2, [pc, #20]	; (80008cc <SystemInit+0x20>)
 80008b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80008bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008c0:	bf00      	nop
 80008c2:	46bd      	mov	sp, r7
 80008c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c8:	4770      	bx	lr
 80008ca:	bf00      	nop
 80008cc:	e000ed00 	.word	0xe000ed00

080008d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80008d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000908 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80008d4:	480d      	ldr	r0, [pc, #52]	; (800090c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80008d6:	490e      	ldr	r1, [pc, #56]	; (8000910 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80008d8:	4a0e      	ldr	r2, [pc, #56]	; (8000914 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80008da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008dc:	e002      	b.n	80008e4 <LoopCopyDataInit>

080008de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008e2:	3304      	adds	r3, #4

080008e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008e8:	d3f9      	bcc.n	80008de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008ea:	4a0b      	ldr	r2, [pc, #44]	; (8000918 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80008ec:	4c0b      	ldr	r4, [pc, #44]	; (800091c <LoopFillZerobss+0x26>)
  movs r3, #0
 80008ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008f0:	e001      	b.n	80008f6 <LoopFillZerobss>

080008f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008f4:	3204      	adds	r2, #4

080008f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008f8:	d3fb      	bcc.n	80008f2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80008fa:	f7ff ffd7 	bl	80008ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80008fe:	f002 fcc7 	bl	8003290 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000902:	f7ff fe03 	bl	800050c <main>
  bx  lr    
 8000906:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000908:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800090c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000910:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000914:	08003320 	.word	0x08003320
  ldr r2, =_sbss
 8000918:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800091c:	200000dc 	.word	0x200000dc

08000920 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000920:	e7fe      	b.n	8000920 <ADC_IRQHandler>
	...

08000924 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000928:	4b0e      	ldr	r3, [pc, #56]	; (8000964 <HAL_Init+0x40>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	4a0d      	ldr	r2, [pc, #52]	; (8000964 <HAL_Init+0x40>)
 800092e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000932:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000934:	4b0b      	ldr	r3, [pc, #44]	; (8000964 <HAL_Init+0x40>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	4a0a      	ldr	r2, [pc, #40]	; (8000964 <HAL_Init+0x40>)
 800093a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800093e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000940:	4b08      	ldr	r3, [pc, #32]	; (8000964 <HAL_Init+0x40>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	4a07      	ldr	r2, [pc, #28]	; (8000964 <HAL_Init+0x40>)
 8000946:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800094a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800094c:	2003      	movs	r0, #3
 800094e:	f000 f92b 	bl	8000ba8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000952:	200f      	movs	r0, #15
 8000954:	f000 f808 	bl	8000968 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000958:	f7ff fec0 	bl	80006dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800095c:	2300      	movs	r3, #0
}
 800095e:	4618      	mov	r0, r3
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	40023c00 	.word	0x40023c00

08000968 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b082      	sub	sp, #8
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000970:	4b12      	ldr	r3, [pc, #72]	; (80009bc <HAL_InitTick+0x54>)
 8000972:	681a      	ldr	r2, [r3, #0]
 8000974:	4b12      	ldr	r3, [pc, #72]	; (80009c0 <HAL_InitTick+0x58>)
 8000976:	781b      	ldrb	r3, [r3, #0]
 8000978:	4619      	mov	r1, r3
 800097a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800097e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000982:	fbb2 f3f3 	udiv	r3, r2, r3
 8000986:	4618      	mov	r0, r3
 8000988:	f000 f943 	bl	8000c12 <HAL_SYSTICK_Config>
 800098c:	4603      	mov	r3, r0
 800098e:	2b00      	cmp	r3, #0
 8000990:	d001      	beq.n	8000996 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000992:	2301      	movs	r3, #1
 8000994:	e00e      	b.n	80009b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	2b0f      	cmp	r3, #15
 800099a:	d80a      	bhi.n	80009b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800099c:	2200      	movs	r2, #0
 800099e:	6879      	ldr	r1, [r7, #4]
 80009a0:	f04f 30ff 	mov.w	r0, #4294967295
 80009a4:	f000 f90b 	bl	8000bbe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009a8:	4a06      	ldr	r2, [pc, #24]	; (80009c4 <HAL_InitTick+0x5c>)
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80009ae:	2300      	movs	r3, #0
 80009b0:	e000      	b.n	80009b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009b2:	2301      	movs	r3, #1
}
 80009b4:	4618      	mov	r0, r3
 80009b6:	3708      	adds	r7, #8
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bd80      	pop	{r7, pc}
 80009bc:	20000000 	.word	0x20000000
 80009c0:	20000008 	.word	0x20000008
 80009c4:	20000004 	.word	0x20000004

080009c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009cc:	4b06      	ldr	r3, [pc, #24]	; (80009e8 <HAL_IncTick+0x20>)
 80009ce:	781b      	ldrb	r3, [r3, #0]
 80009d0:	461a      	mov	r2, r3
 80009d2:	4b06      	ldr	r3, [pc, #24]	; (80009ec <HAL_IncTick+0x24>)
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	4413      	add	r3, r2
 80009d8:	4a04      	ldr	r2, [pc, #16]	; (80009ec <HAL_IncTick+0x24>)
 80009da:	6013      	str	r3, [r2, #0]
}
 80009dc:	bf00      	nop
 80009de:	46bd      	mov	sp, r7
 80009e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e4:	4770      	bx	lr
 80009e6:	bf00      	nop
 80009e8:	20000008 	.word	0x20000008
 80009ec:	200000d8 	.word	0x200000d8

080009f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009f0:	b480      	push	{r7}
 80009f2:	af00      	add	r7, sp, #0
  return uwTick;
 80009f4:	4b03      	ldr	r3, [pc, #12]	; (8000a04 <HAL_GetTick+0x14>)
 80009f6:	681b      	ldr	r3, [r3, #0]
}
 80009f8:	4618      	mov	r0, r3
 80009fa:	46bd      	mov	sp, r7
 80009fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop
 8000a04:	200000d8 	.word	0x200000d8

08000a08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	b085      	sub	sp, #20
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	f003 0307 	and.w	r3, r3, #7
 8000a16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a18:	4b0c      	ldr	r3, [pc, #48]	; (8000a4c <__NVIC_SetPriorityGrouping+0x44>)
 8000a1a:	68db      	ldr	r3, [r3, #12]
 8000a1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a1e:	68ba      	ldr	r2, [r7, #8]
 8000a20:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a24:	4013      	ands	r3, r2
 8000a26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a28:	68fb      	ldr	r3, [r7, #12]
 8000a2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a2c:	68bb      	ldr	r3, [r7, #8]
 8000a2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a30:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a3a:	4a04      	ldr	r2, [pc, #16]	; (8000a4c <__NVIC_SetPriorityGrouping+0x44>)
 8000a3c:	68bb      	ldr	r3, [r7, #8]
 8000a3e:	60d3      	str	r3, [r2, #12]
}
 8000a40:	bf00      	nop
 8000a42:	3714      	adds	r7, #20
 8000a44:	46bd      	mov	sp, r7
 8000a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4a:	4770      	bx	lr
 8000a4c:	e000ed00 	.word	0xe000ed00

08000a50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a54:	4b04      	ldr	r3, [pc, #16]	; (8000a68 <__NVIC_GetPriorityGrouping+0x18>)
 8000a56:	68db      	ldr	r3, [r3, #12]
 8000a58:	0a1b      	lsrs	r3, r3, #8
 8000a5a:	f003 0307 	and.w	r3, r3, #7
}
 8000a5e:	4618      	mov	r0, r3
 8000a60:	46bd      	mov	sp, r7
 8000a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a66:	4770      	bx	lr
 8000a68:	e000ed00 	.word	0xe000ed00

08000a6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	b083      	sub	sp, #12
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	4603      	mov	r3, r0
 8000a74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	db0b      	blt.n	8000a96 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a7e:	79fb      	ldrb	r3, [r7, #7]
 8000a80:	f003 021f 	and.w	r2, r3, #31
 8000a84:	4907      	ldr	r1, [pc, #28]	; (8000aa4 <__NVIC_EnableIRQ+0x38>)
 8000a86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a8a:	095b      	lsrs	r3, r3, #5
 8000a8c:	2001      	movs	r0, #1
 8000a8e:	fa00 f202 	lsl.w	r2, r0, r2
 8000a92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a96:	bf00      	nop
 8000a98:	370c      	adds	r7, #12
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa0:	4770      	bx	lr
 8000aa2:	bf00      	nop
 8000aa4:	e000e100 	.word	0xe000e100

08000aa8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	b083      	sub	sp, #12
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	4603      	mov	r3, r0
 8000ab0:	6039      	str	r1, [r7, #0]
 8000ab2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ab4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	db0a      	blt.n	8000ad2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000abc:	683b      	ldr	r3, [r7, #0]
 8000abe:	b2da      	uxtb	r2, r3
 8000ac0:	490c      	ldr	r1, [pc, #48]	; (8000af4 <__NVIC_SetPriority+0x4c>)
 8000ac2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ac6:	0112      	lsls	r2, r2, #4
 8000ac8:	b2d2      	uxtb	r2, r2
 8000aca:	440b      	add	r3, r1
 8000acc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ad0:	e00a      	b.n	8000ae8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ad2:	683b      	ldr	r3, [r7, #0]
 8000ad4:	b2da      	uxtb	r2, r3
 8000ad6:	4908      	ldr	r1, [pc, #32]	; (8000af8 <__NVIC_SetPriority+0x50>)
 8000ad8:	79fb      	ldrb	r3, [r7, #7]
 8000ada:	f003 030f 	and.w	r3, r3, #15
 8000ade:	3b04      	subs	r3, #4
 8000ae0:	0112      	lsls	r2, r2, #4
 8000ae2:	b2d2      	uxtb	r2, r2
 8000ae4:	440b      	add	r3, r1
 8000ae6:	761a      	strb	r2, [r3, #24]
}
 8000ae8:	bf00      	nop
 8000aea:	370c      	adds	r7, #12
 8000aec:	46bd      	mov	sp, r7
 8000aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af2:	4770      	bx	lr
 8000af4:	e000e100 	.word	0xe000e100
 8000af8:	e000ed00 	.word	0xe000ed00

08000afc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000afc:	b480      	push	{r7}
 8000afe:	b089      	sub	sp, #36	; 0x24
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	60f8      	str	r0, [r7, #12]
 8000b04:	60b9      	str	r1, [r7, #8]
 8000b06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b08:	68fb      	ldr	r3, [r7, #12]
 8000b0a:	f003 0307 	and.w	r3, r3, #7
 8000b0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b10:	69fb      	ldr	r3, [r7, #28]
 8000b12:	f1c3 0307 	rsb	r3, r3, #7
 8000b16:	2b04      	cmp	r3, #4
 8000b18:	bf28      	it	cs
 8000b1a:	2304      	movcs	r3, #4
 8000b1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b1e:	69fb      	ldr	r3, [r7, #28]
 8000b20:	3304      	adds	r3, #4
 8000b22:	2b06      	cmp	r3, #6
 8000b24:	d902      	bls.n	8000b2c <NVIC_EncodePriority+0x30>
 8000b26:	69fb      	ldr	r3, [r7, #28]
 8000b28:	3b03      	subs	r3, #3
 8000b2a:	e000      	b.n	8000b2e <NVIC_EncodePriority+0x32>
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b30:	f04f 32ff 	mov.w	r2, #4294967295
 8000b34:	69bb      	ldr	r3, [r7, #24]
 8000b36:	fa02 f303 	lsl.w	r3, r2, r3
 8000b3a:	43da      	mvns	r2, r3
 8000b3c:	68bb      	ldr	r3, [r7, #8]
 8000b3e:	401a      	ands	r2, r3
 8000b40:	697b      	ldr	r3, [r7, #20]
 8000b42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b44:	f04f 31ff 	mov.w	r1, #4294967295
 8000b48:	697b      	ldr	r3, [r7, #20]
 8000b4a:	fa01 f303 	lsl.w	r3, r1, r3
 8000b4e:	43d9      	mvns	r1, r3
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b54:	4313      	orrs	r3, r2
         );
}
 8000b56:	4618      	mov	r0, r3
 8000b58:	3724      	adds	r7, #36	; 0x24
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b60:	4770      	bx	lr
	...

08000b64 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b082      	sub	sp, #8
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	3b01      	subs	r3, #1
 8000b70:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b74:	d301      	bcc.n	8000b7a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b76:	2301      	movs	r3, #1
 8000b78:	e00f      	b.n	8000b9a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b7a:	4a0a      	ldr	r2, [pc, #40]	; (8000ba4 <SysTick_Config+0x40>)
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	3b01      	subs	r3, #1
 8000b80:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b82:	210f      	movs	r1, #15
 8000b84:	f04f 30ff 	mov.w	r0, #4294967295
 8000b88:	f7ff ff8e 	bl	8000aa8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b8c:	4b05      	ldr	r3, [pc, #20]	; (8000ba4 <SysTick_Config+0x40>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b92:	4b04      	ldr	r3, [pc, #16]	; (8000ba4 <SysTick_Config+0x40>)
 8000b94:	2207      	movs	r2, #7
 8000b96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b98:	2300      	movs	r3, #0
}
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	3708      	adds	r7, #8
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	e000e010 	.word	0xe000e010

08000ba8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b082      	sub	sp, #8
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bb0:	6878      	ldr	r0, [r7, #4]
 8000bb2:	f7ff ff29 	bl	8000a08 <__NVIC_SetPriorityGrouping>
}
 8000bb6:	bf00      	nop
 8000bb8:	3708      	adds	r7, #8
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}

08000bbe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000bbe:	b580      	push	{r7, lr}
 8000bc0:	b086      	sub	sp, #24
 8000bc2:	af00      	add	r7, sp, #0
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	60b9      	str	r1, [r7, #8]
 8000bc8:	607a      	str	r2, [r7, #4]
 8000bca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000bd0:	f7ff ff3e 	bl	8000a50 <__NVIC_GetPriorityGrouping>
 8000bd4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bd6:	687a      	ldr	r2, [r7, #4]
 8000bd8:	68b9      	ldr	r1, [r7, #8]
 8000bda:	6978      	ldr	r0, [r7, #20]
 8000bdc:	f7ff ff8e 	bl	8000afc <NVIC_EncodePriority>
 8000be0:	4602      	mov	r2, r0
 8000be2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000be6:	4611      	mov	r1, r2
 8000be8:	4618      	mov	r0, r3
 8000bea:	f7ff ff5d 	bl	8000aa8 <__NVIC_SetPriority>
}
 8000bee:	bf00      	nop
 8000bf0:	3718      	adds	r7, #24
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}

08000bf6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bf6:	b580      	push	{r7, lr}
 8000bf8:	b082      	sub	sp, #8
 8000bfa:	af00      	add	r7, sp, #0
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c04:	4618      	mov	r0, r3
 8000c06:	f7ff ff31 	bl	8000a6c <__NVIC_EnableIRQ>
}
 8000c0a:	bf00      	nop
 8000c0c:	3708      	adds	r7, #8
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}

08000c12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c12:	b580      	push	{r7, lr}
 8000c14:	b082      	sub	sp, #8
 8000c16:	af00      	add	r7, sp, #0
 8000c18:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c1a:	6878      	ldr	r0, [r7, #4]
 8000c1c:	f7ff ffa2 	bl	8000b64 <SysTick_Config>
 8000c20:	4603      	mov	r3, r0
}
 8000c22:	4618      	mov	r0, r3
 8000c24:	3708      	adds	r7, #8
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}
	...

08000c2c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b086      	sub	sp, #24
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000c34:	2300      	movs	r3, #0
 8000c36:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8000c38:	f7ff feda 	bl	80009f0 <HAL_GetTick>
 8000c3c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d101      	bne.n	8000c48 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8000c44:	2301      	movs	r3, #1
 8000c46:	e099      	b.n	8000d7c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	2202      	movs	r2, #2
 8000c4c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	2200      	movs	r2, #0
 8000c54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	681a      	ldr	r2, [r3, #0]
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	f022 0201 	bic.w	r2, r2, #1
 8000c66:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000c68:	e00f      	b.n	8000c8a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000c6a:	f7ff fec1 	bl	80009f0 <HAL_GetTick>
 8000c6e:	4602      	mov	r2, r0
 8000c70:	693b      	ldr	r3, [r7, #16]
 8000c72:	1ad3      	subs	r3, r2, r3
 8000c74:	2b05      	cmp	r3, #5
 8000c76:	d908      	bls.n	8000c8a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	2220      	movs	r2, #32
 8000c7c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	2203      	movs	r2, #3
 8000c82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8000c86:	2303      	movs	r3, #3
 8000c88:	e078      	b.n	8000d7c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	f003 0301 	and.w	r3, r3, #1
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d1e8      	bne.n	8000c6a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000ca0:	697a      	ldr	r2, [r7, #20]
 8000ca2:	4b38      	ldr	r3, [pc, #224]	; (8000d84 <HAL_DMA_Init+0x158>)
 8000ca4:	4013      	ands	r3, r2
 8000ca6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	685a      	ldr	r2, [r3, #4]
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	689b      	ldr	r3, [r3, #8]
 8000cb0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000cb6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	691b      	ldr	r3, [r3, #16]
 8000cbc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000cc2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	699b      	ldr	r3, [r3, #24]
 8000cc8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000cce:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	6a1b      	ldr	r3, [r3, #32]
 8000cd4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000cd6:	697a      	ldr	r2, [r7, #20]
 8000cd8:	4313      	orrs	r3, r2
 8000cda:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ce0:	2b04      	cmp	r3, #4
 8000ce2:	d107      	bne.n	8000cf4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cec:	4313      	orrs	r3, r2
 8000cee:	697a      	ldr	r2, [r7, #20]
 8000cf0:	4313      	orrs	r3, r2
 8000cf2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	697a      	ldr	r2, [r7, #20]
 8000cfa:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	695b      	ldr	r3, [r3, #20]
 8000d02:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000d04:	697b      	ldr	r3, [r7, #20]
 8000d06:	f023 0307 	bic.w	r3, r3, #7
 8000d0a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d10:	697a      	ldr	r2, [r7, #20]
 8000d12:	4313      	orrs	r3, r2
 8000d14:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d1a:	2b04      	cmp	r3, #4
 8000d1c:	d117      	bne.n	8000d4e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d22:	697a      	ldr	r2, [r7, #20]
 8000d24:	4313      	orrs	r3, r2
 8000d26:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d00e      	beq.n	8000d4e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8000d30:	6878      	ldr	r0, [r7, #4]
 8000d32:	f000 fb01 	bl	8001338 <DMA_CheckFifoParam>
 8000d36:	4603      	mov	r3, r0
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d008      	beq.n	8000d4e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	2240      	movs	r2, #64	; 0x40
 8000d40:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	2201      	movs	r2, #1
 8000d46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8000d4a:	2301      	movs	r3, #1
 8000d4c:	e016      	b.n	8000d7c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	697a      	ldr	r2, [r7, #20]
 8000d54:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000d56:	6878      	ldr	r0, [r7, #4]
 8000d58:	f000 fab8 	bl	80012cc <DMA_CalcBaseAndBitshift>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000d64:	223f      	movs	r2, #63	; 0x3f
 8000d66:	409a      	lsls	r2, r3
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	2200      	movs	r2, #0
 8000d70:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	2201      	movs	r2, #1
 8000d76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8000d7a:	2300      	movs	r3, #0
}
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	3718      	adds	r7, #24
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}
 8000d84:	f010803f 	.word	0xf010803f

08000d88 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b086      	sub	sp, #24
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	60f8      	str	r0, [r7, #12]
 8000d90:	60b9      	str	r1, [r7, #8]
 8000d92:	607a      	str	r2, [r7, #4]
 8000d94:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000d96:	2300      	movs	r3, #0
 8000d98:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000d9a:	68fb      	ldr	r3, [r7, #12]
 8000d9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d9e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8000da6:	2b01      	cmp	r3, #1
 8000da8:	d101      	bne.n	8000dae <HAL_DMA_Start_IT+0x26>
 8000daa:	2302      	movs	r3, #2
 8000dac:	e040      	b.n	8000e30 <HAL_DMA_Start_IT+0xa8>
 8000dae:	68fb      	ldr	r3, [r7, #12]
 8000db0:	2201      	movs	r2, #1
 8000db2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000dbc:	b2db      	uxtb	r3, r3
 8000dbe:	2b01      	cmp	r3, #1
 8000dc0:	d12f      	bne.n	8000e22 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000dc2:	68fb      	ldr	r3, [r7, #12]
 8000dc4:	2202      	movs	r2, #2
 8000dc6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000dca:	68fb      	ldr	r3, [r7, #12]
 8000dcc:	2200      	movs	r2, #0
 8000dce:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	687a      	ldr	r2, [r7, #4]
 8000dd4:	68b9      	ldr	r1, [r7, #8]
 8000dd6:	68f8      	ldr	r0, [r7, #12]
 8000dd8:	f000 fa4a 	bl	8001270 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000de0:	223f      	movs	r2, #63	; 0x3f
 8000de2:	409a      	lsls	r2, r3
 8000de4:	693b      	ldr	r3, [r7, #16]
 8000de6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	681a      	ldr	r2, [r3, #0]
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	f042 0216 	orr.w	r2, r2, #22
 8000df6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d007      	beq.n	8000e10 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	681a      	ldr	r2, [r3, #0]
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	f042 0208 	orr.w	r2, r2, #8
 8000e0e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	681a      	ldr	r2, [r3, #0]
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	f042 0201 	orr.w	r2, r2, #1
 8000e1e:	601a      	str	r2, [r3, #0]
 8000e20:	e005      	b.n	8000e2e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8000e22:	68fb      	ldr	r3, [r7, #12]
 8000e24:	2200      	movs	r2, #0
 8000e26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8000e2a:	2302      	movs	r3, #2
 8000e2c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8000e2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8000e30:	4618      	mov	r0, r3
 8000e32:	3718      	adds	r7, #24
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bd80      	pop	{r7, pc}

08000e38 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b084      	sub	sp, #16
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e44:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000e46:	f7ff fdd3 	bl	80009f0 <HAL_GetTick>
 8000e4a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000e52:	b2db      	uxtb	r3, r3
 8000e54:	2b02      	cmp	r3, #2
 8000e56:	d008      	beq.n	8000e6a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	2280      	movs	r2, #128	; 0x80
 8000e5c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	2200      	movs	r2, #0
 8000e62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8000e66:	2301      	movs	r3, #1
 8000e68:	e052      	b.n	8000f10 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	681a      	ldr	r2, [r3, #0]
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	f022 0216 	bic.w	r2, r2, #22
 8000e78:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	695a      	ldr	r2, [r3, #20]
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000e88:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d103      	bne.n	8000e9a <HAL_DMA_Abort+0x62>
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d007      	beq.n	8000eaa <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	681a      	ldr	r2, [r3, #0]
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	f022 0208 	bic.w	r2, r2, #8
 8000ea8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	681a      	ldr	r2, [r3, #0]
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	f022 0201 	bic.w	r2, r2, #1
 8000eb8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000eba:	e013      	b.n	8000ee4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000ebc:	f7ff fd98 	bl	80009f0 <HAL_GetTick>
 8000ec0:	4602      	mov	r2, r0
 8000ec2:	68bb      	ldr	r3, [r7, #8]
 8000ec4:	1ad3      	subs	r3, r2, r3
 8000ec6:	2b05      	cmp	r3, #5
 8000ec8:	d90c      	bls.n	8000ee4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	2220      	movs	r2, #32
 8000ece:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	2203      	movs	r2, #3
 8000ed4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	2200      	movs	r2, #0
 8000edc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8000ee0:	2303      	movs	r3, #3
 8000ee2:	e015      	b.n	8000f10 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	f003 0301 	and.w	r3, r3, #1
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d1e4      	bne.n	8000ebc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ef6:	223f      	movs	r2, #63	; 0x3f
 8000ef8:	409a      	lsls	r2, r3
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	2201      	movs	r2, #1
 8000f02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	2200      	movs	r2, #0
 8000f0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8000f0e:	2300      	movs	r3, #0
}
 8000f10:	4618      	mov	r0, r3
 8000f12:	3710      	adds	r7, #16
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}

08000f18 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	b083      	sub	sp, #12
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000f26:	b2db      	uxtb	r3, r3
 8000f28:	2b02      	cmp	r3, #2
 8000f2a:	d004      	beq.n	8000f36 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	2280      	movs	r2, #128	; 0x80
 8000f30:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000f32:	2301      	movs	r3, #1
 8000f34:	e00c      	b.n	8000f50 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	2205      	movs	r2, #5
 8000f3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	681a      	ldr	r2, [r3, #0]
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	f022 0201 	bic.w	r2, r2, #1
 8000f4c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000f4e:	2300      	movs	r3, #0
}
 8000f50:	4618      	mov	r0, r3
 8000f52:	370c      	adds	r7, #12
 8000f54:	46bd      	mov	sp, r7
 8000f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5a:	4770      	bx	lr

08000f5c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b086      	sub	sp, #24
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8000f64:	2300      	movs	r3, #0
 8000f66:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8000f68:	4b8e      	ldr	r3, [pc, #568]	; (80011a4 <HAL_DMA_IRQHandler+0x248>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	4a8e      	ldr	r2, [pc, #568]	; (80011a8 <HAL_DMA_IRQHandler+0x24c>)
 8000f6e:	fba2 2303 	umull	r2, r3, r2, r3
 8000f72:	0a9b      	lsrs	r3, r3, #10
 8000f74:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f7a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8000f7c:	693b      	ldr	r3, [r7, #16]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f86:	2208      	movs	r2, #8
 8000f88:	409a      	lsls	r2, r3
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	4013      	ands	r3, r2
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d01a      	beq.n	8000fc8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	f003 0304 	and.w	r3, r3, #4
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d013      	beq.n	8000fc8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	681a      	ldr	r2, [r3, #0]
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	f022 0204 	bic.w	r2, r2, #4
 8000fae:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000fb4:	2208      	movs	r2, #8
 8000fb6:	409a      	lsls	r2, r3
 8000fb8:	693b      	ldr	r3, [r7, #16]
 8000fba:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000fc0:	f043 0201 	orr.w	r2, r3, #1
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000fcc:	2201      	movs	r2, #1
 8000fce:	409a      	lsls	r2, r3
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	4013      	ands	r3, r2
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d012      	beq.n	8000ffe <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	695b      	ldr	r3, [r3, #20]
 8000fde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d00b      	beq.n	8000ffe <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000fea:	2201      	movs	r2, #1
 8000fec:	409a      	lsls	r2, r3
 8000fee:	693b      	ldr	r3, [r7, #16]
 8000ff0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000ff6:	f043 0202 	orr.w	r2, r3, #2
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001002:	2204      	movs	r2, #4
 8001004:	409a      	lsls	r2, r3
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	4013      	ands	r3, r2
 800100a:	2b00      	cmp	r3, #0
 800100c:	d012      	beq.n	8001034 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	f003 0302 	and.w	r3, r3, #2
 8001018:	2b00      	cmp	r3, #0
 800101a:	d00b      	beq.n	8001034 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001020:	2204      	movs	r2, #4
 8001022:	409a      	lsls	r2, r3
 8001024:	693b      	ldr	r3, [r7, #16]
 8001026:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800102c:	f043 0204 	orr.w	r2, r3, #4
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001038:	2210      	movs	r2, #16
 800103a:	409a      	lsls	r2, r3
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	4013      	ands	r3, r2
 8001040:	2b00      	cmp	r3, #0
 8001042:	d043      	beq.n	80010cc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	f003 0308 	and.w	r3, r3, #8
 800104e:	2b00      	cmp	r3, #0
 8001050:	d03c      	beq.n	80010cc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001056:	2210      	movs	r2, #16
 8001058:	409a      	lsls	r2, r3
 800105a:	693b      	ldr	r3, [r7, #16]
 800105c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001068:	2b00      	cmp	r3, #0
 800106a:	d018      	beq.n	800109e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001076:	2b00      	cmp	r3, #0
 8001078:	d108      	bne.n	800108c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800107e:	2b00      	cmp	r3, #0
 8001080:	d024      	beq.n	80010cc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001086:	6878      	ldr	r0, [r7, #4]
 8001088:	4798      	blx	r3
 800108a:	e01f      	b.n	80010cc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001090:	2b00      	cmp	r3, #0
 8001092:	d01b      	beq.n	80010cc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001098:	6878      	ldr	r0, [r7, #4]
 800109a:	4798      	blx	r3
 800109c:	e016      	b.n	80010cc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d107      	bne.n	80010bc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	681a      	ldr	r2, [r3, #0]
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	f022 0208 	bic.w	r2, r2, #8
 80010ba:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d003      	beq.n	80010cc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010c8:	6878      	ldr	r0, [r7, #4]
 80010ca:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010d0:	2220      	movs	r2, #32
 80010d2:	409a      	lsls	r2, r3
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	4013      	ands	r3, r2
 80010d8:	2b00      	cmp	r3, #0
 80010da:	f000 808f 	beq.w	80011fc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	f003 0310 	and.w	r3, r3, #16
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	f000 8087 	beq.w	80011fc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010f2:	2220      	movs	r2, #32
 80010f4:	409a      	lsls	r2, r3
 80010f6:	693b      	ldr	r3, [r7, #16]
 80010f8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001100:	b2db      	uxtb	r3, r3
 8001102:	2b05      	cmp	r3, #5
 8001104:	d136      	bne.n	8001174 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	681a      	ldr	r2, [r3, #0]
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	f022 0216 	bic.w	r2, r2, #22
 8001114:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	695a      	ldr	r2, [r3, #20]
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001124:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800112a:	2b00      	cmp	r3, #0
 800112c:	d103      	bne.n	8001136 <HAL_DMA_IRQHandler+0x1da>
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001132:	2b00      	cmp	r3, #0
 8001134:	d007      	beq.n	8001146 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	681a      	ldr	r2, [r3, #0]
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	f022 0208 	bic.w	r2, r2, #8
 8001144:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800114a:	223f      	movs	r2, #63	; 0x3f
 800114c:	409a      	lsls	r2, r3
 800114e:	693b      	ldr	r3, [r7, #16]
 8001150:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	2201      	movs	r2, #1
 8001156:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	2200      	movs	r2, #0
 800115e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001166:	2b00      	cmp	r3, #0
 8001168:	d07e      	beq.n	8001268 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800116e:	6878      	ldr	r0, [r7, #4]
 8001170:	4798      	blx	r3
        }
        return;
 8001172:	e079      	b.n	8001268 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800117e:	2b00      	cmp	r3, #0
 8001180:	d01d      	beq.n	80011be <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800118c:	2b00      	cmp	r3, #0
 800118e:	d10d      	bne.n	80011ac <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001194:	2b00      	cmp	r3, #0
 8001196:	d031      	beq.n	80011fc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800119c:	6878      	ldr	r0, [r7, #4]
 800119e:	4798      	blx	r3
 80011a0:	e02c      	b.n	80011fc <HAL_DMA_IRQHandler+0x2a0>
 80011a2:	bf00      	nop
 80011a4:	20000000 	.word	0x20000000
 80011a8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d023      	beq.n	80011fc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011b8:	6878      	ldr	r0, [r7, #4]
 80011ba:	4798      	blx	r3
 80011bc:	e01e      	b.n	80011fc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d10f      	bne.n	80011ec <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	681a      	ldr	r2, [r3, #0]
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f022 0210 	bic.w	r2, r2, #16
 80011da:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	2201      	movs	r2, #1
 80011e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	2200      	movs	r2, #0
 80011e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d003      	beq.n	80011fc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011f8:	6878      	ldr	r0, [r7, #4]
 80011fa:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001200:	2b00      	cmp	r3, #0
 8001202:	d032      	beq.n	800126a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001208:	f003 0301 	and.w	r3, r3, #1
 800120c:	2b00      	cmp	r3, #0
 800120e:	d022      	beq.n	8001256 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	2205      	movs	r2, #5
 8001214:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	681a      	ldr	r2, [r3, #0]
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f022 0201 	bic.w	r2, r2, #1
 8001226:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001228:	68bb      	ldr	r3, [r7, #8]
 800122a:	3301      	adds	r3, #1
 800122c:	60bb      	str	r3, [r7, #8]
 800122e:	697a      	ldr	r2, [r7, #20]
 8001230:	429a      	cmp	r2, r3
 8001232:	d307      	bcc.n	8001244 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f003 0301 	and.w	r3, r3, #1
 800123e:	2b00      	cmp	r3, #0
 8001240:	d1f2      	bne.n	8001228 <HAL_DMA_IRQHandler+0x2cc>
 8001242:	e000      	b.n	8001246 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001244:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	2201      	movs	r2, #1
 800124a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	2200      	movs	r2, #0
 8001252:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800125a:	2b00      	cmp	r3, #0
 800125c:	d005      	beq.n	800126a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001262:	6878      	ldr	r0, [r7, #4]
 8001264:	4798      	blx	r3
 8001266:	e000      	b.n	800126a <HAL_DMA_IRQHandler+0x30e>
        return;
 8001268:	bf00      	nop
    }
  }
}
 800126a:	3718      	adds	r7, #24
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}

08001270 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001270:	b480      	push	{r7}
 8001272:	b085      	sub	sp, #20
 8001274:	af00      	add	r7, sp, #0
 8001276:	60f8      	str	r0, [r7, #12]
 8001278:	60b9      	str	r1, [r7, #8]
 800127a:	607a      	str	r2, [r7, #4]
 800127c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	681a      	ldr	r2, [r3, #0]
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800128c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	683a      	ldr	r2, [r7, #0]
 8001294:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	689b      	ldr	r3, [r3, #8]
 800129a:	2b40      	cmp	r3, #64	; 0x40
 800129c:	d108      	bne.n	80012b0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	687a      	ldr	r2, [r7, #4]
 80012a4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	68ba      	ldr	r2, [r7, #8]
 80012ac:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80012ae:	e007      	b.n	80012c0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	68ba      	ldr	r2, [r7, #8]
 80012b6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	687a      	ldr	r2, [r7, #4]
 80012be:	60da      	str	r2, [r3, #12]
}
 80012c0:	bf00      	nop
 80012c2:	3714      	adds	r7, #20
 80012c4:	46bd      	mov	sp, r7
 80012c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ca:	4770      	bx	lr

080012cc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80012cc:	b480      	push	{r7}
 80012ce:	b085      	sub	sp, #20
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	b2db      	uxtb	r3, r3
 80012da:	3b10      	subs	r3, #16
 80012dc:	4a14      	ldr	r2, [pc, #80]	; (8001330 <DMA_CalcBaseAndBitshift+0x64>)
 80012de:	fba2 2303 	umull	r2, r3, r2, r3
 80012e2:	091b      	lsrs	r3, r3, #4
 80012e4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80012e6:	4a13      	ldr	r2, [pc, #76]	; (8001334 <DMA_CalcBaseAndBitshift+0x68>)
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	4413      	add	r3, r2
 80012ec:	781b      	ldrb	r3, [r3, #0]
 80012ee:	461a      	mov	r2, r3
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	2b03      	cmp	r3, #3
 80012f8:	d909      	bls.n	800130e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001302:	f023 0303 	bic.w	r3, r3, #3
 8001306:	1d1a      	adds	r2, r3, #4
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	659a      	str	r2, [r3, #88]	; 0x58
 800130c:	e007      	b.n	800131e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001316:	f023 0303 	bic.w	r3, r3, #3
 800131a:	687a      	ldr	r2, [r7, #4]
 800131c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001322:	4618      	mov	r0, r3
 8001324:	3714      	adds	r7, #20
 8001326:	46bd      	mov	sp, r7
 8001328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132c:	4770      	bx	lr
 800132e:	bf00      	nop
 8001330:	aaaaaaab 	.word	0xaaaaaaab
 8001334:	08003308 	.word	0x08003308

08001338 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001338:	b480      	push	{r7}
 800133a:	b085      	sub	sp, #20
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001340:	2300      	movs	r3, #0
 8001342:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001348:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	699b      	ldr	r3, [r3, #24]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d11f      	bne.n	8001392 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001352:	68bb      	ldr	r3, [r7, #8]
 8001354:	2b03      	cmp	r3, #3
 8001356:	d856      	bhi.n	8001406 <DMA_CheckFifoParam+0xce>
 8001358:	a201      	add	r2, pc, #4	; (adr r2, 8001360 <DMA_CheckFifoParam+0x28>)
 800135a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800135e:	bf00      	nop
 8001360:	08001371 	.word	0x08001371
 8001364:	08001383 	.word	0x08001383
 8001368:	08001371 	.word	0x08001371
 800136c:	08001407 	.word	0x08001407
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001374:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001378:	2b00      	cmp	r3, #0
 800137a:	d046      	beq.n	800140a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800137c:	2301      	movs	r3, #1
 800137e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001380:	e043      	b.n	800140a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001386:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800138a:	d140      	bne.n	800140e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800138c:	2301      	movs	r3, #1
 800138e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001390:	e03d      	b.n	800140e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	699b      	ldr	r3, [r3, #24]
 8001396:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800139a:	d121      	bne.n	80013e0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800139c:	68bb      	ldr	r3, [r7, #8]
 800139e:	2b03      	cmp	r3, #3
 80013a0:	d837      	bhi.n	8001412 <DMA_CheckFifoParam+0xda>
 80013a2:	a201      	add	r2, pc, #4	; (adr r2, 80013a8 <DMA_CheckFifoParam+0x70>)
 80013a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013a8:	080013b9 	.word	0x080013b9
 80013ac:	080013bf 	.word	0x080013bf
 80013b0:	080013b9 	.word	0x080013b9
 80013b4:	080013d1 	.word	0x080013d1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80013b8:	2301      	movs	r3, #1
 80013ba:	73fb      	strb	r3, [r7, #15]
      break;
 80013bc:	e030      	b.n	8001420 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013c2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d025      	beq.n	8001416 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80013ca:	2301      	movs	r3, #1
 80013cc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80013ce:	e022      	b.n	8001416 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013d4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80013d8:	d11f      	bne.n	800141a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80013da:	2301      	movs	r3, #1
 80013dc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80013de:	e01c      	b.n	800141a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80013e0:	68bb      	ldr	r3, [r7, #8]
 80013e2:	2b02      	cmp	r3, #2
 80013e4:	d903      	bls.n	80013ee <DMA_CheckFifoParam+0xb6>
 80013e6:	68bb      	ldr	r3, [r7, #8]
 80013e8:	2b03      	cmp	r3, #3
 80013ea:	d003      	beq.n	80013f4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80013ec:	e018      	b.n	8001420 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80013ee:	2301      	movs	r3, #1
 80013f0:	73fb      	strb	r3, [r7, #15]
      break;
 80013f2:	e015      	b.n	8001420 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013f8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d00e      	beq.n	800141e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001400:	2301      	movs	r3, #1
 8001402:	73fb      	strb	r3, [r7, #15]
      break;
 8001404:	e00b      	b.n	800141e <DMA_CheckFifoParam+0xe6>
      break;
 8001406:	bf00      	nop
 8001408:	e00a      	b.n	8001420 <DMA_CheckFifoParam+0xe8>
      break;
 800140a:	bf00      	nop
 800140c:	e008      	b.n	8001420 <DMA_CheckFifoParam+0xe8>
      break;
 800140e:	bf00      	nop
 8001410:	e006      	b.n	8001420 <DMA_CheckFifoParam+0xe8>
      break;
 8001412:	bf00      	nop
 8001414:	e004      	b.n	8001420 <DMA_CheckFifoParam+0xe8>
      break;
 8001416:	bf00      	nop
 8001418:	e002      	b.n	8001420 <DMA_CheckFifoParam+0xe8>
      break;   
 800141a:	bf00      	nop
 800141c:	e000      	b.n	8001420 <DMA_CheckFifoParam+0xe8>
      break;
 800141e:	bf00      	nop
    }
  } 
  
  return status; 
 8001420:	7bfb      	ldrb	r3, [r7, #15]
}
 8001422:	4618      	mov	r0, r3
 8001424:	3714      	adds	r7, #20
 8001426:	46bd      	mov	sp, r7
 8001428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142c:	4770      	bx	lr
 800142e:	bf00      	nop

08001430 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001430:	b480      	push	{r7}
 8001432:	b089      	sub	sp, #36	; 0x24
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
 8001438:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800143a:	2300      	movs	r3, #0
 800143c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800143e:	2300      	movs	r3, #0
 8001440:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001442:	2300      	movs	r3, #0
 8001444:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001446:	2300      	movs	r3, #0
 8001448:	61fb      	str	r3, [r7, #28]
 800144a:	e16b      	b.n	8001724 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800144c:	2201      	movs	r2, #1
 800144e:	69fb      	ldr	r3, [r7, #28]
 8001450:	fa02 f303 	lsl.w	r3, r2, r3
 8001454:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	697a      	ldr	r2, [r7, #20]
 800145c:	4013      	ands	r3, r2
 800145e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001460:	693a      	ldr	r2, [r7, #16]
 8001462:	697b      	ldr	r3, [r7, #20]
 8001464:	429a      	cmp	r2, r3
 8001466:	f040 815a 	bne.w	800171e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	f003 0303 	and.w	r3, r3, #3
 8001472:	2b01      	cmp	r3, #1
 8001474:	d005      	beq.n	8001482 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800147e:	2b02      	cmp	r3, #2
 8001480:	d130      	bne.n	80014e4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	689b      	ldr	r3, [r3, #8]
 8001486:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001488:	69fb      	ldr	r3, [r7, #28]
 800148a:	005b      	lsls	r3, r3, #1
 800148c:	2203      	movs	r2, #3
 800148e:	fa02 f303 	lsl.w	r3, r2, r3
 8001492:	43db      	mvns	r3, r3
 8001494:	69ba      	ldr	r2, [r7, #24]
 8001496:	4013      	ands	r3, r2
 8001498:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	68da      	ldr	r2, [r3, #12]
 800149e:	69fb      	ldr	r3, [r7, #28]
 80014a0:	005b      	lsls	r3, r3, #1
 80014a2:	fa02 f303 	lsl.w	r3, r2, r3
 80014a6:	69ba      	ldr	r2, [r7, #24]
 80014a8:	4313      	orrs	r3, r2
 80014aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	69ba      	ldr	r2, [r7, #24]
 80014b0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	685b      	ldr	r3, [r3, #4]
 80014b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80014b8:	2201      	movs	r2, #1
 80014ba:	69fb      	ldr	r3, [r7, #28]
 80014bc:	fa02 f303 	lsl.w	r3, r2, r3
 80014c0:	43db      	mvns	r3, r3
 80014c2:	69ba      	ldr	r2, [r7, #24]
 80014c4:	4013      	ands	r3, r2
 80014c6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	091b      	lsrs	r3, r3, #4
 80014ce:	f003 0201 	and.w	r2, r3, #1
 80014d2:	69fb      	ldr	r3, [r7, #28]
 80014d4:	fa02 f303 	lsl.w	r3, r2, r3
 80014d8:	69ba      	ldr	r2, [r7, #24]
 80014da:	4313      	orrs	r3, r2
 80014dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	69ba      	ldr	r2, [r7, #24]
 80014e2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	f003 0303 	and.w	r3, r3, #3
 80014ec:	2b03      	cmp	r3, #3
 80014ee:	d017      	beq.n	8001520 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	68db      	ldr	r3, [r3, #12]
 80014f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80014f6:	69fb      	ldr	r3, [r7, #28]
 80014f8:	005b      	lsls	r3, r3, #1
 80014fa:	2203      	movs	r2, #3
 80014fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001500:	43db      	mvns	r3, r3
 8001502:	69ba      	ldr	r2, [r7, #24]
 8001504:	4013      	ands	r3, r2
 8001506:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	689a      	ldr	r2, [r3, #8]
 800150c:	69fb      	ldr	r3, [r7, #28]
 800150e:	005b      	lsls	r3, r3, #1
 8001510:	fa02 f303 	lsl.w	r3, r2, r3
 8001514:	69ba      	ldr	r2, [r7, #24]
 8001516:	4313      	orrs	r3, r2
 8001518:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	69ba      	ldr	r2, [r7, #24]
 800151e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	f003 0303 	and.w	r3, r3, #3
 8001528:	2b02      	cmp	r3, #2
 800152a:	d123      	bne.n	8001574 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800152c:	69fb      	ldr	r3, [r7, #28]
 800152e:	08da      	lsrs	r2, r3, #3
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	3208      	adds	r2, #8
 8001534:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001538:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800153a:	69fb      	ldr	r3, [r7, #28]
 800153c:	f003 0307 	and.w	r3, r3, #7
 8001540:	009b      	lsls	r3, r3, #2
 8001542:	220f      	movs	r2, #15
 8001544:	fa02 f303 	lsl.w	r3, r2, r3
 8001548:	43db      	mvns	r3, r3
 800154a:	69ba      	ldr	r2, [r7, #24]
 800154c:	4013      	ands	r3, r2
 800154e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	691a      	ldr	r2, [r3, #16]
 8001554:	69fb      	ldr	r3, [r7, #28]
 8001556:	f003 0307 	and.w	r3, r3, #7
 800155a:	009b      	lsls	r3, r3, #2
 800155c:	fa02 f303 	lsl.w	r3, r2, r3
 8001560:	69ba      	ldr	r2, [r7, #24]
 8001562:	4313      	orrs	r3, r2
 8001564:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001566:	69fb      	ldr	r3, [r7, #28]
 8001568:	08da      	lsrs	r2, r3, #3
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	3208      	adds	r2, #8
 800156e:	69b9      	ldr	r1, [r7, #24]
 8001570:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800157a:	69fb      	ldr	r3, [r7, #28]
 800157c:	005b      	lsls	r3, r3, #1
 800157e:	2203      	movs	r2, #3
 8001580:	fa02 f303 	lsl.w	r3, r2, r3
 8001584:	43db      	mvns	r3, r3
 8001586:	69ba      	ldr	r2, [r7, #24]
 8001588:	4013      	ands	r3, r2
 800158a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	f003 0203 	and.w	r2, r3, #3
 8001594:	69fb      	ldr	r3, [r7, #28]
 8001596:	005b      	lsls	r3, r3, #1
 8001598:	fa02 f303 	lsl.w	r3, r2, r3
 800159c:	69ba      	ldr	r2, [r7, #24]
 800159e:	4313      	orrs	r3, r2
 80015a0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	69ba      	ldr	r2, [r7, #24]
 80015a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	f000 80b4 	beq.w	800171e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015b6:	2300      	movs	r3, #0
 80015b8:	60fb      	str	r3, [r7, #12]
 80015ba:	4b60      	ldr	r3, [pc, #384]	; (800173c <HAL_GPIO_Init+0x30c>)
 80015bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015be:	4a5f      	ldr	r2, [pc, #380]	; (800173c <HAL_GPIO_Init+0x30c>)
 80015c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015c4:	6453      	str	r3, [r2, #68]	; 0x44
 80015c6:	4b5d      	ldr	r3, [pc, #372]	; (800173c <HAL_GPIO_Init+0x30c>)
 80015c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015ce:	60fb      	str	r3, [r7, #12]
 80015d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80015d2:	4a5b      	ldr	r2, [pc, #364]	; (8001740 <HAL_GPIO_Init+0x310>)
 80015d4:	69fb      	ldr	r3, [r7, #28]
 80015d6:	089b      	lsrs	r3, r3, #2
 80015d8:	3302      	adds	r3, #2
 80015da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80015e0:	69fb      	ldr	r3, [r7, #28]
 80015e2:	f003 0303 	and.w	r3, r3, #3
 80015e6:	009b      	lsls	r3, r3, #2
 80015e8:	220f      	movs	r2, #15
 80015ea:	fa02 f303 	lsl.w	r3, r2, r3
 80015ee:	43db      	mvns	r3, r3
 80015f0:	69ba      	ldr	r2, [r7, #24]
 80015f2:	4013      	ands	r3, r2
 80015f4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	4a52      	ldr	r2, [pc, #328]	; (8001744 <HAL_GPIO_Init+0x314>)
 80015fa:	4293      	cmp	r3, r2
 80015fc:	d02b      	beq.n	8001656 <HAL_GPIO_Init+0x226>
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	4a51      	ldr	r2, [pc, #324]	; (8001748 <HAL_GPIO_Init+0x318>)
 8001602:	4293      	cmp	r3, r2
 8001604:	d025      	beq.n	8001652 <HAL_GPIO_Init+0x222>
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	4a50      	ldr	r2, [pc, #320]	; (800174c <HAL_GPIO_Init+0x31c>)
 800160a:	4293      	cmp	r3, r2
 800160c:	d01f      	beq.n	800164e <HAL_GPIO_Init+0x21e>
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	4a4f      	ldr	r2, [pc, #316]	; (8001750 <HAL_GPIO_Init+0x320>)
 8001612:	4293      	cmp	r3, r2
 8001614:	d019      	beq.n	800164a <HAL_GPIO_Init+0x21a>
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	4a4e      	ldr	r2, [pc, #312]	; (8001754 <HAL_GPIO_Init+0x324>)
 800161a:	4293      	cmp	r3, r2
 800161c:	d013      	beq.n	8001646 <HAL_GPIO_Init+0x216>
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	4a4d      	ldr	r2, [pc, #308]	; (8001758 <HAL_GPIO_Init+0x328>)
 8001622:	4293      	cmp	r3, r2
 8001624:	d00d      	beq.n	8001642 <HAL_GPIO_Init+0x212>
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	4a4c      	ldr	r2, [pc, #304]	; (800175c <HAL_GPIO_Init+0x32c>)
 800162a:	4293      	cmp	r3, r2
 800162c:	d007      	beq.n	800163e <HAL_GPIO_Init+0x20e>
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	4a4b      	ldr	r2, [pc, #300]	; (8001760 <HAL_GPIO_Init+0x330>)
 8001632:	4293      	cmp	r3, r2
 8001634:	d101      	bne.n	800163a <HAL_GPIO_Init+0x20a>
 8001636:	2307      	movs	r3, #7
 8001638:	e00e      	b.n	8001658 <HAL_GPIO_Init+0x228>
 800163a:	2308      	movs	r3, #8
 800163c:	e00c      	b.n	8001658 <HAL_GPIO_Init+0x228>
 800163e:	2306      	movs	r3, #6
 8001640:	e00a      	b.n	8001658 <HAL_GPIO_Init+0x228>
 8001642:	2305      	movs	r3, #5
 8001644:	e008      	b.n	8001658 <HAL_GPIO_Init+0x228>
 8001646:	2304      	movs	r3, #4
 8001648:	e006      	b.n	8001658 <HAL_GPIO_Init+0x228>
 800164a:	2303      	movs	r3, #3
 800164c:	e004      	b.n	8001658 <HAL_GPIO_Init+0x228>
 800164e:	2302      	movs	r3, #2
 8001650:	e002      	b.n	8001658 <HAL_GPIO_Init+0x228>
 8001652:	2301      	movs	r3, #1
 8001654:	e000      	b.n	8001658 <HAL_GPIO_Init+0x228>
 8001656:	2300      	movs	r3, #0
 8001658:	69fa      	ldr	r2, [r7, #28]
 800165a:	f002 0203 	and.w	r2, r2, #3
 800165e:	0092      	lsls	r2, r2, #2
 8001660:	4093      	lsls	r3, r2
 8001662:	69ba      	ldr	r2, [r7, #24]
 8001664:	4313      	orrs	r3, r2
 8001666:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001668:	4935      	ldr	r1, [pc, #212]	; (8001740 <HAL_GPIO_Init+0x310>)
 800166a:	69fb      	ldr	r3, [r7, #28]
 800166c:	089b      	lsrs	r3, r3, #2
 800166e:	3302      	adds	r3, #2
 8001670:	69ba      	ldr	r2, [r7, #24]
 8001672:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001676:	4b3b      	ldr	r3, [pc, #236]	; (8001764 <HAL_GPIO_Init+0x334>)
 8001678:	689b      	ldr	r3, [r3, #8]
 800167a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800167c:	693b      	ldr	r3, [r7, #16]
 800167e:	43db      	mvns	r3, r3
 8001680:	69ba      	ldr	r2, [r7, #24]
 8001682:	4013      	ands	r3, r2
 8001684:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800168e:	2b00      	cmp	r3, #0
 8001690:	d003      	beq.n	800169a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001692:	69ba      	ldr	r2, [r7, #24]
 8001694:	693b      	ldr	r3, [r7, #16]
 8001696:	4313      	orrs	r3, r2
 8001698:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800169a:	4a32      	ldr	r2, [pc, #200]	; (8001764 <HAL_GPIO_Init+0x334>)
 800169c:	69bb      	ldr	r3, [r7, #24]
 800169e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80016a0:	4b30      	ldr	r3, [pc, #192]	; (8001764 <HAL_GPIO_Init+0x334>)
 80016a2:	68db      	ldr	r3, [r3, #12]
 80016a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016a6:	693b      	ldr	r3, [r7, #16]
 80016a8:	43db      	mvns	r3, r3
 80016aa:	69ba      	ldr	r2, [r7, #24]
 80016ac:	4013      	ands	r3, r2
 80016ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d003      	beq.n	80016c4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80016bc:	69ba      	ldr	r2, [r7, #24]
 80016be:	693b      	ldr	r3, [r7, #16]
 80016c0:	4313      	orrs	r3, r2
 80016c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80016c4:	4a27      	ldr	r2, [pc, #156]	; (8001764 <HAL_GPIO_Init+0x334>)
 80016c6:	69bb      	ldr	r3, [r7, #24]
 80016c8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80016ca:	4b26      	ldr	r3, [pc, #152]	; (8001764 <HAL_GPIO_Init+0x334>)
 80016cc:	685b      	ldr	r3, [r3, #4]
 80016ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016d0:	693b      	ldr	r3, [r7, #16]
 80016d2:	43db      	mvns	r3, r3
 80016d4:	69ba      	ldr	r2, [r7, #24]
 80016d6:	4013      	ands	r3, r2
 80016d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d003      	beq.n	80016ee <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80016e6:	69ba      	ldr	r2, [r7, #24]
 80016e8:	693b      	ldr	r3, [r7, #16]
 80016ea:	4313      	orrs	r3, r2
 80016ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80016ee:	4a1d      	ldr	r2, [pc, #116]	; (8001764 <HAL_GPIO_Init+0x334>)
 80016f0:	69bb      	ldr	r3, [r7, #24]
 80016f2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80016f4:	4b1b      	ldr	r3, [pc, #108]	; (8001764 <HAL_GPIO_Init+0x334>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016fa:	693b      	ldr	r3, [r7, #16]
 80016fc:	43db      	mvns	r3, r3
 80016fe:	69ba      	ldr	r2, [r7, #24]
 8001700:	4013      	ands	r3, r2
 8001702:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800170c:	2b00      	cmp	r3, #0
 800170e:	d003      	beq.n	8001718 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001710:	69ba      	ldr	r2, [r7, #24]
 8001712:	693b      	ldr	r3, [r7, #16]
 8001714:	4313      	orrs	r3, r2
 8001716:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001718:	4a12      	ldr	r2, [pc, #72]	; (8001764 <HAL_GPIO_Init+0x334>)
 800171a:	69bb      	ldr	r3, [r7, #24]
 800171c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800171e:	69fb      	ldr	r3, [r7, #28]
 8001720:	3301      	adds	r3, #1
 8001722:	61fb      	str	r3, [r7, #28]
 8001724:	69fb      	ldr	r3, [r7, #28]
 8001726:	2b0f      	cmp	r3, #15
 8001728:	f67f ae90 	bls.w	800144c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800172c:	bf00      	nop
 800172e:	bf00      	nop
 8001730:	3724      	adds	r7, #36	; 0x24
 8001732:	46bd      	mov	sp, r7
 8001734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001738:	4770      	bx	lr
 800173a:	bf00      	nop
 800173c:	40023800 	.word	0x40023800
 8001740:	40013800 	.word	0x40013800
 8001744:	40020000 	.word	0x40020000
 8001748:	40020400 	.word	0x40020400
 800174c:	40020800 	.word	0x40020800
 8001750:	40020c00 	.word	0x40020c00
 8001754:	40021000 	.word	0x40021000
 8001758:	40021400 	.word	0x40021400
 800175c:	40021800 	.word	0x40021800
 8001760:	40021c00 	.word	0x40021c00
 8001764:	40013c00 	.word	0x40013c00

08001768 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b086      	sub	sp, #24
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	2b00      	cmp	r3, #0
 8001774:	d101      	bne.n	800177a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001776:	2301      	movs	r3, #1
 8001778:	e267      	b.n	8001c4a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f003 0301 	and.w	r3, r3, #1
 8001782:	2b00      	cmp	r3, #0
 8001784:	d075      	beq.n	8001872 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001786:	4b88      	ldr	r3, [pc, #544]	; (80019a8 <HAL_RCC_OscConfig+0x240>)
 8001788:	689b      	ldr	r3, [r3, #8]
 800178a:	f003 030c 	and.w	r3, r3, #12
 800178e:	2b04      	cmp	r3, #4
 8001790:	d00c      	beq.n	80017ac <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001792:	4b85      	ldr	r3, [pc, #532]	; (80019a8 <HAL_RCC_OscConfig+0x240>)
 8001794:	689b      	ldr	r3, [r3, #8]
 8001796:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800179a:	2b08      	cmp	r3, #8
 800179c:	d112      	bne.n	80017c4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800179e:	4b82      	ldr	r3, [pc, #520]	; (80019a8 <HAL_RCC_OscConfig+0x240>)
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80017aa:	d10b      	bne.n	80017c4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017ac:	4b7e      	ldr	r3, [pc, #504]	; (80019a8 <HAL_RCC_OscConfig+0x240>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d05b      	beq.n	8001870 <HAL_RCC_OscConfig+0x108>
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d157      	bne.n	8001870 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80017c0:	2301      	movs	r3, #1
 80017c2:	e242      	b.n	8001c4a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017cc:	d106      	bne.n	80017dc <HAL_RCC_OscConfig+0x74>
 80017ce:	4b76      	ldr	r3, [pc, #472]	; (80019a8 <HAL_RCC_OscConfig+0x240>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	4a75      	ldr	r2, [pc, #468]	; (80019a8 <HAL_RCC_OscConfig+0x240>)
 80017d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017d8:	6013      	str	r3, [r2, #0]
 80017da:	e01d      	b.n	8001818 <HAL_RCC_OscConfig+0xb0>
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80017e4:	d10c      	bne.n	8001800 <HAL_RCC_OscConfig+0x98>
 80017e6:	4b70      	ldr	r3, [pc, #448]	; (80019a8 <HAL_RCC_OscConfig+0x240>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4a6f      	ldr	r2, [pc, #444]	; (80019a8 <HAL_RCC_OscConfig+0x240>)
 80017ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017f0:	6013      	str	r3, [r2, #0]
 80017f2:	4b6d      	ldr	r3, [pc, #436]	; (80019a8 <HAL_RCC_OscConfig+0x240>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	4a6c      	ldr	r2, [pc, #432]	; (80019a8 <HAL_RCC_OscConfig+0x240>)
 80017f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017fc:	6013      	str	r3, [r2, #0]
 80017fe:	e00b      	b.n	8001818 <HAL_RCC_OscConfig+0xb0>
 8001800:	4b69      	ldr	r3, [pc, #420]	; (80019a8 <HAL_RCC_OscConfig+0x240>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4a68      	ldr	r2, [pc, #416]	; (80019a8 <HAL_RCC_OscConfig+0x240>)
 8001806:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800180a:	6013      	str	r3, [r2, #0]
 800180c:	4b66      	ldr	r3, [pc, #408]	; (80019a8 <HAL_RCC_OscConfig+0x240>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a65      	ldr	r2, [pc, #404]	; (80019a8 <HAL_RCC_OscConfig+0x240>)
 8001812:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001816:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	2b00      	cmp	r3, #0
 800181e:	d013      	beq.n	8001848 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001820:	f7ff f8e6 	bl	80009f0 <HAL_GetTick>
 8001824:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001826:	e008      	b.n	800183a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001828:	f7ff f8e2 	bl	80009f0 <HAL_GetTick>
 800182c:	4602      	mov	r2, r0
 800182e:	693b      	ldr	r3, [r7, #16]
 8001830:	1ad3      	subs	r3, r2, r3
 8001832:	2b64      	cmp	r3, #100	; 0x64
 8001834:	d901      	bls.n	800183a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001836:	2303      	movs	r3, #3
 8001838:	e207      	b.n	8001c4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800183a:	4b5b      	ldr	r3, [pc, #364]	; (80019a8 <HAL_RCC_OscConfig+0x240>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001842:	2b00      	cmp	r3, #0
 8001844:	d0f0      	beq.n	8001828 <HAL_RCC_OscConfig+0xc0>
 8001846:	e014      	b.n	8001872 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001848:	f7ff f8d2 	bl	80009f0 <HAL_GetTick>
 800184c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800184e:	e008      	b.n	8001862 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001850:	f7ff f8ce 	bl	80009f0 <HAL_GetTick>
 8001854:	4602      	mov	r2, r0
 8001856:	693b      	ldr	r3, [r7, #16]
 8001858:	1ad3      	subs	r3, r2, r3
 800185a:	2b64      	cmp	r3, #100	; 0x64
 800185c:	d901      	bls.n	8001862 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800185e:	2303      	movs	r3, #3
 8001860:	e1f3      	b.n	8001c4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001862:	4b51      	ldr	r3, [pc, #324]	; (80019a8 <HAL_RCC_OscConfig+0x240>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800186a:	2b00      	cmp	r3, #0
 800186c:	d1f0      	bne.n	8001850 <HAL_RCC_OscConfig+0xe8>
 800186e:	e000      	b.n	8001872 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001870:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f003 0302 	and.w	r3, r3, #2
 800187a:	2b00      	cmp	r3, #0
 800187c:	d063      	beq.n	8001946 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800187e:	4b4a      	ldr	r3, [pc, #296]	; (80019a8 <HAL_RCC_OscConfig+0x240>)
 8001880:	689b      	ldr	r3, [r3, #8]
 8001882:	f003 030c 	and.w	r3, r3, #12
 8001886:	2b00      	cmp	r3, #0
 8001888:	d00b      	beq.n	80018a2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800188a:	4b47      	ldr	r3, [pc, #284]	; (80019a8 <HAL_RCC_OscConfig+0x240>)
 800188c:	689b      	ldr	r3, [r3, #8]
 800188e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001892:	2b08      	cmp	r3, #8
 8001894:	d11c      	bne.n	80018d0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001896:	4b44      	ldr	r3, [pc, #272]	; (80019a8 <HAL_RCC_OscConfig+0x240>)
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d116      	bne.n	80018d0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018a2:	4b41      	ldr	r3, [pc, #260]	; (80019a8 <HAL_RCC_OscConfig+0x240>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f003 0302 	and.w	r3, r3, #2
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d005      	beq.n	80018ba <HAL_RCC_OscConfig+0x152>
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	68db      	ldr	r3, [r3, #12]
 80018b2:	2b01      	cmp	r3, #1
 80018b4:	d001      	beq.n	80018ba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80018b6:	2301      	movs	r3, #1
 80018b8:	e1c7      	b.n	8001c4a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018ba:	4b3b      	ldr	r3, [pc, #236]	; (80019a8 <HAL_RCC_OscConfig+0x240>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	691b      	ldr	r3, [r3, #16]
 80018c6:	00db      	lsls	r3, r3, #3
 80018c8:	4937      	ldr	r1, [pc, #220]	; (80019a8 <HAL_RCC_OscConfig+0x240>)
 80018ca:	4313      	orrs	r3, r2
 80018cc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018ce:	e03a      	b.n	8001946 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	68db      	ldr	r3, [r3, #12]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d020      	beq.n	800191a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018d8:	4b34      	ldr	r3, [pc, #208]	; (80019ac <HAL_RCC_OscConfig+0x244>)
 80018da:	2201      	movs	r2, #1
 80018dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018de:	f7ff f887 	bl	80009f0 <HAL_GetTick>
 80018e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018e4:	e008      	b.n	80018f8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018e6:	f7ff f883 	bl	80009f0 <HAL_GetTick>
 80018ea:	4602      	mov	r2, r0
 80018ec:	693b      	ldr	r3, [r7, #16]
 80018ee:	1ad3      	subs	r3, r2, r3
 80018f0:	2b02      	cmp	r3, #2
 80018f2:	d901      	bls.n	80018f8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80018f4:	2303      	movs	r3, #3
 80018f6:	e1a8      	b.n	8001c4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018f8:	4b2b      	ldr	r3, [pc, #172]	; (80019a8 <HAL_RCC_OscConfig+0x240>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f003 0302 	and.w	r3, r3, #2
 8001900:	2b00      	cmp	r3, #0
 8001902:	d0f0      	beq.n	80018e6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001904:	4b28      	ldr	r3, [pc, #160]	; (80019a8 <HAL_RCC_OscConfig+0x240>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	691b      	ldr	r3, [r3, #16]
 8001910:	00db      	lsls	r3, r3, #3
 8001912:	4925      	ldr	r1, [pc, #148]	; (80019a8 <HAL_RCC_OscConfig+0x240>)
 8001914:	4313      	orrs	r3, r2
 8001916:	600b      	str	r3, [r1, #0]
 8001918:	e015      	b.n	8001946 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800191a:	4b24      	ldr	r3, [pc, #144]	; (80019ac <HAL_RCC_OscConfig+0x244>)
 800191c:	2200      	movs	r2, #0
 800191e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001920:	f7ff f866 	bl	80009f0 <HAL_GetTick>
 8001924:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001926:	e008      	b.n	800193a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001928:	f7ff f862 	bl	80009f0 <HAL_GetTick>
 800192c:	4602      	mov	r2, r0
 800192e:	693b      	ldr	r3, [r7, #16]
 8001930:	1ad3      	subs	r3, r2, r3
 8001932:	2b02      	cmp	r3, #2
 8001934:	d901      	bls.n	800193a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001936:	2303      	movs	r3, #3
 8001938:	e187      	b.n	8001c4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800193a:	4b1b      	ldr	r3, [pc, #108]	; (80019a8 <HAL_RCC_OscConfig+0x240>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f003 0302 	and.w	r3, r3, #2
 8001942:	2b00      	cmp	r3, #0
 8001944:	d1f0      	bne.n	8001928 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f003 0308 	and.w	r3, r3, #8
 800194e:	2b00      	cmp	r3, #0
 8001950:	d036      	beq.n	80019c0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	695b      	ldr	r3, [r3, #20]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d016      	beq.n	8001988 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800195a:	4b15      	ldr	r3, [pc, #84]	; (80019b0 <HAL_RCC_OscConfig+0x248>)
 800195c:	2201      	movs	r2, #1
 800195e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001960:	f7ff f846 	bl	80009f0 <HAL_GetTick>
 8001964:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001966:	e008      	b.n	800197a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001968:	f7ff f842 	bl	80009f0 <HAL_GetTick>
 800196c:	4602      	mov	r2, r0
 800196e:	693b      	ldr	r3, [r7, #16]
 8001970:	1ad3      	subs	r3, r2, r3
 8001972:	2b02      	cmp	r3, #2
 8001974:	d901      	bls.n	800197a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001976:	2303      	movs	r3, #3
 8001978:	e167      	b.n	8001c4a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800197a:	4b0b      	ldr	r3, [pc, #44]	; (80019a8 <HAL_RCC_OscConfig+0x240>)
 800197c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800197e:	f003 0302 	and.w	r3, r3, #2
 8001982:	2b00      	cmp	r3, #0
 8001984:	d0f0      	beq.n	8001968 <HAL_RCC_OscConfig+0x200>
 8001986:	e01b      	b.n	80019c0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001988:	4b09      	ldr	r3, [pc, #36]	; (80019b0 <HAL_RCC_OscConfig+0x248>)
 800198a:	2200      	movs	r2, #0
 800198c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800198e:	f7ff f82f 	bl	80009f0 <HAL_GetTick>
 8001992:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001994:	e00e      	b.n	80019b4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001996:	f7ff f82b 	bl	80009f0 <HAL_GetTick>
 800199a:	4602      	mov	r2, r0
 800199c:	693b      	ldr	r3, [r7, #16]
 800199e:	1ad3      	subs	r3, r2, r3
 80019a0:	2b02      	cmp	r3, #2
 80019a2:	d907      	bls.n	80019b4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80019a4:	2303      	movs	r3, #3
 80019a6:	e150      	b.n	8001c4a <HAL_RCC_OscConfig+0x4e2>
 80019a8:	40023800 	.word	0x40023800
 80019ac:	42470000 	.word	0x42470000
 80019b0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019b4:	4b88      	ldr	r3, [pc, #544]	; (8001bd8 <HAL_RCC_OscConfig+0x470>)
 80019b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80019b8:	f003 0302 	and.w	r3, r3, #2
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d1ea      	bne.n	8001996 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f003 0304 	and.w	r3, r3, #4
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	f000 8097 	beq.w	8001afc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019ce:	2300      	movs	r3, #0
 80019d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019d2:	4b81      	ldr	r3, [pc, #516]	; (8001bd8 <HAL_RCC_OscConfig+0x470>)
 80019d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d10f      	bne.n	80019fe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019de:	2300      	movs	r3, #0
 80019e0:	60bb      	str	r3, [r7, #8]
 80019e2:	4b7d      	ldr	r3, [pc, #500]	; (8001bd8 <HAL_RCC_OscConfig+0x470>)
 80019e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019e6:	4a7c      	ldr	r2, [pc, #496]	; (8001bd8 <HAL_RCC_OscConfig+0x470>)
 80019e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019ec:	6413      	str	r3, [r2, #64]	; 0x40
 80019ee:	4b7a      	ldr	r3, [pc, #488]	; (8001bd8 <HAL_RCC_OscConfig+0x470>)
 80019f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019f6:	60bb      	str	r3, [r7, #8]
 80019f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80019fa:	2301      	movs	r3, #1
 80019fc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019fe:	4b77      	ldr	r3, [pc, #476]	; (8001bdc <HAL_RCC_OscConfig+0x474>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d118      	bne.n	8001a3c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a0a:	4b74      	ldr	r3, [pc, #464]	; (8001bdc <HAL_RCC_OscConfig+0x474>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	4a73      	ldr	r2, [pc, #460]	; (8001bdc <HAL_RCC_OscConfig+0x474>)
 8001a10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a14:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a16:	f7fe ffeb 	bl	80009f0 <HAL_GetTick>
 8001a1a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a1c:	e008      	b.n	8001a30 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a1e:	f7fe ffe7 	bl	80009f0 <HAL_GetTick>
 8001a22:	4602      	mov	r2, r0
 8001a24:	693b      	ldr	r3, [r7, #16]
 8001a26:	1ad3      	subs	r3, r2, r3
 8001a28:	2b02      	cmp	r3, #2
 8001a2a:	d901      	bls.n	8001a30 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001a2c:	2303      	movs	r3, #3
 8001a2e:	e10c      	b.n	8001c4a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a30:	4b6a      	ldr	r3, [pc, #424]	; (8001bdc <HAL_RCC_OscConfig+0x474>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d0f0      	beq.n	8001a1e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	689b      	ldr	r3, [r3, #8]
 8001a40:	2b01      	cmp	r3, #1
 8001a42:	d106      	bne.n	8001a52 <HAL_RCC_OscConfig+0x2ea>
 8001a44:	4b64      	ldr	r3, [pc, #400]	; (8001bd8 <HAL_RCC_OscConfig+0x470>)
 8001a46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a48:	4a63      	ldr	r2, [pc, #396]	; (8001bd8 <HAL_RCC_OscConfig+0x470>)
 8001a4a:	f043 0301 	orr.w	r3, r3, #1
 8001a4e:	6713      	str	r3, [r2, #112]	; 0x70
 8001a50:	e01c      	b.n	8001a8c <HAL_RCC_OscConfig+0x324>
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	689b      	ldr	r3, [r3, #8]
 8001a56:	2b05      	cmp	r3, #5
 8001a58:	d10c      	bne.n	8001a74 <HAL_RCC_OscConfig+0x30c>
 8001a5a:	4b5f      	ldr	r3, [pc, #380]	; (8001bd8 <HAL_RCC_OscConfig+0x470>)
 8001a5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a5e:	4a5e      	ldr	r2, [pc, #376]	; (8001bd8 <HAL_RCC_OscConfig+0x470>)
 8001a60:	f043 0304 	orr.w	r3, r3, #4
 8001a64:	6713      	str	r3, [r2, #112]	; 0x70
 8001a66:	4b5c      	ldr	r3, [pc, #368]	; (8001bd8 <HAL_RCC_OscConfig+0x470>)
 8001a68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a6a:	4a5b      	ldr	r2, [pc, #364]	; (8001bd8 <HAL_RCC_OscConfig+0x470>)
 8001a6c:	f043 0301 	orr.w	r3, r3, #1
 8001a70:	6713      	str	r3, [r2, #112]	; 0x70
 8001a72:	e00b      	b.n	8001a8c <HAL_RCC_OscConfig+0x324>
 8001a74:	4b58      	ldr	r3, [pc, #352]	; (8001bd8 <HAL_RCC_OscConfig+0x470>)
 8001a76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a78:	4a57      	ldr	r2, [pc, #348]	; (8001bd8 <HAL_RCC_OscConfig+0x470>)
 8001a7a:	f023 0301 	bic.w	r3, r3, #1
 8001a7e:	6713      	str	r3, [r2, #112]	; 0x70
 8001a80:	4b55      	ldr	r3, [pc, #340]	; (8001bd8 <HAL_RCC_OscConfig+0x470>)
 8001a82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a84:	4a54      	ldr	r2, [pc, #336]	; (8001bd8 <HAL_RCC_OscConfig+0x470>)
 8001a86:	f023 0304 	bic.w	r3, r3, #4
 8001a8a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	689b      	ldr	r3, [r3, #8]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d015      	beq.n	8001ac0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a94:	f7fe ffac 	bl	80009f0 <HAL_GetTick>
 8001a98:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a9a:	e00a      	b.n	8001ab2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a9c:	f7fe ffa8 	bl	80009f0 <HAL_GetTick>
 8001aa0:	4602      	mov	r2, r0
 8001aa2:	693b      	ldr	r3, [r7, #16]
 8001aa4:	1ad3      	subs	r3, r2, r3
 8001aa6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d901      	bls.n	8001ab2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001aae:	2303      	movs	r3, #3
 8001ab0:	e0cb      	b.n	8001c4a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ab2:	4b49      	ldr	r3, [pc, #292]	; (8001bd8 <HAL_RCC_OscConfig+0x470>)
 8001ab4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ab6:	f003 0302 	and.w	r3, r3, #2
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d0ee      	beq.n	8001a9c <HAL_RCC_OscConfig+0x334>
 8001abe:	e014      	b.n	8001aea <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ac0:	f7fe ff96 	bl	80009f0 <HAL_GetTick>
 8001ac4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ac6:	e00a      	b.n	8001ade <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ac8:	f7fe ff92 	bl	80009f0 <HAL_GetTick>
 8001acc:	4602      	mov	r2, r0
 8001ace:	693b      	ldr	r3, [r7, #16]
 8001ad0:	1ad3      	subs	r3, r2, r3
 8001ad2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d901      	bls.n	8001ade <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001ada:	2303      	movs	r3, #3
 8001adc:	e0b5      	b.n	8001c4a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ade:	4b3e      	ldr	r3, [pc, #248]	; (8001bd8 <HAL_RCC_OscConfig+0x470>)
 8001ae0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ae2:	f003 0302 	and.w	r3, r3, #2
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d1ee      	bne.n	8001ac8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001aea:	7dfb      	ldrb	r3, [r7, #23]
 8001aec:	2b01      	cmp	r3, #1
 8001aee:	d105      	bne.n	8001afc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001af0:	4b39      	ldr	r3, [pc, #228]	; (8001bd8 <HAL_RCC_OscConfig+0x470>)
 8001af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af4:	4a38      	ldr	r2, [pc, #224]	; (8001bd8 <HAL_RCC_OscConfig+0x470>)
 8001af6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001afa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	699b      	ldr	r3, [r3, #24]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	f000 80a1 	beq.w	8001c48 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001b06:	4b34      	ldr	r3, [pc, #208]	; (8001bd8 <HAL_RCC_OscConfig+0x470>)
 8001b08:	689b      	ldr	r3, [r3, #8]
 8001b0a:	f003 030c 	and.w	r3, r3, #12
 8001b0e:	2b08      	cmp	r3, #8
 8001b10:	d05c      	beq.n	8001bcc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	699b      	ldr	r3, [r3, #24]
 8001b16:	2b02      	cmp	r3, #2
 8001b18:	d141      	bne.n	8001b9e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b1a:	4b31      	ldr	r3, [pc, #196]	; (8001be0 <HAL_RCC_OscConfig+0x478>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b20:	f7fe ff66 	bl	80009f0 <HAL_GetTick>
 8001b24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b26:	e008      	b.n	8001b3a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b28:	f7fe ff62 	bl	80009f0 <HAL_GetTick>
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	693b      	ldr	r3, [r7, #16]
 8001b30:	1ad3      	subs	r3, r2, r3
 8001b32:	2b02      	cmp	r3, #2
 8001b34:	d901      	bls.n	8001b3a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001b36:	2303      	movs	r3, #3
 8001b38:	e087      	b.n	8001c4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b3a:	4b27      	ldr	r3, [pc, #156]	; (8001bd8 <HAL_RCC_OscConfig+0x470>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d1f0      	bne.n	8001b28 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	69da      	ldr	r2, [r3, #28]
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6a1b      	ldr	r3, [r3, #32]
 8001b4e:	431a      	orrs	r2, r3
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b54:	019b      	lsls	r3, r3, #6
 8001b56:	431a      	orrs	r2, r3
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b5c:	085b      	lsrs	r3, r3, #1
 8001b5e:	3b01      	subs	r3, #1
 8001b60:	041b      	lsls	r3, r3, #16
 8001b62:	431a      	orrs	r2, r3
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b68:	061b      	lsls	r3, r3, #24
 8001b6a:	491b      	ldr	r1, [pc, #108]	; (8001bd8 <HAL_RCC_OscConfig+0x470>)
 8001b6c:	4313      	orrs	r3, r2
 8001b6e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b70:	4b1b      	ldr	r3, [pc, #108]	; (8001be0 <HAL_RCC_OscConfig+0x478>)
 8001b72:	2201      	movs	r2, #1
 8001b74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b76:	f7fe ff3b 	bl	80009f0 <HAL_GetTick>
 8001b7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b7c:	e008      	b.n	8001b90 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b7e:	f7fe ff37 	bl	80009f0 <HAL_GetTick>
 8001b82:	4602      	mov	r2, r0
 8001b84:	693b      	ldr	r3, [r7, #16]
 8001b86:	1ad3      	subs	r3, r2, r3
 8001b88:	2b02      	cmp	r3, #2
 8001b8a:	d901      	bls.n	8001b90 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001b8c:	2303      	movs	r3, #3
 8001b8e:	e05c      	b.n	8001c4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b90:	4b11      	ldr	r3, [pc, #68]	; (8001bd8 <HAL_RCC_OscConfig+0x470>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d0f0      	beq.n	8001b7e <HAL_RCC_OscConfig+0x416>
 8001b9c:	e054      	b.n	8001c48 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b9e:	4b10      	ldr	r3, [pc, #64]	; (8001be0 <HAL_RCC_OscConfig+0x478>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ba4:	f7fe ff24 	bl	80009f0 <HAL_GetTick>
 8001ba8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001baa:	e008      	b.n	8001bbe <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bac:	f7fe ff20 	bl	80009f0 <HAL_GetTick>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	693b      	ldr	r3, [r7, #16]
 8001bb4:	1ad3      	subs	r3, r2, r3
 8001bb6:	2b02      	cmp	r3, #2
 8001bb8:	d901      	bls.n	8001bbe <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001bba:	2303      	movs	r3, #3
 8001bbc:	e045      	b.n	8001c4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bbe:	4b06      	ldr	r3, [pc, #24]	; (8001bd8 <HAL_RCC_OscConfig+0x470>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d1f0      	bne.n	8001bac <HAL_RCC_OscConfig+0x444>
 8001bca:	e03d      	b.n	8001c48 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	699b      	ldr	r3, [r3, #24]
 8001bd0:	2b01      	cmp	r3, #1
 8001bd2:	d107      	bne.n	8001be4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	e038      	b.n	8001c4a <HAL_RCC_OscConfig+0x4e2>
 8001bd8:	40023800 	.word	0x40023800
 8001bdc:	40007000 	.word	0x40007000
 8001be0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001be4:	4b1b      	ldr	r3, [pc, #108]	; (8001c54 <HAL_RCC_OscConfig+0x4ec>)
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	699b      	ldr	r3, [r3, #24]
 8001bee:	2b01      	cmp	r3, #1
 8001bf0:	d028      	beq.n	8001c44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001bfc:	429a      	cmp	r2, r3
 8001bfe:	d121      	bne.n	8001c44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c0a:	429a      	cmp	r2, r3
 8001c0c:	d11a      	bne.n	8001c44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001c0e:	68fa      	ldr	r2, [r7, #12]
 8001c10:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001c14:	4013      	ands	r3, r2
 8001c16:	687a      	ldr	r2, [r7, #4]
 8001c18:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001c1a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001c1c:	4293      	cmp	r3, r2
 8001c1e:	d111      	bne.n	8001c44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c2a:	085b      	lsrs	r3, r3, #1
 8001c2c:	3b01      	subs	r3, #1
 8001c2e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001c30:	429a      	cmp	r2, r3
 8001c32:	d107      	bne.n	8001c44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c3e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001c40:	429a      	cmp	r2, r3
 8001c42:	d001      	beq.n	8001c48 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001c44:	2301      	movs	r3, #1
 8001c46:	e000      	b.n	8001c4a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001c48:	2300      	movs	r3, #0
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	3718      	adds	r7, #24
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	bf00      	nop
 8001c54:	40023800 	.word	0x40023800

08001c58 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b084      	sub	sp, #16
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
 8001c60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d101      	bne.n	8001c6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c68:	2301      	movs	r3, #1
 8001c6a:	e0cc      	b.n	8001e06 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c6c:	4b68      	ldr	r3, [pc, #416]	; (8001e10 <HAL_RCC_ClockConfig+0x1b8>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f003 0307 	and.w	r3, r3, #7
 8001c74:	683a      	ldr	r2, [r7, #0]
 8001c76:	429a      	cmp	r2, r3
 8001c78:	d90c      	bls.n	8001c94 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c7a:	4b65      	ldr	r3, [pc, #404]	; (8001e10 <HAL_RCC_ClockConfig+0x1b8>)
 8001c7c:	683a      	ldr	r2, [r7, #0]
 8001c7e:	b2d2      	uxtb	r2, r2
 8001c80:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c82:	4b63      	ldr	r3, [pc, #396]	; (8001e10 <HAL_RCC_ClockConfig+0x1b8>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f003 0307 	and.w	r3, r3, #7
 8001c8a:	683a      	ldr	r2, [r7, #0]
 8001c8c:	429a      	cmp	r2, r3
 8001c8e:	d001      	beq.n	8001c94 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001c90:	2301      	movs	r3, #1
 8001c92:	e0b8      	b.n	8001e06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f003 0302 	and.w	r3, r3, #2
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d020      	beq.n	8001ce2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f003 0304 	and.w	r3, r3, #4
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d005      	beq.n	8001cb8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001cac:	4b59      	ldr	r3, [pc, #356]	; (8001e14 <HAL_RCC_ClockConfig+0x1bc>)
 8001cae:	689b      	ldr	r3, [r3, #8]
 8001cb0:	4a58      	ldr	r2, [pc, #352]	; (8001e14 <HAL_RCC_ClockConfig+0x1bc>)
 8001cb2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001cb6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f003 0308 	and.w	r3, r3, #8
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d005      	beq.n	8001cd0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001cc4:	4b53      	ldr	r3, [pc, #332]	; (8001e14 <HAL_RCC_ClockConfig+0x1bc>)
 8001cc6:	689b      	ldr	r3, [r3, #8]
 8001cc8:	4a52      	ldr	r2, [pc, #328]	; (8001e14 <HAL_RCC_ClockConfig+0x1bc>)
 8001cca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001cce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001cd0:	4b50      	ldr	r3, [pc, #320]	; (8001e14 <HAL_RCC_ClockConfig+0x1bc>)
 8001cd2:	689b      	ldr	r3, [r3, #8]
 8001cd4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	689b      	ldr	r3, [r3, #8]
 8001cdc:	494d      	ldr	r1, [pc, #308]	; (8001e14 <HAL_RCC_ClockConfig+0x1bc>)
 8001cde:	4313      	orrs	r3, r2
 8001ce0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f003 0301 	and.w	r3, r3, #1
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d044      	beq.n	8001d78 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	2b01      	cmp	r3, #1
 8001cf4:	d107      	bne.n	8001d06 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cf6:	4b47      	ldr	r3, [pc, #284]	; (8001e14 <HAL_RCC_ClockConfig+0x1bc>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d119      	bne.n	8001d36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d02:	2301      	movs	r3, #1
 8001d04:	e07f      	b.n	8001e06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	2b02      	cmp	r3, #2
 8001d0c:	d003      	beq.n	8001d16 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001d12:	2b03      	cmp	r3, #3
 8001d14:	d107      	bne.n	8001d26 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d16:	4b3f      	ldr	r3, [pc, #252]	; (8001e14 <HAL_RCC_ClockConfig+0x1bc>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d109      	bne.n	8001d36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d22:	2301      	movs	r3, #1
 8001d24:	e06f      	b.n	8001e06 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d26:	4b3b      	ldr	r3, [pc, #236]	; (8001e14 <HAL_RCC_ClockConfig+0x1bc>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f003 0302 	and.w	r3, r3, #2
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d101      	bne.n	8001d36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d32:	2301      	movs	r3, #1
 8001d34:	e067      	b.n	8001e06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d36:	4b37      	ldr	r3, [pc, #220]	; (8001e14 <HAL_RCC_ClockConfig+0x1bc>)
 8001d38:	689b      	ldr	r3, [r3, #8]
 8001d3a:	f023 0203 	bic.w	r2, r3, #3
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	4934      	ldr	r1, [pc, #208]	; (8001e14 <HAL_RCC_ClockConfig+0x1bc>)
 8001d44:	4313      	orrs	r3, r2
 8001d46:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d48:	f7fe fe52 	bl	80009f0 <HAL_GetTick>
 8001d4c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d4e:	e00a      	b.n	8001d66 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d50:	f7fe fe4e 	bl	80009f0 <HAL_GetTick>
 8001d54:	4602      	mov	r2, r0
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	1ad3      	subs	r3, r2, r3
 8001d5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d901      	bls.n	8001d66 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d62:	2303      	movs	r3, #3
 8001d64:	e04f      	b.n	8001e06 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d66:	4b2b      	ldr	r3, [pc, #172]	; (8001e14 <HAL_RCC_ClockConfig+0x1bc>)
 8001d68:	689b      	ldr	r3, [r3, #8]
 8001d6a:	f003 020c 	and.w	r2, r3, #12
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	009b      	lsls	r3, r3, #2
 8001d74:	429a      	cmp	r2, r3
 8001d76:	d1eb      	bne.n	8001d50 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d78:	4b25      	ldr	r3, [pc, #148]	; (8001e10 <HAL_RCC_ClockConfig+0x1b8>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f003 0307 	and.w	r3, r3, #7
 8001d80:	683a      	ldr	r2, [r7, #0]
 8001d82:	429a      	cmp	r2, r3
 8001d84:	d20c      	bcs.n	8001da0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d86:	4b22      	ldr	r3, [pc, #136]	; (8001e10 <HAL_RCC_ClockConfig+0x1b8>)
 8001d88:	683a      	ldr	r2, [r7, #0]
 8001d8a:	b2d2      	uxtb	r2, r2
 8001d8c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d8e:	4b20      	ldr	r3, [pc, #128]	; (8001e10 <HAL_RCC_ClockConfig+0x1b8>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f003 0307 	and.w	r3, r3, #7
 8001d96:	683a      	ldr	r2, [r7, #0]
 8001d98:	429a      	cmp	r2, r3
 8001d9a:	d001      	beq.n	8001da0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	e032      	b.n	8001e06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f003 0304 	and.w	r3, r3, #4
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d008      	beq.n	8001dbe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001dac:	4b19      	ldr	r3, [pc, #100]	; (8001e14 <HAL_RCC_ClockConfig+0x1bc>)
 8001dae:	689b      	ldr	r3, [r3, #8]
 8001db0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	68db      	ldr	r3, [r3, #12]
 8001db8:	4916      	ldr	r1, [pc, #88]	; (8001e14 <HAL_RCC_ClockConfig+0x1bc>)
 8001dba:	4313      	orrs	r3, r2
 8001dbc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f003 0308 	and.w	r3, r3, #8
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d009      	beq.n	8001dde <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001dca:	4b12      	ldr	r3, [pc, #72]	; (8001e14 <HAL_RCC_ClockConfig+0x1bc>)
 8001dcc:	689b      	ldr	r3, [r3, #8]
 8001dce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	691b      	ldr	r3, [r3, #16]
 8001dd6:	00db      	lsls	r3, r3, #3
 8001dd8:	490e      	ldr	r1, [pc, #56]	; (8001e14 <HAL_RCC_ClockConfig+0x1bc>)
 8001dda:	4313      	orrs	r3, r2
 8001ddc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001dde:	f000 f821 	bl	8001e24 <HAL_RCC_GetSysClockFreq>
 8001de2:	4602      	mov	r2, r0
 8001de4:	4b0b      	ldr	r3, [pc, #44]	; (8001e14 <HAL_RCC_ClockConfig+0x1bc>)
 8001de6:	689b      	ldr	r3, [r3, #8]
 8001de8:	091b      	lsrs	r3, r3, #4
 8001dea:	f003 030f 	and.w	r3, r3, #15
 8001dee:	490a      	ldr	r1, [pc, #40]	; (8001e18 <HAL_RCC_ClockConfig+0x1c0>)
 8001df0:	5ccb      	ldrb	r3, [r1, r3]
 8001df2:	fa22 f303 	lsr.w	r3, r2, r3
 8001df6:	4a09      	ldr	r2, [pc, #36]	; (8001e1c <HAL_RCC_ClockConfig+0x1c4>)
 8001df8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001dfa:	4b09      	ldr	r3, [pc, #36]	; (8001e20 <HAL_RCC_ClockConfig+0x1c8>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f7fe fdb2 	bl	8000968 <HAL_InitTick>

  return HAL_OK;
 8001e04:	2300      	movs	r3, #0
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	3710      	adds	r7, #16
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	bf00      	nop
 8001e10:	40023c00 	.word	0x40023c00
 8001e14:	40023800 	.word	0x40023800
 8001e18:	080032f0 	.word	0x080032f0
 8001e1c:	20000000 	.word	0x20000000
 8001e20:	20000004 	.word	0x20000004

08001e24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001e28:	b090      	sub	sp, #64	; 0x40
 8001e2a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	637b      	str	r3, [r7, #52]	; 0x34
 8001e30:	2300      	movs	r3, #0
 8001e32:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001e34:	2300      	movs	r3, #0
 8001e36:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001e3c:	4b59      	ldr	r3, [pc, #356]	; (8001fa4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001e3e:	689b      	ldr	r3, [r3, #8]
 8001e40:	f003 030c 	and.w	r3, r3, #12
 8001e44:	2b08      	cmp	r3, #8
 8001e46:	d00d      	beq.n	8001e64 <HAL_RCC_GetSysClockFreq+0x40>
 8001e48:	2b08      	cmp	r3, #8
 8001e4a:	f200 80a1 	bhi.w	8001f90 <HAL_RCC_GetSysClockFreq+0x16c>
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d002      	beq.n	8001e58 <HAL_RCC_GetSysClockFreq+0x34>
 8001e52:	2b04      	cmp	r3, #4
 8001e54:	d003      	beq.n	8001e5e <HAL_RCC_GetSysClockFreq+0x3a>
 8001e56:	e09b      	b.n	8001f90 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001e58:	4b53      	ldr	r3, [pc, #332]	; (8001fa8 <HAL_RCC_GetSysClockFreq+0x184>)
 8001e5a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8001e5c:	e09b      	b.n	8001f96 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001e5e:	4b53      	ldr	r3, [pc, #332]	; (8001fac <HAL_RCC_GetSysClockFreq+0x188>)
 8001e60:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001e62:	e098      	b.n	8001f96 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001e64:	4b4f      	ldr	r3, [pc, #316]	; (8001fa4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001e6c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001e6e:	4b4d      	ldr	r3, [pc, #308]	; (8001fa4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d028      	beq.n	8001ecc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e7a:	4b4a      	ldr	r3, [pc, #296]	; (8001fa4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	099b      	lsrs	r3, r3, #6
 8001e80:	2200      	movs	r2, #0
 8001e82:	623b      	str	r3, [r7, #32]
 8001e84:	627a      	str	r2, [r7, #36]	; 0x24
 8001e86:	6a3b      	ldr	r3, [r7, #32]
 8001e88:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001e8c:	2100      	movs	r1, #0
 8001e8e:	4b47      	ldr	r3, [pc, #284]	; (8001fac <HAL_RCC_GetSysClockFreq+0x188>)
 8001e90:	fb03 f201 	mul.w	r2, r3, r1
 8001e94:	2300      	movs	r3, #0
 8001e96:	fb00 f303 	mul.w	r3, r0, r3
 8001e9a:	4413      	add	r3, r2
 8001e9c:	4a43      	ldr	r2, [pc, #268]	; (8001fac <HAL_RCC_GetSysClockFreq+0x188>)
 8001e9e:	fba0 1202 	umull	r1, r2, r0, r2
 8001ea2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001ea4:	460a      	mov	r2, r1
 8001ea6:	62ba      	str	r2, [r7, #40]	; 0x28
 8001ea8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001eaa:	4413      	add	r3, r2
 8001eac:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001eae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	61bb      	str	r3, [r7, #24]
 8001eb4:	61fa      	str	r2, [r7, #28]
 8001eb6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001eba:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001ebe:	f7fe f983 	bl	80001c8 <__aeabi_uldivmod>
 8001ec2:	4602      	mov	r2, r0
 8001ec4:	460b      	mov	r3, r1
 8001ec6:	4613      	mov	r3, r2
 8001ec8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001eca:	e053      	b.n	8001f74 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ecc:	4b35      	ldr	r3, [pc, #212]	; (8001fa4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	099b      	lsrs	r3, r3, #6
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	613b      	str	r3, [r7, #16]
 8001ed6:	617a      	str	r2, [r7, #20]
 8001ed8:	693b      	ldr	r3, [r7, #16]
 8001eda:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001ede:	f04f 0b00 	mov.w	fp, #0
 8001ee2:	4652      	mov	r2, sl
 8001ee4:	465b      	mov	r3, fp
 8001ee6:	f04f 0000 	mov.w	r0, #0
 8001eea:	f04f 0100 	mov.w	r1, #0
 8001eee:	0159      	lsls	r1, r3, #5
 8001ef0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001ef4:	0150      	lsls	r0, r2, #5
 8001ef6:	4602      	mov	r2, r0
 8001ef8:	460b      	mov	r3, r1
 8001efa:	ebb2 080a 	subs.w	r8, r2, sl
 8001efe:	eb63 090b 	sbc.w	r9, r3, fp
 8001f02:	f04f 0200 	mov.w	r2, #0
 8001f06:	f04f 0300 	mov.w	r3, #0
 8001f0a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001f0e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001f12:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001f16:	ebb2 0408 	subs.w	r4, r2, r8
 8001f1a:	eb63 0509 	sbc.w	r5, r3, r9
 8001f1e:	f04f 0200 	mov.w	r2, #0
 8001f22:	f04f 0300 	mov.w	r3, #0
 8001f26:	00eb      	lsls	r3, r5, #3
 8001f28:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001f2c:	00e2      	lsls	r2, r4, #3
 8001f2e:	4614      	mov	r4, r2
 8001f30:	461d      	mov	r5, r3
 8001f32:	eb14 030a 	adds.w	r3, r4, sl
 8001f36:	603b      	str	r3, [r7, #0]
 8001f38:	eb45 030b 	adc.w	r3, r5, fp
 8001f3c:	607b      	str	r3, [r7, #4]
 8001f3e:	f04f 0200 	mov.w	r2, #0
 8001f42:	f04f 0300 	mov.w	r3, #0
 8001f46:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001f4a:	4629      	mov	r1, r5
 8001f4c:	028b      	lsls	r3, r1, #10
 8001f4e:	4621      	mov	r1, r4
 8001f50:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001f54:	4621      	mov	r1, r4
 8001f56:	028a      	lsls	r2, r1, #10
 8001f58:	4610      	mov	r0, r2
 8001f5a:	4619      	mov	r1, r3
 8001f5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f5e:	2200      	movs	r2, #0
 8001f60:	60bb      	str	r3, [r7, #8]
 8001f62:	60fa      	str	r2, [r7, #12]
 8001f64:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001f68:	f7fe f92e 	bl	80001c8 <__aeabi_uldivmod>
 8001f6c:	4602      	mov	r2, r0
 8001f6e:	460b      	mov	r3, r1
 8001f70:	4613      	mov	r3, r2
 8001f72:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001f74:	4b0b      	ldr	r3, [pc, #44]	; (8001fa4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	0c1b      	lsrs	r3, r3, #16
 8001f7a:	f003 0303 	and.w	r3, r3, #3
 8001f7e:	3301      	adds	r3, #1
 8001f80:	005b      	lsls	r3, r3, #1
 8001f82:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8001f84:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001f86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f88:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f8c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001f8e:	e002      	b.n	8001f96 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001f90:	4b05      	ldr	r3, [pc, #20]	; (8001fa8 <HAL_RCC_GetSysClockFreq+0x184>)
 8001f92:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001f94:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001f98:	4618      	mov	r0, r3
 8001f9a:	3740      	adds	r7, #64	; 0x40
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001fa2:	bf00      	nop
 8001fa4:	40023800 	.word	0x40023800
 8001fa8:	00f42400 	.word	0x00f42400
 8001fac:	017d7840 	.word	0x017d7840

08001fb0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001fb4:	4b03      	ldr	r3, [pc, #12]	; (8001fc4 <HAL_RCC_GetHCLKFreq+0x14>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
}
 8001fb8:	4618      	mov	r0, r3
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc0:	4770      	bx	lr
 8001fc2:	bf00      	nop
 8001fc4:	20000000 	.word	0x20000000

08001fc8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001fcc:	f7ff fff0 	bl	8001fb0 <HAL_RCC_GetHCLKFreq>
 8001fd0:	4602      	mov	r2, r0
 8001fd2:	4b05      	ldr	r3, [pc, #20]	; (8001fe8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001fd4:	689b      	ldr	r3, [r3, #8]
 8001fd6:	0a9b      	lsrs	r3, r3, #10
 8001fd8:	f003 0307 	and.w	r3, r3, #7
 8001fdc:	4903      	ldr	r1, [pc, #12]	; (8001fec <HAL_RCC_GetPCLK1Freq+0x24>)
 8001fde:	5ccb      	ldrb	r3, [r1, r3]
 8001fe0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	bd80      	pop	{r7, pc}
 8001fe8:	40023800 	.word	0x40023800
 8001fec:	08003300 	.word	0x08003300

08001ff0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001ff4:	f7ff ffdc 	bl	8001fb0 <HAL_RCC_GetHCLKFreq>
 8001ff8:	4602      	mov	r2, r0
 8001ffa:	4b05      	ldr	r3, [pc, #20]	; (8002010 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001ffc:	689b      	ldr	r3, [r3, #8]
 8001ffe:	0b5b      	lsrs	r3, r3, #13
 8002000:	f003 0307 	and.w	r3, r3, #7
 8002004:	4903      	ldr	r1, [pc, #12]	; (8002014 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002006:	5ccb      	ldrb	r3, [r1, r3]
 8002008:	fa22 f303 	lsr.w	r3, r2, r3
}
 800200c:	4618      	mov	r0, r3
 800200e:	bd80      	pop	{r7, pc}
 8002010:	40023800 	.word	0x40023800
 8002014:	08003300 	.word	0x08003300

08002018 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b082      	sub	sp, #8
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d101      	bne.n	800202a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002026:	2301      	movs	r3, #1
 8002028:	e03f      	b.n	80020aa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002030:	b2db      	uxtb	r3, r3
 8002032:	2b00      	cmp	r3, #0
 8002034:	d106      	bne.n	8002044 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2200      	movs	r2, #0
 800203a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800203e:	6878      	ldr	r0, [r7, #4]
 8002040:	f7fe fb74 	bl	800072c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2224      	movs	r2, #36	; 0x24
 8002048:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	68da      	ldr	r2, [r3, #12]
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800205a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800205c:	6878      	ldr	r0, [r7, #4]
 800205e:	f000 fe9b 	bl	8002d98 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	691a      	ldr	r2, [r3, #16]
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002070:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	695a      	ldr	r2, [r3, #20]
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002080:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	68da      	ldr	r2, [r3, #12]
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002090:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2200      	movs	r2, #0
 8002096:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2220      	movs	r2, #32
 800209c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2220      	movs	r2, #32
 80020a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80020a8:	2300      	movs	r3, #0
}
 80020aa:	4618      	mov	r0, r3
 80020ac:	3708      	adds	r7, #8
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}

080020b2 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80020b2:	b580      	push	{r7, lr}
 80020b4:	b08c      	sub	sp, #48	; 0x30
 80020b6:	af00      	add	r7, sp, #0
 80020b8:	60f8      	str	r0, [r7, #12]
 80020ba:	60b9      	str	r1, [r7, #8]
 80020bc:	4613      	mov	r3, r2
 80020be:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80020c6:	b2db      	uxtb	r3, r3
 80020c8:	2b20      	cmp	r3, #32
 80020ca:	d152      	bne.n	8002172 <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 80020cc:	68bb      	ldr	r3, [r7, #8]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d002      	beq.n	80020d8 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 80020d2:	88fb      	ldrh	r3, [r7, #6]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d101      	bne.n	80020dc <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 80020d8:	2301      	movs	r3, #1
 80020da:	e04b      	b.n	8002174 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80020e2:	2b01      	cmp	r3, #1
 80020e4:	d101      	bne.n	80020ea <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 80020e6:	2302      	movs	r3, #2
 80020e8:	e044      	b.n	8002174 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	2201      	movs	r2, #1
 80020ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	2201      	movs	r2, #1
 80020f6:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 80020f8:	88fb      	ldrh	r3, [r7, #6]
 80020fa:	461a      	mov	r2, r3
 80020fc:	68b9      	ldr	r1, [r7, #8]
 80020fe:	68f8      	ldr	r0, [r7, #12]
 8002100:	f000 fbea 	bl	80028d8 <UART_Start_Receive_DMA>
 8002104:	4603      	mov	r3, r0
 8002106:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800210a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800210e:	2b00      	cmp	r3, #0
 8002110:	d12c      	bne.n	800216c <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002116:	2b01      	cmp	r3, #1
 8002118:	d125      	bne.n	8002166 <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 800211a:	2300      	movs	r3, #0
 800211c:	613b      	str	r3, [r7, #16]
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	613b      	str	r3, [r7, #16]
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	613b      	str	r3, [r7, #16]
 800212e:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	330c      	adds	r3, #12
 8002136:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002138:	69bb      	ldr	r3, [r7, #24]
 800213a:	e853 3f00 	ldrex	r3, [r3]
 800213e:	617b      	str	r3, [r7, #20]
   return(result);
 8002140:	697b      	ldr	r3, [r7, #20]
 8002142:	f043 0310 	orr.w	r3, r3, #16
 8002146:	62bb      	str	r3, [r7, #40]	; 0x28
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	330c      	adds	r3, #12
 800214e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002150:	627a      	str	r2, [r7, #36]	; 0x24
 8002152:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002154:	6a39      	ldr	r1, [r7, #32]
 8002156:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002158:	e841 2300 	strex	r3, r2, [r1]
 800215c:	61fb      	str	r3, [r7, #28]
   return(result);
 800215e:	69fb      	ldr	r3, [r7, #28]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d1e5      	bne.n	8002130 <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 8002164:	e002      	b.n	800216c <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8002166:	2301      	movs	r3, #1
 8002168:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 800216c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002170:	e000      	b.n	8002174 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 8002172:	2302      	movs	r3, #2
  }
}
 8002174:	4618      	mov	r0, r3
 8002176:	3730      	adds	r7, #48	; 0x30
 8002178:	46bd      	mov	sp, r7
 800217a:	bd80      	pop	{r7, pc}

0800217c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b0ba      	sub	sp, #232	; 0xe8
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	68db      	ldr	r3, [r3, #12]
 8002194:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	695b      	ldr	r3, [r3, #20]
 800219e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80021a2:	2300      	movs	r3, #0
 80021a4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80021a8:	2300      	movs	r3, #0
 80021aa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80021ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80021b2:	f003 030f 	and.w	r3, r3, #15
 80021b6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80021ba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d10f      	bne.n	80021e2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80021c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80021c6:	f003 0320 	and.w	r3, r3, #32
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d009      	beq.n	80021e2 <HAL_UART_IRQHandler+0x66>
 80021ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80021d2:	f003 0320 	and.w	r3, r3, #32
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d003      	beq.n	80021e2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80021da:	6878      	ldr	r0, [r7, #4]
 80021dc:	f000 fd21 	bl	8002c22 <UART_Receive_IT>
      return;
 80021e0:	e256      	b.n	8002690 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80021e2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	f000 80de 	beq.w	80023a8 <HAL_UART_IRQHandler+0x22c>
 80021ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80021f0:	f003 0301 	and.w	r3, r3, #1
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d106      	bne.n	8002206 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80021f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80021fc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002200:	2b00      	cmp	r3, #0
 8002202:	f000 80d1 	beq.w	80023a8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002206:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800220a:	f003 0301 	and.w	r3, r3, #1
 800220e:	2b00      	cmp	r3, #0
 8002210:	d00b      	beq.n	800222a <HAL_UART_IRQHandler+0xae>
 8002212:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002216:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800221a:	2b00      	cmp	r3, #0
 800221c:	d005      	beq.n	800222a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002222:	f043 0201 	orr.w	r2, r3, #1
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800222a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800222e:	f003 0304 	and.w	r3, r3, #4
 8002232:	2b00      	cmp	r3, #0
 8002234:	d00b      	beq.n	800224e <HAL_UART_IRQHandler+0xd2>
 8002236:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800223a:	f003 0301 	and.w	r3, r3, #1
 800223e:	2b00      	cmp	r3, #0
 8002240:	d005      	beq.n	800224e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002246:	f043 0202 	orr.w	r2, r3, #2
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800224e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002252:	f003 0302 	and.w	r3, r3, #2
 8002256:	2b00      	cmp	r3, #0
 8002258:	d00b      	beq.n	8002272 <HAL_UART_IRQHandler+0xf6>
 800225a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800225e:	f003 0301 	and.w	r3, r3, #1
 8002262:	2b00      	cmp	r3, #0
 8002264:	d005      	beq.n	8002272 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800226a:	f043 0204 	orr.w	r2, r3, #4
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002272:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002276:	f003 0308 	and.w	r3, r3, #8
 800227a:	2b00      	cmp	r3, #0
 800227c:	d011      	beq.n	80022a2 <HAL_UART_IRQHandler+0x126>
 800227e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002282:	f003 0320 	and.w	r3, r3, #32
 8002286:	2b00      	cmp	r3, #0
 8002288:	d105      	bne.n	8002296 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800228a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800228e:	f003 0301 	and.w	r3, r3, #1
 8002292:	2b00      	cmp	r3, #0
 8002294:	d005      	beq.n	80022a2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800229a:	f043 0208 	orr.w	r2, r3, #8
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	f000 81ed 	beq.w	8002686 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80022ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80022b0:	f003 0320 	and.w	r3, r3, #32
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d008      	beq.n	80022ca <HAL_UART_IRQHandler+0x14e>
 80022b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80022bc:	f003 0320 	and.w	r3, r3, #32
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d002      	beq.n	80022ca <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80022c4:	6878      	ldr	r0, [r7, #4]
 80022c6:	f000 fcac 	bl	8002c22 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	695b      	ldr	r3, [r3, #20]
 80022d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022d4:	2b40      	cmp	r3, #64	; 0x40
 80022d6:	bf0c      	ite	eq
 80022d8:	2301      	moveq	r3, #1
 80022da:	2300      	movne	r3, #0
 80022dc:	b2db      	uxtb	r3, r3
 80022de:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e6:	f003 0308 	and.w	r3, r3, #8
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d103      	bne.n	80022f6 <HAL_UART_IRQHandler+0x17a>
 80022ee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d04f      	beq.n	8002396 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80022f6:	6878      	ldr	r0, [r7, #4]
 80022f8:	f000 fbb4 	bl	8002a64 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	695b      	ldr	r3, [r3, #20]
 8002302:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002306:	2b40      	cmp	r3, #64	; 0x40
 8002308:	d141      	bne.n	800238e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	3314      	adds	r3, #20
 8002310:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002314:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002318:	e853 3f00 	ldrex	r3, [r3]
 800231c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002320:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002324:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002328:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	3314      	adds	r3, #20
 8002332:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002336:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800233a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800233e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002342:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002346:	e841 2300 	strex	r3, r2, [r1]
 800234a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800234e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002352:	2b00      	cmp	r3, #0
 8002354:	d1d9      	bne.n	800230a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800235a:	2b00      	cmp	r3, #0
 800235c:	d013      	beq.n	8002386 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002362:	4a7d      	ldr	r2, [pc, #500]	; (8002558 <HAL_UART_IRQHandler+0x3dc>)
 8002364:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800236a:	4618      	mov	r0, r3
 800236c:	f7fe fdd4 	bl	8000f18 <HAL_DMA_Abort_IT>
 8002370:	4603      	mov	r3, r0
 8002372:	2b00      	cmp	r3, #0
 8002374:	d016      	beq.n	80023a4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800237a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800237c:	687a      	ldr	r2, [r7, #4]
 800237e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002380:	4610      	mov	r0, r2
 8002382:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002384:	e00e      	b.n	80023a4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002386:	6878      	ldr	r0, [r7, #4]
 8002388:	f000 f9a4 	bl	80026d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800238c:	e00a      	b.n	80023a4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800238e:	6878      	ldr	r0, [r7, #4]
 8002390:	f000 f9a0 	bl	80026d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002394:	e006      	b.n	80023a4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002396:	6878      	ldr	r0, [r7, #4]
 8002398:	f000 f99c 	bl	80026d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2200      	movs	r2, #0
 80023a0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80023a2:	e170      	b.n	8002686 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80023a4:	bf00      	nop
    return;
 80023a6:	e16e      	b.n	8002686 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ac:	2b01      	cmp	r3, #1
 80023ae:	f040 814a 	bne.w	8002646 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80023b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80023b6:	f003 0310 	and.w	r3, r3, #16
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	f000 8143 	beq.w	8002646 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80023c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80023c4:	f003 0310 	and.w	r3, r3, #16
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	f000 813c 	beq.w	8002646 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80023ce:	2300      	movs	r3, #0
 80023d0:	60bb      	str	r3, [r7, #8]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	60bb      	str	r3, [r7, #8]
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	60bb      	str	r3, [r7, #8]
 80023e2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	695b      	ldr	r3, [r3, #20]
 80023ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023ee:	2b40      	cmp	r3, #64	; 0x40
 80023f0:	f040 80b4 	bne.w	800255c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002400:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002404:	2b00      	cmp	r3, #0
 8002406:	f000 8140 	beq.w	800268a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800240e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002412:	429a      	cmp	r2, r3
 8002414:	f080 8139 	bcs.w	800268a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800241e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002424:	69db      	ldr	r3, [r3, #28]
 8002426:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800242a:	f000 8088 	beq.w	800253e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	330c      	adds	r3, #12
 8002434:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002438:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800243c:	e853 3f00 	ldrex	r3, [r3]
 8002440:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002444:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002448:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800244c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	330c      	adds	r3, #12
 8002456:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800245a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800245e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002462:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002466:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800246a:	e841 2300 	strex	r3, r2, [r1]
 800246e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002472:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002476:	2b00      	cmp	r3, #0
 8002478:	d1d9      	bne.n	800242e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	3314      	adds	r3, #20
 8002480:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002482:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002484:	e853 3f00 	ldrex	r3, [r3]
 8002488:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800248a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800248c:	f023 0301 	bic.w	r3, r3, #1
 8002490:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	3314      	adds	r3, #20
 800249a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800249e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80024a2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024a4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80024a6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80024aa:	e841 2300 	strex	r3, r2, [r1]
 80024ae:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80024b0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d1e1      	bne.n	800247a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	3314      	adds	r3, #20
 80024bc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024be:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80024c0:	e853 3f00 	ldrex	r3, [r3]
 80024c4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80024c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80024c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80024cc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	3314      	adds	r3, #20
 80024d6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80024da:	66fa      	str	r2, [r7, #108]	; 0x6c
 80024dc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024de:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80024e0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80024e2:	e841 2300 	strex	r3, r2, [r1]
 80024e6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80024e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d1e3      	bne.n	80024b6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2220      	movs	r2, #32
 80024f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2200      	movs	r2, #0
 80024fa:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	330c      	adds	r3, #12
 8002502:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002504:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002506:	e853 3f00 	ldrex	r3, [r3]
 800250a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800250c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800250e:	f023 0310 	bic.w	r3, r3, #16
 8002512:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	330c      	adds	r3, #12
 800251c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002520:	65ba      	str	r2, [r7, #88]	; 0x58
 8002522:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002524:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002526:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002528:	e841 2300 	strex	r3, r2, [r1]
 800252c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800252e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002530:	2b00      	cmp	r3, #0
 8002532:	d1e3      	bne.n	80024fc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002538:	4618      	mov	r0, r3
 800253a:	f7fe fc7d 	bl	8000e38 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002546:	b29b      	uxth	r3, r3
 8002548:	1ad3      	subs	r3, r2, r3
 800254a:	b29b      	uxth	r3, r3
 800254c:	4619      	mov	r1, r3
 800254e:	6878      	ldr	r0, [r7, #4]
 8002550:	f7fd ffb8 	bl	80004c4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002554:	e099      	b.n	800268a <HAL_UART_IRQHandler+0x50e>
 8002556:	bf00      	nop
 8002558:	08002b2b 	.word	0x08002b2b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002564:	b29b      	uxth	r3, r3
 8002566:	1ad3      	subs	r3, r2, r3
 8002568:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002570:	b29b      	uxth	r3, r3
 8002572:	2b00      	cmp	r3, #0
 8002574:	f000 808b 	beq.w	800268e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8002578:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800257c:	2b00      	cmp	r3, #0
 800257e:	f000 8086 	beq.w	800268e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	330c      	adds	r3, #12
 8002588:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800258a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800258c:	e853 3f00 	ldrex	r3, [r3]
 8002590:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002592:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002594:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002598:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	330c      	adds	r3, #12
 80025a2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80025a6:	647a      	str	r2, [r7, #68]	; 0x44
 80025a8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025aa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80025ac:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80025ae:	e841 2300 	strex	r3, r2, [r1]
 80025b2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80025b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d1e3      	bne.n	8002582 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	3314      	adds	r3, #20
 80025c0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c4:	e853 3f00 	ldrex	r3, [r3]
 80025c8:	623b      	str	r3, [r7, #32]
   return(result);
 80025ca:	6a3b      	ldr	r3, [r7, #32]
 80025cc:	f023 0301 	bic.w	r3, r3, #1
 80025d0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	3314      	adds	r3, #20
 80025da:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80025de:	633a      	str	r2, [r7, #48]	; 0x30
 80025e0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025e2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80025e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80025e6:	e841 2300 	strex	r3, r2, [r1]
 80025ea:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80025ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d1e3      	bne.n	80025ba <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2220      	movs	r2, #32
 80025f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2200      	movs	r2, #0
 80025fe:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	330c      	adds	r3, #12
 8002606:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002608:	693b      	ldr	r3, [r7, #16]
 800260a:	e853 3f00 	ldrex	r3, [r3]
 800260e:	60fb      	str	r3, [r7, #12]
   return(result);
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	f023 0310 	bic.w	r3, r3, #16
 8002616:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	330c      	adds	r3, #12
 8002620:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002624:	61fa      	str	r2, [r7, #28]
 8002626:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002628:	69b9      	ldr	r1, [r7, #24]
 800262a:	69fa      	ldr	r2, [r7, #28]
 800262c:	e841 2300 	strex	r3, r2, [r1]
 8002630:	617b      	str	r3, [r7, #20]
   return(result);
 8002632:	697b      	ldr	r3, [r7, #20]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d1e3      	bne.n	8002600 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002638:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800263c:	4619      	mov	r1, r3
 800263e:	6878      	ldr	r0, [r7, #4]
 8002640:	f7fd ff40 	bl	80004c4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002644:	e023      	b.n	800268e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002646:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800264a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800264e:	2b00      	cmp	r3, #0
 8002650:	d009      	beq.n	8002666 <HAL_UART_IRQHandler+0x4ea>
 8002652:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002656:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800265a:	2b00      	cmp	r3, #0
 800265c:	d003      	beq.n	8002666 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800265e:	6878      	ldr	r0, [r7, #4]
 8002660:	f000 fa77 	bl	8002b52 <UART_Transmit_IT>
    return;
 8002664:	e014      	b.n	8002690 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002666:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800266a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800266e:	2b00      	cmp	r3, #0
 8002670:	d00e      	beq.n	8002690 <HAL_UART_IRQHandler+0x514>
 8002672:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002676:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800267a:	2b00      	cmp	r3, #0
 800267c:	d008      	beq.n	8002690 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800267e:	6878      	ldr	r0, [r7, #4]
 8002680:	f000 fab7 	bl	8002bf2 <UART_EndTransmit_IT>
    return;
 8002684:	e004      	b.n	8002690 <HAL_UART_IRQHandler+0x514>
    return;
 8002686:	bf00      	nop
 8002688:	e002      	b.n	8002690 <HAL_UART_IRQHandler+0x514>
      return;
 800268a:	bf00      	nop
 800268c:	e000      	b.n	8002690 <HAL_UART_IRQHandler+0x514>
      return;
 800268e:	bf00      	nop
  }
}
 8002690:	37e8      	adds	r7, #232	; 0xe8
 8002692:	46bd      	mov	sp, r7
 8002694:	bd80      	pop	{r7, pc}
 8002696:	bf00      	nop

08002698 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002698:	b480      	push	{r7}
 800269a:	b083      	sub	sp, #12
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80026a0:	bf00      	nop
 80026a2:	370c      	adds	r7, #12
 80026a4:	46bd      	mov	sp, r7
 80026a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026aa:	4770      	bx	lr

080026ac <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80026ac:	b480      	push	{r7}
 80026ae:	b083      	sub	sp, #12
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80026b4:	bf00      	nop
 80026b6:	370c      	adds	r7, #12
 80026b8:	46bd      	mov	sp, r7
 80026ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026be:	4770      	bx	lr

080026c0 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80026c0:	b480      	push	{r7}
 80026c2:	b083      	sub	sp, #12
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80026c8:	bf00      	nop
 80026ca:	370c      	adds	r7, #12
 80026cc:	46bd      	mov	sp, r7
 80026ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d2:	4770      	bx	lr

080026d4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80026d4:	b480      	push	{r7}
 80026d6:	b083      	sub	sp, #12
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80026dc:	bf00      	nop
 80026de:	370c      	adds	r7, #12
 80026e0:	46bd      	mov	sp, r7
 80026e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e6:	4770      	bx	lr

080026e8 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b09c      	sub	sp, #112	; 0x70
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026f4:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002700:	2b00      	cmp	r3, #0
 8002702:	d172      	bne.n	80027ea <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8002704:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002706:	2200      	movs	r2, #0
 8002708:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800270a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	330c      	adds	r3, #12
 8002710:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002712:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002714:	e853 3f00 	ldrex	r3, [r3]
 8002718:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800271a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800271c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002720:	66bb      	str	r3, [r7, #104]	; 0x68
 8002722:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	330c      	adds	r3, #12
 8002728:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800272a:	65ba      	str	r2, [r7, #88]	; 0x58
 800272c:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800272e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002730:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002732:	e841 2300 	strex	r3, r2, [r1]
 8002736:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002738:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800273a:	2b00      	cmp	r3, #0
 800273c:	d1e5      	bne.n	800270a <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800273e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	3314      	adds	r3, #20
 8002744:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002746:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002748:	e853 3f00 	ldrex	r3, [r3]
 800274c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800274e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002750:	f023 0301 	bic.w	r3, r3, #1
 8002754:	667b      	str	r3, [r7, #100]	; 0x64
 8002756:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	3314      	adds	r3, #20
 800275c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800275e:	647a      	str	r2, [r7, #68]	; 0x44
 8002760:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002762:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002764:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002766:	e841 2300 	strex	r3, r2, [r1]
 800276a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800276c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800276e:	2b00      	cmp	r3, #0
 8002770:	d1e5      	bne.n	800273e <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002772:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	3314      	adds	r3, #20
 8002778:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800277a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800277c:	e853 3f00 	ldrex	r3, [r3]
 8002780:	623b      	str	r3, [r7, #32]
   return(result);
 8002782:	6a3b      	ldr	r3, [r7, #32]
 8002784:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002788:	663b      	str	r3, [r7, #96]	; 0x60
 800278a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	3314      	adds	r3, #20
 8002790:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002792:	633a      	str	r2, [r7, #48]	; 0x30
 8002794:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002796:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002798:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800279a:	e841 2300 	strex	r3, r2, [r1]
 800279e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80027a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d1e5      	bne.n	8002772 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80027a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027a8:	2220      	movs	r2, #32
 80027aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80027ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027b2:	2b01      	cmp	r3, #1
 80027b4:	d119      	bne.n	80027ea <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80027b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	330c      	adds	r3, #12
 80027bc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027be:	693b      	ldr	r3, [r7, #16]
 80027c0:	e853 3f00 	ldrex	r3, [r3]
 80027c4:	60fb      	str	r3, [r7, #12]
   return(result);
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	f023 0310 	bic.w	r3, r3, #16
 80027cc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80027ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	330c      	adds	r3, #12
 80027d4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80027d6:	61fa      	str	r2, [r7, #28]
 80027d8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027da:	69b9      	ldr	r1, [r7, #24]
 80027dc:	69fa      	ldr	r2, [r7, #28]
 80027de:	e841 2300 	strex	r3, r2, [r1]
 80027e2:	617b      	str	r3, [r7, #20]
   return(result);
 80027e4:	697b      	ldr	r3, [r7, #20]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d1e5      	bne.n	80027b6 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80027ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ee:	2b01      	cmp	r3, #1
 80027f0:	d106      	bne.n	8002800 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80027f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027f4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80027f6:	4619      	mov	r1, r3
 80027f8:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80027fa:	f7fd fe63 	bl	80004c4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80027fe:	e002      	b.n	8002806 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8002800:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8002802:	f7ff ff53 	bl	80026ac <HAL_UART_RxCpltCallback>
}
 8002806:	bf00      	nop
 8002808:	3770      	adds	r7, #112	; 0x70
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}

0800280e <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800280e:	b580      	push	{r7, lr}
 8002810:	b084      	sub	sp, #16
 8002812:	af00      	add	r7, sp, #0
 8002814:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800281a:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002820:	2b01      	cmp	r3, #1
 8002822:	d108      	bne.n	8002836 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002828:	085b      	lsrs	r3, r3, #1
 800282a:	b29b      	uxth	r3, r3
 800282c:	4619      	mov	r1, r3
 800282e:	68f8      	ldr	r0, [r7, #12]
 8002830:	f7fd fe48 	bl	80004c4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002834:	e002      	b.n	800283c <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8002836:	68f8      	ldr	r0, [r7, #12]
 8002838:	f7ff ff42 	bl	80026c0 <HAL_UART_RxHalfCpltCallback>
}
 800283c:	bf00      	nop
 800283e:	3710      	adds	r7, #16
 8002840:	46bd      	mov	sp, r7
 8002842:	bd80      	pop	{r7, pc}

08002844 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b084      	sub	sp, #16
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800284c:	2300      	movs	r3, #0
 800284e:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002854:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8002856:	68bb      	ldr	r3, [r7, #8]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	695b      	ldr	r3, [r3, #20]
 800285c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002860:	2b80      	cmp	r3, #128	; 0x80
 8002862:	bf0c      	ite	eq
 8002864:	2301      	moveq	r3, #1
 8002866:	2300      	movne	r3, #0
 8002868:	b2db      	uxtb	r3, r3
 800286a:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800286c:	68bb      	ldr	r3, [r7, #8]
 800286e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002872:	b2db      	uxtb	r3, r3
 8002874:	2b21      	cmp	r3, #33	; 0x21
 8002876:	d108      	bne.n	800288a <UART_DMAError+0x46>
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d005      	beq.n	800288a <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800287e:	68bb      	ldr	r3, [r7, #8]
 8002880:	2200      	movs	r2, #0
 8002882:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8002884:	68b8      	ldr	r0, [r7, #8]
 8002886:	f000 f8c5 	bl	8002a14 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800288a:	68bb      	ldr	r3, [r7, #8]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	695b      	ldr	r3, [r3, #20]
 8002890:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002894:	2b40      	cmp	r3, #64	; 0x40
 8002896:	bf0c      	ite	eq
 8002898:	2301      	moveq	r3, #1
 800289a:	2300      	movne	r3, #0
 800289c:	b2db      	uxtb	r3, r3
 800289e:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80028a0:	68bb      	ldr	r3, [r7, #8]
 80028a2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80028a6:	b2db      	uxtb	r3, r3
 80028a8:	2b22      	cmp	r3, #34	; 0x22
 80028aa:	d108      	bne.n	80028be <UART_DMAError+0x7a>
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d005      	beq.n	80028be <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80028b2:	68bb      	ldr	r3, [r7, #8]
 80028b4:	2200      	movs	r2, #0
 80028b6:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80028b8:	68b8      	ldr	r0, [r7, #8]
 80028ba:	f000 f8d3 	bl	8002a64 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80028be:	68bb      	ldr	r3, [r7, #8]
 80028c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028c2:	f043 0210 	orr.w	r2, r3, #16
 80028c6:	68bb      	ldr	r3, [r7, #8]
 80028c8:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80028ca:	68b8      	ldr	r0, [r7, #8]
 80028cc:	f7ff ff02 	bl	80026d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80028d0:	bf00      	nop
 80028d2:	3710      	adds	r7, #16
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bd80      	pop	{r7, pc}

080028d8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b098      	sub	sp, #96	; 0x60
 80028dc:	af00      	add	r7, sp, #0
 80028de:	60f8      	str	r0, [r7, #12]
 80028e0:	60b9      	str	r1, [r7, #8]
 80028e2:	4613      	mov	r3, r2
 80028e4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80028e6:	68ba      	ldr	r2, [r7, #8]
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	88fa      	ldrh	r2, [r7, #6]
 80028f0:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	2200      	movs	r2, #0
 80028f6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	2222      	movs	r2, #34	; 0x22
 80028fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002904:	4a40      	ldr	r2, [pc, #256]	; (8002a08 <UART_Start_Receive_DMA+0x130>)
 8002906:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800290c:	4a3f      	ldr	r2, [pc, #252]	; (8002a0c <UART_Start_Receive_DMA+0x134>)
 800290e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002914:	4a3e      	ldr	r2, [pc, #248]	; (8002a10 <UART_Start_Receive_DMA+0x138>)
 8002916:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800291c:	2200      	movs	r2, #0
 800291e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8002920:	f107 0308 	add.w	r3, r7, #8
 8002924:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	3304      	adds	r3, #4
 8002930:	4619      	mov	r1, r3
 8002932:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002934:	681a      	ldr	r2, [r3, #0]
 8002936:	88fb      	ldrh	r3, [r7, #6]
 8002938:	f7fe fa26 	bl	8000d88 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800293c:	2300      	movs	r3, #0
 800293e:	613b      	str	r3, [r7, #16]
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	613b      	str	r3, [r7, #16]
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	613b      	str	r3, [r7, #16]
 8002950:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	2200      	movs	r2, #0
 8002956:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	691b      	ldr	r3, [r3, #16]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d019      	beq.n	8002996 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	330c      	adds	r3, #12
 8002968:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800296a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800296c:	e853 3f00 	ldrex	r3, [r3]
 8002970:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002972:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002974:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002978:	65bb      	str	r3, [r7, #88]	; 0x58
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	330c      	adds	r3, #12
 8002980:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002982:	64fa      	str	r2, [r7, #76]	; 0x4c
 8002984:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002986:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8002988:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800298a:	e841 2300 	strex	r3, r2, [r1]
 800298e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8002990:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002992:	2b00      	cmp	r3, #0
 8002994:	d1e5      	bne.n	8002962 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	3314      	adds	r3, #20
 800299c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800299e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029a0:	e853 3f00 	ldrex	r3, [r3]
 80029a4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80029a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029a8:	f043 0301 	orr.w	r3, r3, #1
 80029ac:	657b      	str	r3, [r7, #84]	; 0x54
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	3314      	adds	r3, #20
 80029b4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80029b6:	63ba      	str	r2, [r7, #56]	; 0x38
 80029b8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029ba:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80029bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80029be:	e841 2300 	strex	r3, r2, [r1]
 80029c2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80029c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d1e5      	bne.n	8002996 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	3314      	adds	r3, #20
 80029d0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029d2:	69bb      	ldr	r3, [r7, #24]
 80029d4:	e853 3f00 	ldrex	r3, [r3]
 80029d8:	617b      	str	r3, [r7, #20]
   return(result);
 80029da:	697b      	ldr	r3, [r7, #20]
 80029dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80029e0:	653b      	str	r3, [r7, #80]	; 0x50
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	3314      	adds	r3, #20
 80029e8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80029ea:	627a      	str	r2, [r7, #36]	; 0x24
 80029ec:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029ee:	6a39      	ldr	r1, [r7, #32]
 80029f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029f2:	e841 2300 	strex	r3, r2, [r1]
 80029f6:	61fb      	str	r3, [r7, #28]
   return(result);
 80029f8:	69fb      	ldr	r3, [r7, #28]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d1e5      	bne.n	80029ca <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 80029fe:	2300      	movs	r3, #0
}
 8002a00:	4618      	mov	r0, r3
 8002a02:	3760      	adds	r7, #96	; 0x60
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bd80      	pop	{r7, pc}
 8002a08:	080026e9 	.word	0x080026e9
 8002a0c:	0800280f 	.word	0x0800280f
 8002a10:	08002845 	.word	0x08002845

08002a14 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8002a14:	b480      	push	{r7}
 8002a16:	b089      	sub	sp, #36	; 0x24
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	330c      	adds	r3, #12
 8002a22:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	e853 3f00 	ldrex	r3, [r3]
 8002a2a:	60bb      	str	r3, [r7, #8]
   return(result);
 8002a2c:	68bb      	ldr	r3, [r7, #8]
 8002a2e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002a32:	61fb      	str	r3, [r7, #28]
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	330c      	adds	r3, #12
 8002a3a:	69fa      	ldr	r2, [r7, #28]
 8002a3c:	61ba      	str	r2, [r7, #24]
 8002a3e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a40:	6979      	ldr	r1, [r7, #20]
 8002a42:	69ba      	ldr	r2, [r7, #24]
 8002a44:	e841 2300 	strex	r3, r2, [r1]
 8002a48:	613b      	str	r3, [r7, #16]
   return(result);
 8002a4a:	693b      	ldr	r3, [r7, #16]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d1e5      	bne.n	8002a1c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2220      	movs	r2, #32
 8002a54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8002a58:	bf00      	nop
 8002a5a:	3724      	adds	r7, #36	; 0x24
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a62:	4770      	bx	lr

08002a64 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002a64:	b480      	push	{r7}
 8002a66:	b095      	sub	sp, #84	; 0x54
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	330c      	adds	r3, #12
 8002a72:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a76:	e853 3f00 	ldrex	r3, [r3]
 8002a7a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002a7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a7e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002a82:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	330c      	adds	r3, #12
 8002a8a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002a8c:	643a      	str	r2, [r7, #64]	; 0x40
 8002a8e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a90:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002a92:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002a94:	e841 2300 	strex	r3, r2, [r1]
 8002a98:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002a9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d1e5      	bne.n	8002a6c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	3314      	adds	r3, #20
 8002aa6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002aa8:	6a3b      	ldr	r3, [r7, #32]
 8002aaa:	e853 3f00 	ldrex	r3, [r3]
 8002aae:	61fb      	str	r3, [r7, #28]
   return(result);
 8002ab0:	69fb      	ldr	r3, [r7, #28]
 8002ab2:	f023 0301 	bic.w	r3, r3, #1
 8002ab6:	64bb      	str	r3, [r7, #72]	; 0x48
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	3314      	adds	r3, #20
 8002abe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002ac0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002ac2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ac4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002ac6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ac8:	e841 2300 	strex	r3, r2, [r1]
 8002acc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d1e5      	bne.n	8002aa0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ad8:	2b01      	cmp	r3, #1
 8002ada:	d119      	bne.n	8002b10 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	330c      	adds	r3, #12
 8002ae2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	e853 3f00 	ldrex	r3, [r3]
 8002aea:	60bb      	str	r3, [r7, #8]
   return(result);
 8002aec:	68bb      	ldr	r3, [r7, #8]
 8002aee:	f023 0310 	bic.w	r3, r3, #16
 8002af2:	647b      	str	r3, [r7, #68]	; 0x44
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	330c      	adds	r3, #12
 8002afa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002afc:	61ba      	str	r2, [r7, #24]
 8002afe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b00:	6979      	ldr	r1, [r7, #20]
 8002b02:	69ba      	ldr	r2, [r7, #24]
 8002b04:	e841 2300 	strex	r3, r2, [r1]
 8002b08:	613b      	str	r3, [r7, #16]
   return(result);
 8002b0a:	693b      	ldr	r3, [r7, #16]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d1e5      	bne.n	8002adc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2220      	movs	r2, #32
 8002b14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002b1e:	bf00      	nop
 8002b20:	3754      	adds	r7, #84	; 0x54
 8002b22:	46bd      	mov	sp, r7
 8002b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b28:	4770      	bx	lr

08002b2a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002b2a:	b580      	push	{r7, lr}
 8002b2c:	b084      	sub	sp, #16
 8002b2e:	af00      	add	r7, sp, #0
 8002b30:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b36:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	2200      	movs	r2, #0
 8002b42:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002b44:	68f8      	ldr	r0, [r7, #12]
 8002b46:	f7ff fdc5 	bl	80026d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002b4a:	bf00      	nop
 8002b4c:	3710      	adds	r7, #16
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}

08002b52 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002b52:	b480      	push	{r7}
 8002b54:	b085      	sub	sp, #20
 8002b56:	af00      	add	r7, sp, #0
 8002b58:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b60:	b2db      	uxtb	r3, r3
 8002b62:	2b21      	cmp	r3, #33	; 0x21
 8002b64:	d13e      	bne.n	8002be4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	689b      	ldr	r3, [r3, #8]
 8002b6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b6e:	d114      	bne.n	8002b9a <UART_Transmit_IT+0x48>
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	691b      	ldr	r3, [r3, #16]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d110      	bne.n	8002b9a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6a1b      	ldr	r3, [r3, #32]
 8002b7c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	881b      	ldrh	r3, [r3, #0]
 8002b82:	461a      	mov	r2, r3
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002b8c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6a1b      	ldr	r3, [r3, #32]
 8002b92:	1c9a      	adds	r2, r3, #2
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	621a      	str	r2, [r3, #32]
 8002b98:	e008      	b.n	8002bac <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6a1b      	ldr	r3, [r3, #32]
 8002b9e:	1c59      	adds	r1, r3, #1
 8002ba0:	687a      	ldr	r2, [r7, #4]
 8002ba2:	6211      	str	r1, [r2, #32]
 8002ba4:	781a      	ldrb	r2, [r3, #0]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002bb0:	b29b      	uxth	r3, r3
 8002bb2:	3b01      	subs	r3, #1
 8002bb4:	b29b      	uxth	r3, r3
 8002bb6:	687a      	ldr	r2, [r7, #4]
 8002bb8:	4619      	mov	r1, r3
 8002bba:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d10f      	bne.n	8002be0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	68da      	ldr	r2, [r3, #12]
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002bce:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	68da      	ldr	r2, [r3, #12]
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002bde:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002be0:	2300      	movs	r3, #0
 8002be2:	e000      	b.n	8002be6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002be4:	2302      	movs	r3, #2
  }
}
 8002be6:	4618      	mov	r0, r3
 8002be8:	3714      	adds	r7, #20
 8002bea:	46bd      	mov	sp, r7
 8002bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf0:	4770      	bx	lr

08002bf2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002bf2:	b580      	push	{r7, lr}
 8002bf4:	b082      	sub	sp, #8
 8002bf6:	af00      	add	r7, sp, #0
 8002bf8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	68da      	ldr	r2, [r3, #12]
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c08:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2220      	movs	r2, #32
 8002c0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002c12:	6878      	ldr	r0, [r7, #4]
 8002c14:	f7ff fd40 	bl	8002698 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002c18:	2300      	movs	r3, #0
}
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	3708      	adds	r7, #8
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bd80      	pop	{r7, pc}

08002c22 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002c22:	b580      	push	{r7, lr}
 8002c24:	b08c      	sub	sp, #48	; 0x30
 8002c26:	af00      	add	r7, sp, #0
 8002c28:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002c30:	b2db      	uxtb	r3, r3
 8002c32:	2b22      	cmp	r3, #34	; 0x22
 8002c34:	f040 80ab 	bne.w	8002d8e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	689b      	ldr	r3, [r3, #8]
 8002c3c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c40:	d117      	bne.n	8002c72 <UART_Receive_IT+0x50>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	691b      	ldr	r3, [r3, #16]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d113      	bne.n	8002c72 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c52:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	685b      	ldr	r3, [r3, #4]
 8002c5a:	b29b      	uxth	r3, r3
 8002c5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c60:	b29a      	uxth	r2, r3
 8002c62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c64:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c6a:	1c9a      	adds	r2, r3, #2
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	629a      	str	r2, [r3, #40]	; 0x28
 8002c70:	e026      	b.n	8002cc0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c76:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002c78:	2300      	movs	r3, #0
 8002c7a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	689b      	ldr	r3, [r3, #8]
 8002c80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c84:	d007      	beq.n	8002c96 <UART_Receive_IT+0x74>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	689b      	ldr	r3, [r3, #8]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d10a      	bne.n	8002ca4 <UART_Receive_IT+0x82>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	691b      	ldr	r3, [r3, #16]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d106      	bne.n	8002ca4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	b2da      	uxtb	r2, r3
 8002c9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ca0:	701a      	strb	r2, [r3, #0]
 8002ca2:	e008      	b.n	8002cb6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	b2db      	uxtb	r3, r3
 8002cac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002cb0:	b2da      	uxtb	r2, r3
 8002cb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cb4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cba:	1c5a      	adds	r2, r3, #1
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002cc4:	b29b      	uxth	r3, r3
 8002cc6:	3b01      	subs	r3, #1
 8002cc8:	b29b      	uxth	r3, r3
 8002cca:	687a      	ldr	r2, [r7, #4]
 8002ccc:	4619      	mov	r1, r3
 8002cce:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d15a      	bne.n	8002d8a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	68da      	ldr	r2, [r3, #12]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f022 0220 	bic.w	r2, r2, #32
 8002ce2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	68da      	ldr	r2, [r3, #12]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002cf2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	695a      	ldr	r2, [r3, #20]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f022 0201 	bic.w	r2, r2, #1
 8002d02:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2220      	movs	r2, #32
 8002d08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d10:	2b01      	cmp	r3, #1
 8002d12:	d135      	bne.n	8002d80 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2200      	movs	r2, #0
 8002d18:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	330c      	adds	r3, #12
 8002d20:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d22:	697b      	ldr	r3, [r7, #20]
 8002d24:	e853 3f00 	ldrex	r3, [r3]
 8002d28:	613b      	str	r3, [r7, #16]
   return(result);
 8002d2a:	693b      	ldr	r3, [r7, #16]
 8002d2c:	f023 0310 	bic.w	r3, r3, #16
 8002d30:	627b      	str	r3, [r7, #36]	; 0x24
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	330c      	adds	r3, #12
 8002d38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d3a:	623a      	str	r2, [r7, #32]
 8002d3c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d3e:	69f9      	ldr	r1, [r7, #28]
 8002d40:	6a3a      	ldr	r2, [r7, #32]
 8002d42:	e841 2300 	strex	r3, r2, [r1]
 8002d46:	61bb      	str	r3, [r7, #24]
   return(result);
 8002d48:	69bb      	ldr	r3, [r7, #24]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d1e5      	bne.n	8002d1a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f003 0310 	and.w	r3, r3, #16
 8002d58:	2b10      	cmp	r3, #16
 8002d5a:	d10a      	bne.n	8002d72 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	60fb      	str	r3, [r7, #12]
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	60fb      	str	r3, [r7, #12]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	60fb      	str	r3, [r7, #12]
 8002d70:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002d76:	4619      	mov	r1, r3
 8002d78:	6878      	ldr	r0, [r7, #4]
 8002d7a:	f7fd fba3 	bl	80004c4 <HAL_UARTEx_RxEventCallback>
 8002d7e:	e002      	b.n	8002d86 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002d80:	6878      	ldr	r0, [r7, #4]
 8002d82:	f7ff fc93 	bl	80026ac <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002d86:	2300      	movs	r3, #0
 8002d88:	e002      	b.n	8002d90 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	e000      	b.n	8002d90 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8002d8e:	2302      	movs	r3, #2
  }
}
 8002d90:	4618      	mov	r0, r3
 8002d92:	3730      	adds	r7, #48	; 0x30
 8002d94:	46bd      	mov	sp, r7
 8002d96:	bd80      	pop	{r7, pc}

08002d98 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002d98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d9c:	b0c0      	sub	sp, #256	; 0x100
 8002d9e:	af00      	add	r7, sp, #0
 8002da0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002da4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	691b      	ldr	r3, [r3, #16]
 8002dac:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002db0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002db4:	68d9      	ldr	r1, [r3, #12]
 8002db6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dba:	681a      	ldr	r2, [r3, #0]
 8002dbc:	ea40 0301 	orr.w	r3, r0, r1
 8002dc0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002dc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dc6:	689a      	ldr	r2, [r3, #8]
 8002dc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dcc:	691b      	ldr	r3, [r3, #16]
 8002dce:	431a      	orrs	r2, r3
 8002dd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dd4:	695b      	ldr	r3, [r3, #20]
 8002dd6:	431a      	orrs	r2, r3
 8002dd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ddc:	69db      	ldr	r3, [r3, #28]
 8002dde:	4313      	orrs	r3, r2
 8002de0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002de4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	68db      	ldr	r3, [r3, #12]
 8002dec:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002df0:	f021 010c 	bic.w	r1, r1, #12
 8002df4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002df8:	681a      	ldr	r2, [r3, #0]
 8002dfa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002dfe:	430b      	orrs	r3, r1
 8002e00:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002e02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	695b      	ldr	r3, [r3, #20]
 8002e0a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002e0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e12:	6999      	ldr	r1, [r3, #24]
 8002e14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e18:	681a      	ldr	r2, [r3, #0]
 8002e1a:	ea40 0301 	orr.w	r3, r0, r1
 8002e1e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002e20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e24:	681a      	ldr	r2, [r3, #0]
 8002e26:	4b8f      	ldr	r3, [pc, #572]	; (8003064 <UART_SetConfig+0x2cc>)
 8002e28:	429a      	cmp	r2, r3
 8002e2a:	d005      	beq.n	8002e38 <UART_SetConfig+0xa0>
 8002e2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e30:	681a      	ldr	r2, [r3, #0]
 8002e32:	4b8d      	ldr	r3, [pc, #564]	; (8003068 <UART_SetConfig+0x2d0>)
 8002e34:	429a      	cmp	r2, r3
 8002e36:	d104      	bne.n	8002e42 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002e38:	f7ff f8da 	bl	8001ff0 <HAL_RCC_GetPCLK2Freq>
 8002e3c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002e40:	e003      	b.n	8002e4a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002e42:	f7ff f8c1 	bl	8001fc8 <HAL_RCC_GetPCLK1Freq>
 8002e46:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002e4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e4e:	69db      	ldr	r3, [r3, #28]
 8002e50:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e54:	f040 810c 	bne.w	8003070 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002e58:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002e62:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002e66:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002e6a:	4622      	mov	r2, r4
 8002e6c:	462b      	mov	r3, r5
 8002e6e:	1891      	adds	r1, r2, r2
 8002e70:	65b9      	str	r1, [r7, #88]	; 0x58
 8002e72:	415b      	adcs	r3, r3
 8002e74:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002e76:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002e7a:	4621      	mov	r1, r4
 8002e7c:	eb12 0801 	adds.w	r8, r2, r1
 8002e80:	4629      	mov	r1, r5
 8002e82:	eb43 0901 	adc.w	r9, r3, r1
 8002e86:	f04f 0200 	mov.w	r2, #0
 8002e8a:	f04f 0300 	mov.w	r3, #0
 8002e8e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002e92:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002e96:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002e9a:	4690      	mov	r8, r2
 8002e9c:	4699      	mov	r9, r3
 8002e9e:	4623      	mov	r3, r4
 8002ea0:	eb18 0303 	adds.w	r3, r8, r3
 8002ea4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002ea8:	462b      	mov	r3, r5
 8002eaa:	eb49 0303 	adc.w	r3, r9, r3
 8002eae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002eb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	2200      	movs	r2, #0
 8002eba:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002ebe:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002ec2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002ec6:	460b      	mov	r3, r1
 8002ec8:	18db      	adds	r3, r3, r3
 8002eca:	653b      	str	r3, [r7, #80]	; 0x50
 8002ecc:	4613      	mov	r3, r2
 8002ece:	eb42 0303 	adc.w	r3, r2, r3
 8002ed2:	657b      	str	r3, [r7, #84]	; 0x54
 8002ed4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002ed8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002edc:	f7fd f974 	bl	80001c8 <__aeabi_uldivmod>
 8002ee0:	4602      	mov	r2, r0
 8002ee2:	460b      	mov	r3, r1
 8002ee4:	4b61      	ldr	r3, [pc, #388]	; (800306c <UART_SetConfig+0x2d4>)
 8002ee6:	fba3 2302 	umull	r2, r3, r3, r2
 8002eea:	095b      	lsrs	r3, r3, #5
 8002eec:	011c      	lsls	r4, r3, #4
 8002eee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002ef8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002efc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002f00:	4642      	mov	r2, r8
 8002f02:	464b      	mov	r3, r9
 8002f04:	1891      	adds	r1, r2, r2
 8002f06:	64b9      	str	r1, [r7, #72]	; 0x48
 8002f08:	415b      	adcs	r3, r3
 8002f0a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002f0c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002f10:	4641      	mov	r1, r8
 8002f12:	eb12 0a01 	adds.w	sl, r2, r1
 8002f16:	4649      	mov	r1, r9
 8002f18:	eb43 0b01 	adc.w	fp, r3, r1
 8002f1c:	f04f 0200 	mov.w	r2, #0
 8002f20:	f04f 0300 	mov.w	r3, #0
 8002f24:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002f28:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002f2c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002f30:	4692      	mov	sl, r2
 8002f32:	469b      	mov	fp, r3
 8002f34:	4643      	mov	r3, r8
 8002f36:	eb1a 0303 	adds.w	r3, sl, r3
 8002f3a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002f3e:	464b      	mov	r3, r9
 8002f40:	eb4b 0303 	adc.w	r3, fp, r3
 8002f44:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002f48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002f54:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002f58:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002f5c:	460b      	mov	r3, r1
 8002f5e:	18db      	adds	r3, r3, r3
 8002f60:	643b      	str	r3, [r7, #64]	; 0x40
 8002f62:	4613      	mov	r3, r2
 8002f64:	eb42 0303 	adc.w	r3, r2, r3
 8002f68:	647b      	str	r3, [r7, #68]	; 0x44
 8002f6a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002f6e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002f72:	f7fd f929 	bl	80001c8 <__aeabi_uldivmod>
 8002f76:	4602      	mov	r2, r0
 8002f78:	460b      	mov	r3, r1
 8002f7a:	4611      	mov	r1, r2
 8002f7c:	4b3b      	ldr	r3, [pc, #236]	; (800306c <UART_SetConfig+0x2d4>)
 8002f7e:	fba3 2301 	umull	r2, r3, r3, r1
 8002f82:	095b      	lsrs	r3, r3, #5
 8002f84:	2264      	movs	r2, #100	; 0x64
 8002f86:	fb02 f303 	mul.w	r3, r2, r3
 8002f8a:	1acb      	subs	r3, r1, r3
 8002f8c:	00db      	lsls	r3, r3, #3
 8002f8e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002f92:	4b36      	ldr	r3, [pc, #216]	; (800306c <UART_SetConfig+0x2d4>)
 8002f94:	fba3 2302 	umull	r2, r3, r3, r2
 8002f98:	095b      	lsrs	r3, r3, #5
 8002f9a:	005b      	lsls	r3, r3, #1
 8002f9c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002fa0:	441c      	add	r4, r3
 8002fa2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002fac:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002fb0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002fb4:	4642      	mov	r2, r8
 8002fb6:	464b      	mov	r3, r9
 8002fb8:	1891      	adds	r1, r2, r2
 8002fba:	63b9      	str	r1, [r7, #56]	; 0x38
 8002fbc:	415b      	adcs	r3, r3
 8002fbe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002fc0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002fc4:	4641      	mov	r1, r8
 8002fc6:	1851      	adds	r1, r2, r1
 8002fc8:	6339      	str	r1, [r7, #48]	; 0x30
 8002fca:	4649      	mov	r1, r9
 8002fcc:	414b      	adcs	r3, r1
 8002fce:	637b      	str	r3, [r7, #52]	; 0x34
 8002fd0:	f04f 0200 	mov.w	r2, #0
 8002fd4:	f04f 0300 	mov.w	r3, #0
 8002fd8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002fdc:	4659      	mov	r1, fp
 8002fde:	00cb      	lsls	r3, r1, #3
 8002fe0:	4651      	mov	r1, sl
 8002fe2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002fe6:	4651      	mov	r1, sl
 8002fe8:	00ca      	lsls	r2, r1, #3
 8002fea:	4610      	mov	r0, r2
 8002fec:	4619      	mov	r1, r3
 8002fee:	4603      	mov	r3, r0
 8002ff0:	4642      	mov	r2, r8
 8002ff2:	189b      	adds	r3, r3, r2
 8002ff4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002ff8:	464b      	mov	r3, r9
 8002ffa:	460a      	mov	r2, r1
 8002ffc:	eb42 0303 	adc.w	r3, r2, r3
 8003000:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003004:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	2200      	movs	r2, #0
 800300c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003010:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003014:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003018:	460b      	mov	r3, r1
 800301a:	18db      	adds	r3, r3, r3
 800301c:	62bb      	str	r3, [r7, #40]	; 0x28
 800301e:	4613      	mov	r3, r2
 8003020:	eb42 0303 	adc.w	r3, r2, r3
 8003024:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003026:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800302a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800302e:	f7fd f8cb 	bl	80001c8 <__aeabi_uldivmod>
 8003032:	4602      	mov	r2, r0
 8003034:	460b      	mov	r3, r1
 8003036:	4b0d      	ldr	r3, [pc, #52]	; (800306c <UART_SetConfig+0x2d4>)
 8003038:	fba3 1302 	umull	r1, r3, r3, r2
 800303c:	095b      	lsrs	r3, r3, #5
 800303e:	2164      	movs	r1, #100	; 0x64
 8003040:	fb01 f303 	mul.w	r3, r1, r3
 8003044:	1ad3      	subs	r3, r2, r3
 8003046:	00db      	lsls	r3, r3, #3
 8003048:	3332      	adds	r3, #50	; 0x32
 800304a:	4a08      	ldr	r2, [pc, #32]	; (800306c <UART_SetConfig+0x2d4>)
 800304c:	fba2 2303 	umull	r2, r3, r2, r3
 8003050:	095b      	lsrs	r3, r3, #5
 8003052:	f003 0207 	and.w	r2, r3, #7
 8003056:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4422      	add	r2, r4
 800305e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003060:	e106      	b.n	8003270 <UART_SetConfig+0x4d8>
 8003062:	bf00      	nop
 8003064:	40011000 	.word	0x40011000
 8003068:	40011400 	.word	0x40011400
 800306c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003070:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003074:	2200      	movs	r2, #0
 8003076:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800307a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800307e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003082:	4642      	mov	r2, r8
 8003084:	464b      	mov	r3, r9
 8003086:	1891      	adds	r1, r2, r2
 8003088:	6239      	str	r1, [r7, #32]
 800308a:	415b      	adcs	r3, r3
 800308c:	627b      	str	r3, [r7, #36]	; 0x24
 800308e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003092:	4641      	mov	r1, r8
 8003094:	1854      	adds	r4, r2, r1
 8003096:	4649      	mov	r1, r9
 8003098:	eb43 0501 	adc.w	r5, r3, r1
 800309c:	f04f 0200 	mov.w	r2, #0
 80030a0:	f04f 0300 	mov.w	r3, #0
 80030a4:	00eb      	lsls	r3, r5, #3
 80030a6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80030aa:	00e2      	lsls	r2, r4, #3
 80030ac:	4614      	mov	r4, r2
 80030ae:	461d      	mov	r5, r3
 80030b0:	4643      	mov	r3, r8
 80030b2:	18e3      	adds	r3, r4, r3
 80030b4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80030b8:	464b      	mov	r3, r9
 80030ba:	eb45 0303 	adc.w	r3, r5, r3
 80030be:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80030c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	2200      	movs	r2, #0
 80030ca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80030ce:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80030d2:	f04f 0200 	mov.w	r2, #0
 80030d6:	f04f 0300 	mov.w	r3, #0
 80030da:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80030de:	4629      	mov	r1, r5
 80030e0:	008b      	lsls	r3, r1, #2
 80030e2:	4621      	mov	r1, r4
 80030e4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80030e8:	4621      	mov	r1, r4
 80030ea:	008a      	lsls	r2, r1, #2
 80030ec:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80030f0:	f7fd f86a 	bl	80001c8 <__aeabi_uldivmod>
 80030f4:	4602      	mov	r2, r0
 80030f6:	460b      	mov	r3, r1
 80030f8:	4b60      	ldr	r3, [pc, #384]	; (800327c <UART_SetConfig+0x4e4>)
 80030fa:	fba3 2302 	umull	r2, r3, r3, r2
 80030fe:	095b      	lsrs	r3, r3, #5
 8003100:	011c      	lsls	r4, r3, #4
 8003102:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003106:	2200      	movs	r2, #0
 8003108:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800310c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003110:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003114:	4642      	mov	r2, r8
 8003116:	464b      	mov	r3, r9
 8003118:	1891      	adds	r1, r2, r2
 800311a:	61b9      	str	r1, [r7, #24]
 800311c:	415b      	adcs	r3, r3
 800311e:	61fb      	str	r3, [r7, #28]
 8003120:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003124:	4641      	mov	r1, r8
 8003126:	1851      	adds	r1, r2, r1
 8003128:	6139      	str	r1, [r7, #16]
 800312a:	4649      	mov	r1, r9
 800312c:	414b      	adcs	r3, r1
 800312e:	617b      	str	r3, [r7, #20]
 8003130:	f04f 0200 	mov.w	r2, #0
 8003134:	f04f 0300 	mov.w	r3, #0
 8003138:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800313c:	4659      	mov	r1, fp
 800313e:	00cb      	lsls	r3, r1, #3
 8003140:	4651      	mov	r1, sl
 8003142:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003146:	4651      	mov	r1, sl
 8003148:	00ca      	lsls	r2, r1, #3
 800314a:	4610      	mov	r0, r2
 800314c:	4619      	mov	r1, r3
 800314e:	4603      	mov	r3, r0
 8003150:	4642      	mov	r2, r8
 8003152:	189b      	adds	r3, r3, r2
 8003154:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003158:	464b      	mov	r3, r9
 800315a:	460a      	mov	r2, r1
 800315c:	eb42 0303 	adc.w	r3, r2, r3
 8003160:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003164:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	2200      	movs	r2, #0
 800316c:	67bb      	str	r3, [r7, #120]	; 0x78
 800316e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003170:	f04f 0200 	mov.w	r2, #0
 8003174:	f04f 0300 	mov.w	r3, #0
 8003178:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800317c:	4649      	mov	r1, r9
 800317e:	008b      	lsls	r3, r1, #2
 8003180:	4641      	mov	r1, r8
 8003182:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003186:	4641      	mov	r1, r8
 8003188:	008a      	lsls	r2, r1, #2
 800318a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800318e:	f7fd f81b 	bl	80001c8 <__aeabi_uldivmod>
 8003192:	4602      	mov	r2, r0
 8003194:	460b      	mov	r3, r1
 8003196:	4611      	mov	r1, r2
 8003198:	4b38      	ldr	r3, [pc, #224]	; (800327c <UART_SetConfig+0x4e4>)
 800319a:	fba3 2301 	umull	r2, r3, r3, r1
 800319e:	095b      	lsrs	r3, r3, #5
 80031a0:	2264      	movs	r2, #100	; 0x64
 80031a2:	fb02 f303 	mul.w	r3, r2, r3
 80031a6:	1acb      	subs	r3, r1, r3
 80031a8:	011b      	lsls	r3, r3, #4
 80031aa:	3332      	adds	r3, #50	; 0x32
 80031ac:	4a33      	ldr	r2, [pc, #204]	; (800327c <UART_SetConfig+0x4e4>)
 80031ae:	fba2 2303 	umull	r2, r3, r2, r3
 80031b2:	095b      	lsrs	r3, r3, #5
 80031b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80031b8:	441c      	add	r4, r3
 80031ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80031be:	2200      	movs	r2, #0
 80031c0:	673b      	str	r3, [r7, #112]	; 0x70
 80031c2:	677a      	str	r2, [r7, #116]	; 0x74
 80031c4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80031c8:	4642      	mov	r2, r8
 80031ca:	464b      	mov	r3, r9
 80031cc:	1891      	adds	r1, r2, r2
 80031ce:	60b9      	str	r1, [r7, #8]
 80031d0:	415b      	adcs	r3, r3
 80031d2:	60fb      	str	r3, [r7, #12]
 80031d4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80031d8:	4641      	mov	r1, r8
 80031da:	1851      	adds	r1, r2, r1
 80031dc:	6039      	str	r1, [r7, #0]
 80031de:	4649      	mov	r1, r9
 80031e0:	414b      	adcs	r3, r1
 80031e2:	607b      	str	r3, [r7, #4]
 80031e4:	f04f 0200 	mov.w	r2, #0
 80031e8:	f04f 0300 	mov.w	r3, #0
 80031ec:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80031f0:	4659      	mov	r1, fp
 80031f2:	00cb      	lsls	r3, r1, #3
 80031f4:	4651      	mov	r1, sl
 80031f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80031fa:	4651      	mov	r1, sl
 80031fc:	00ca      	lsls	r2, r1, #3
 80031fe:	4610      	mov	r0, r2
 8003200:	4619      	mov	r1, r3
 8003202:	4603      	mov	r3, r0
 8003204:	4642      	mov	r2, r8
 8003206:	189b      	adds	r3, r3, r2
 8003208:	66bb      	str	r3, [r7, #104]	; 0x68
 800320a:	464b      	mov	r3, r9
 800320c:	460a      	mov	r2, r1
 800320e:	eb42 0303 	adc.w	r3, r2, r3
 8003212:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003214:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	2200      	movs	r2, #0
 800321c:	663b      	str	r3, [r7, #96]	; 0x60
 800321e:	667a      	str	r2, [r7, #100]	; 0x64
 8003220:	f04f 0200 	mov.w	r2, #0
 8003224:	f04f 0300 	mov.w	r3, #0
 8003228:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800322c:	4649      	mov	r1, r9
 800322e:	008b      	lsls	r3, r1, #2
 8003230:	4641      	mov	r1, r8
 8003232:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003236:	4641      	mov	r1, r8
 8003238:	008a      	lsls	r2, r1, #2
 800323a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800323e:	f7fc ffc3 	bl	80001c8 <__aeabi_uldivmod>
 8003242:	4602      	mov	r2, r0
 8003244:	460b      	mov	r3, r1
 8003246:	4b0d      	ldr	r3, [pc, #52]	; (800327c <UART_SetConfig+0x4e4>)
 8003248:	fba3 1302 	umull	r1, r3, r3, r2
 800324c:	095b      	lsrs	r3, r3, #5
 800324e:	2164      	movs	r1, #100	; 0x64
 8003250:	fb01 f303 	mul.w	r3, r1, r3
 8003254:	1ad3      	subs	r3, r2, r3
 8003256:	011b      	lsls	r3, r3, #4
 8003258:	3332      	adds	r3, #50	; 0x32
 800325a:	4a08      	ldr	r2, [pc, #32]	; (800327c <UART_SetConfig+0x4e4>)
 800325c:	fba2 2303 	umull	r2, r3, r2, r3
 8003260:	095b      	lsrs	r3, r3, #5
 8003262:	f003 020f 	and.w	r2, r3, #15
 8003266:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4422      	add	r2, r4
 800326e:	609a      	str	r2, [r3, #8]
}
 8003270:	bf00      	nop
 8003272:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003276:	46bd      	mov	sp, r7
 8003278:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800327c:	51eb851f 	.word	0x51eb851f

08003280 <memset>:
 8003280:	4402      	add	r2, r0
 8003282:	4603      	mov	r3, r0
 8003284:	4293      	cmp	r3, r2
 8003286:	d100      	bne.n	800328a <memset+0xa>
 8003288:	4770      	bx	lr
 800328a:	f803 1b01 	strb.w	r1, [r3], #1
 800328e:	e7f9      	b.n	8003284 <memset+0x4>

08003290 <__libc_init_array>:
 8003290:	b570      	push	{r4, r5, r6, lr}
 8003292:	4d0d      	ldr	r5, [pc, #52]	; (80032c8 <__libc_init_array+0x38>)
 8003294:	4c0d      	ldr	r4, [pc, #52]	; (80032cc <__libc_init_array+0x3c>)
 8003296:	1b64      	subs	r4, r4, r5
 8003298:	10a4      	asrs	r4, r4, #2
 800329a:	2600      	movs	r6, #0
 800329c:	42a6      	cmp	r6, r4
 800329e:	d109      	bne.n	80032b4 <__libc_init_array+0x24>
 80032a0:	4d0b      	ldr	r5, [pc, #44]	; (80032d0 <__libc_init_array+0x40>)
 80032a2:	4c0c      	ldr	r4, [pc, #48]	; (80032d4 <__libc_init_array+0x44>)
 80032a4:	f000 f818 	bl	80032d8 <_init>
 80032a8:	1b64      	subs	r4, r4, r5
 80032aa:	10a4      	asrs	r4, r4, #2
 80032ac:	2600      	movs	r6, #0
 80032ae:	42a6      	cmp	r6, r4
 80032b0:	d105      	bne.n	80032be <__libc_init_array+0x2e>
 80032b2:	bd70      	pop	{r4, r5, r6, pc}
 80032b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80032b8:	4798      	blx	r3
 80032ba:	3601      	adds	r6, #1
 80032bc:	e7ee      	b.n	800329c <__libc_init_array+0xc>
 80032be:	f855 3b04 	ldr.w	r3, [r5], #4
 80032c2:	4798      	blx	r3
 80032c4:	3601      	adds	r6, #1
 80032c6:	e7f2      	b.n	80032ae <__libc_init_array+0x1e>
 80032c8:	08003318 	.word	0x08003318
 80032cc:	08003318 	.word	0x08003318
 80032d0:	08003318 	.word	0x08003318
 80032d4:	0800331c 	.word	0x0800331c

080032d8 <_init>:
 80032d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032da:	bf00      	nop
 80032dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80032de:	bc08      	pop	{r3}
 80032e0:	469e      	mov	lr, r3
 80032e2:	4770      	bx	lr

080032e4 <_fini>:
 80032e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032e6:	bf00      	nop
 80032e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80032ea:	bc08      	pop	{r3}
 80032ec:	469e      	mov	lr, r3
 80032ee:	4770      	bx	lr
